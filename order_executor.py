"""
Order Executor - –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
==========================================

–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£:
ticker_monitor.py ‚Üí signal_analyzer.py ‚Üí [–≠–¢–û–¢ –ú–û–î–£–õ–¨] ‚Üí telegram_bot.py
                                               ‚Üì
                                      websocket_monitor.py

–§—É–Ω–∫—Ü–∏–∏:
1. –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –æ—Ç signal_analyzer
2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (2% –æ—Ç –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞)
3. –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ Binance
4. –ü–µ—Ä–µ–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä –≤ websocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram

Author: HEDGER
Version: 1.0 - MVP Integration
"""

from typing import Dict, Optional, Tuple, List
from decimal import Decimal, ROUND_UP, ROUND_HALF_UP
from datetime import datetime, timedelta
import time
import threading
import asyncio

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from utils import logger
from telegram_bot import telegram_bot
from symbol_cache import get_symbol_cache, round_price_for_symbol, round_quantity_for_symbol, calculate_leverage_for_symbol
from config import BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET, MULTIPLE_ORDERS, MAX_CONCURRENT_ORDERS, RISK_PERCENT, FUTURES_LEVERAGE, FUTURES_MARGIN_TYPE

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
try:
    from unified_sync import validate_signal_before_execution
    SYNC_AVAILABLE = True
    logger.info("‚úÖ Orders Synchronizer –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError:
    logger.warning("‚ö†Ô∏è Orders Synchronizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    SYNC_AVAILABLE = False
    def validate_signal_before_execution(symbol, side, quantity) -> Tuple[bool, str]:
        """Mock validation when synchronizer is not available"""
        return True, "Synchronizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# Binance
from binance.client import Client
from binance.exceptions import BinanceAPIException

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Orders Watchdog
try:
    from orders_watchdog import watchdog_api
    WATCHDOG_AVAILABLE = True
    logger.info("‚úÖ Orders Watchdog API –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError:
    logger.warning("‚ö†Ô∏è Orders Watchdog –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    WATCHDOG_AVAILABLE = False
    watchdog_api = None
    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
    try:
        from websocket_monitor import order_monitor
    except ImportError:
        logger.warning("‚ö†Ô∏è websocket_monitor —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        order_monitor = None

# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ config.py –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö

class OrderExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        global order_lifecycle_manager
        
        self.binance_client = None
        self.symbol_cache = get_symbol_cache()
        self.order_lock = threading.Lock()  # üîí Thread-safe lock –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
        self._init_binance_client()
        
        # –°–æ–∑–¥–∞–µ–º lifecycle manager –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        order_lifecycle_manager = OrderLifecycleManager(self)
        self.lifecycle_manager = order_lifecycle_manager
        
        logger.info(f"üéØ OrderExecutor initialized (Risk: {RISK_PERCENT}%, Leverage: {FUTURES_LEVERAGE}x)")
        logger.info(f"üìã Order Lifecycle Management –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    def _init_binance_client(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not BINANCE_API_KEY or not BINANCE_API_SECRET:
                logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance ({'TESTNET' if BINANCE_TESTNET else 'MAINNET'})...")
            
            self.binance_client = Client(
                api_key=BINANCE_API_KEY,
                api_secret=BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if BINANCE_TESTNET:
                account = self.binance_client.futures_account()
            else:
                account = self.binance_client.futures_account()
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            self.binance_client = None
    
    def get_total_balance(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USDT (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π)"""
        if not self.binance_client:
            logger.error("‚ùå Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 0.0
        
        try:
            if BINANCE_TESTNET:
                account = self.binance_client.futures_account()
            else:
                account = self.binance_client.futures_account()
            
            total_balance = float(account['totalWalletBalance'])
            logger.info(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} USDT")
            return total_balance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0
    
    def check_open_position(self, symbol: str) -> tuple[bool, dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
        
        Returns:
            tuple: (has_position: bool, position_info: dict)
        """
        if not self.binance_client:
            logger.error("‚ùå Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False, {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            positions = self.binance_client.futures_position_information(symbol=symbol)
            
            for position in positions:
                position_amt = float(position['positionAmt'])
                
                # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Ä–∞–≤–Ω–æ 0, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
                if abs(position_amt) > 0:
                    position_info = {
                        'symbol': position['symbol'],
                        'side': 'LONG' if position_amt > 0 else 'SHORT',
                        'size': abs(position_amt),
                        'entry_price': float(position['entryPrice']),
                        'unrealized_pnl': float(position['unRealizedProfit']),
                        'percentage': float(position['percentage']),
                        'notional': abs(float(position['notional']))
                    }
                    
                    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è {symbol}: {position_info['side']} {position_info['size']}")
                    return True, position_info
            
            return False, {}
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            return False, {}
    
    def get_current_price(self, ticker: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É"""
        if not self.binance_client:
            return 0.0
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –§–¨–Æ–ß–ï–†–°–ù–´–ï —Ü–µ–Ω—ã, –Ω–µ —Å–ø–æ—Ç–æ–≤—ã–µ!
            ticker_data = self.binance_client.futures_symbol_ticker(symbol=ticker)
            return float(ticker_data['price'])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {ticker}: {e}")
            return 0.0
    
    def set_leverage(self, ticker: str, notional_value: Optional[float] = None) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        Args:
            ticker: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            notional_value: –ù–æ–º–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (quantity * price)
                           –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–ª–µ—á–æ
        """
        if not self.binance_client:
            return False
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ
            if notional_value:
                optimal_leverage = calculate_leverage_for_symbol(ticker, notional_value, FUTURES_LEVERAGE)
            else:
                optimal_leverage = FUTURES_LEVERAGE
            
            result = self.binance_client.futures_change_leverage(
                symbol=ticker, 
                leverage=optimal_leverage
            )
            
            if optimal_leverage != FUTURES_LEVERAGE:
                logger.info(f"‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–ª–µ—á–æ {optimal_leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {ticker} (–ø–æ–∑–∏—Ü–∏—è: ${notional_value:,.0f})")
            else:
                logger.info(f"‚úÖ –ü–ª–µ—á–æ {optimal_leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {ticker}")
            
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {ticker}: {e}")
            return False
    
    def set_margin_type(self, ticker: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if not self.binance_client:
            return False
        
        try:
            # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤: CROSS -> CROSSED, ISOLATED –æ—Å—Ç–∞–µ—Ç—Å—è ISOLATED
            futures_margin_type = 'CROSSED' if FUTURES_MARGIN_TYPE == 'CROSS' else 'ISOLATED'
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            result = self.binance_client.futures_change_margin_type(
                symbol=ticker,
                marginType=futures_margin_type  # –ò—Å–ø–æ–ª—å–∑—É–µ–º marginType (camelCase) –¥–ª—è Futures API
            )
            logger.info(f"‚úÖ –†–µ–∂–∏–º –º–∞—Ä–∂–∏ {futures_margin_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {ticker}")
            return True
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            error_msg = str(e).lower()
            if "no need to change margin type" in error_msg or "margin type is the same" in error_msg:
                futures_margin_type = 'CROSSED' if FUTURES_MARGIN_TYPE == 'CROSS' else 'ISOLATED'
                logger.info(f"‚úÖ –†–µ–∂–∏–º –º–∞—Ä–∂–∏ {futures_margin_type} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {ticker}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏ –¥–ª—è {ticker}: {e}")
                return False

    def setup_symbol_settings(self, ticker: str) -> bool:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞: –ø–ª–µ—á–æ –∏ —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏
        
        Args:
            ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–º–≤–æ–ª–∞ {ticker}...")
        
        # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏
        margin_ok = self.set_margin_type(ticker)
        
        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        leverage_ok = self.set_leverage(ticker)
        
        if margin_ok and leverage_ok:
            logger.info(f"‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞ {ticker} –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞ {ticker} —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å")
            return False
    
    def calculate_position_size(self, ticker: str, entry_price: float, stop_loss: float) -> Tuple[float, float, str]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
            
        Returns:
            (quantity, usdt_amount, error_msg): –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, —Å—É–º–º–∞ –≤ USDT, –æ—à–∏–±–∫–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            total_balance = self.get_total_balance()
            if total_balance <= 0:
                return 0.0, 0.0, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–¥ —Ä–∏—Å–∫ (2% –æ—Ç –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞)
            risk_amount = total_balance * (RISK_PERCENT / 100)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–±—ã—Ç–æ–∫ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            risk_per_unit = abs(entry_price - stop_loss)
            if risk_per_unit == 0:
                return 0.0, 0.0, "–°—Ç–æ–ø-–ª–æ—Å—Å —Ä–∞–≤–µ–Ω —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞"
            
            # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —É—á–µ—Ç–∞ –ø–ª–µ—á–∞
            base_quantity = risk_amount / risk_per_unit
            
            # –° —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞ –ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ
            usdt_amount = base_quantity * entry_price
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–∏–º–≤–æ–ª–∞
            rounded_quantity = round_quantity_for_symbol(ticker, base_quantity)
            
            # –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            if rounded_quantity < base_quantity:
                # –ü–æ–ª—É—á–∞–µ–º step_size –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —à–∞–≥
                symbol_info = self.symbol_cache.get_symbol_info(ticker)
                if symbol_info:
                    step_size = float(symbol_info.get('step_size', '0.001'))
                    rounded_quantity += step_size
                    # –û–∫—Ä—É–≥–ª—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–∞
                    rounded_quantity = round_quantity_for_symbol(ticker, rounded_quantity)
            final_usdt_amount = rounded_quantity * entry_price
            
            logger.info(
                f"üìä –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ {ticker}: "
                f"–ë–∞–ª–∞–Ω—Å: {total_balance:.2f} USDT | "
                f"–†–∏—Å–∫: {risk_amount:.2f} USDT | "
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rounded_quantity} | "
                f"–°—É–º–º–∞: {final_usdt_amount:.2f} USDT"
            )
            
            return rounded_quantity, final_usdt_amount, ""
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}"
            logger.error(f"‚ùå {error_msg}")
            return 0.0, 0.0, error_msg
    
    def place_market_order(self, signal_data: Dict) -> Dict:
        """–†–∞–∑–º–µ—â–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä —Å SL –∏ TP"""
        if not self.binance_client:
            return {
                'success': False,
                'error': 'Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                'signal_data': signal_data
            }
        
        ticker = signal_data['ticker']
        signal_type = signal_data['signal']
        entry_price = float(signal_data['entry_price'])
        stop_loss = float(signal_data['stop_loss'])
        take_profit = float(signal_data['take_profit'])
        
        try:
            # ÔøΩ –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å Orders Watchdog
            if SYNC_AVAILABLE:
                side = "BUY" if signal_type == "LONG" else "SELL"
                quantity = 100.0  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                
                is_valid, validation_reason = validate_signal_before_execution(ticker, side, quantity)
                
                if not is_valid:
                    logger.warning(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª {ticker} –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: {validation_reason}")
                    self._send_synchronization_conflict_notification(ticker, signal_data, validation_reason)
                    return {
                        'success': False,
                        'error': f'–ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {validation_reason}',
                        'signal_data': signal_data,
                        'sync_validation': {'valid': False, 'reason': validation_reason}
                    }
                else:
                    logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª {ticker} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {validation_reason}")
            
            # ÔøΩüîß –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            has_position, position_info = self.check_open_position(ticker)
            
            if has_position:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                self._send_position_exists_notification(ticker, position_info, signal_data)
                
                if not MULTIPLE_ORDERS:
                    # –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                    self._send_multiple_orders_denied_notification(ticker, signal_data, position_info)
                    return {
                        'success': False,
                        'error': f'–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –¥–ª—è {ticker}',
                        'signal_data': signal_data,
                        'existing_position': position_info
                    }
                else:
                    # –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    self._send_multiple_orders_allowed_notification(ticker, signal_data, position_info)
                    
                    # üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ï–ö–¶–ò–Ø: Thread-safe –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                    with self.order_lock:
                        positions_count, orders_count, total_active = self._count_active_positions_and_orders_for_symbol(ticker)
                        
                        if total_active >= MAX_CONCURRENT_ORDERS:
                            self._send_max_symbol_limit_notification(ticker, signal_data, positions_count, orders_count, total_active)
                            return {
                                'success': False,
                                'error': f'–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–ª—è {ticker}: {total_active}/{MAX_CONCURRENT_ORDERS} (–ø–æ–∑–∏—Ü–∏–π: {positions_count}, –æ—Ä–¥–µ—Ä–æ–≤: {orders_count})',
                                'signal_data': signal_data,
                                'total_active': total_active,
                                'positions_count': positions_count,
                                'orders_count': orders_count
                            }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "even or better")
                        side = 'BUY' if signal_data['signal'] == 'LONG' else 'SELL'
                        entry_price = float(signal_data['entry_price'])
                        price_acceptable, price_reason = self._check_price_quality(ticker, side, entry_price)
                        
                        if not price_acceptable:
                            self._send_price_quality_notification(ticker, signal_data, price_reason)
                            return {
                                'success': False,
                                'error': f'–¶–µ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é "even or better": {price_reason}',
                                'signal_data': signal_data,
                                'price_reason': price_reason
                            }
                    # üîí –ö–û–ù–ï–¶ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –°–ï–ö–¶–ò–ò
                    
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞ (–ø–ª–µ—á–æ –∏ —Ä–µ–∂–∏–º –º–∞—Ä–∂–∏)
            self.setup_symbol_settings(ticker)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            quantity, usdt_amount, error_msg = self.calculate_position_size(
                ticker, entry_price, stop_loss
            )
            
            if quantity == 0:
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é: {error_msg}',
                    'signal_data': signal_data
                }
            
            # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä (–ù–ï MARKET!)
            side = 'BUY' if signal_type == 'LONG' else 'SELL'
            position_side = 'LONG' if signal_type == 'LONG' else 'SHORT'  # –î–ª—è hedge mode
            entry_price_rounded = round_price_for_symbol(ticker, entry_price)
            
            logger.info(f"üéØ –†–∞–∑–º–µ—â–∞–µ–º LIMIT {side} –æ—Ä–¥–µ—Ä {ticker}: {quantity} –ø–æ —Ü–µ–Ω–µ {entry_price_rounded} (~{usdt_amount:.2f} USDT) positionSide={position_side}")
            
            main_order = self.binance_client.futures_create_order(
                symbol=ticker,
                side=side,
                type='LIMIT',  # –ò–°–ü–†–ê–í–õ–ï–ù–û: LIMIT –≤–º–µ—Å—Ç–æ MARKET!
                quantity=quantity,
                price=str(entry_price_rounded),  # –¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è LIMIT
                timeInForce='GTC',  # Good Till Cancelled
                positionSide=position_side
            )
            
            logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {main_order['orderId']}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º Stop Loss (LIMIT –≤–º–µ—Å—Ç–æ STOP_MARKET –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è)
            sl_side = 'SELL' if signal_type == 'LONG' else 'BUY'
            sl_price = round_price_for_symbol(ticker, stop_loss)
            
            stop_order = self.binance_client.futures_create_order(
                symbol=ticker,
                side=sl_side,
                type='STOP',
                quantity=quantity,
                price=str(sl_price),  # –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                stopPrice=str(sl_price),  # –¶–µ–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–æ–ø–∞
                timeInForce='GTC',
                positionSide=position_side  # –¢–æ—Ç –∂–µ positionSide!
            )
            
            logger.info(f"üõ°Ô∏è Stop Loss —Ä–∞–∑–º–µ—â–µ–Ω: {stop_order['orderId']} at {sl_price}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º Take Profit
            tp_side = 'SELL' if signal_type == 'LONG' else 'BUY'
            tp_price = round_price_for_symbol(ticker, take_profit)
            
            tp_order = self.binance_client.futures_create_order(
                symbol=ticker,
                side=tp_side,
                type='TAKE_PROFIT_MARKET',
                quantity=quantity,
                stopPrice=str(tp_price),
                positionSide=position_side
            )
            
            logger.info(f"üéØ Take Profit —Ä–∞–∑–º–µ—â–µ–Ω: {tp_order['orderId']} at {tp_price}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'success': True,
                'main_order': main_order,
                'stop_order': stop_order,
                'tp_order': tp_order,
                'quantity': quantity,
                'usdt_amount': usdt_amount,
                'signal_data': signal_data
            }
            
        except BinanceAPIException as e:
            error_msg = f"Binance API –æ—à–∏–±–∫–∞: {e.message}"
            logger.error(f"‚ùå {error_msg}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª Binance
            if "Quantitative Rules violated" in str(e.message):
                logger.warning(f"‚ö†Ô∏è Binance –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è {ticker} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –±–ª–æ–∫–µ
                try:
                    message = f"""
üö® <b>–û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï BINANCE</b> üö®

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üìà <b>–°–∏–≥–Ω–∞–ª:</b> {signal_data['signal_type']}
‚ùå <b>–û—à–∏–±–∫–∞:</b> Quantitative Rules Violation

‚ö†Ô∏è <b>–¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ Binance</b>
üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
                    telegram_bot.send_message(message)
                except:
                    pass
                    
            return {
                'success': False,
                'error': error_msg,
                'signal_data': signal_data
            }
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            logger.error(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'signal_data': signal_data
            }
    
    def execute_signal(self, signal_data: Dict) -> bool:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π lifecycle manager
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç signal_analyzer
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω
        """
        ticker = signal_data.get('ticker', 'UNKNOWN')
        signal_type = signal_data.get('signal', 'UNKNOWN')
        
        logger.info(f"üéØ –ò—Å–ø–æ–ª–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª {ticker}: {signal_type}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π lifecycle manager –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            order_result = self.lifecycle_manager.place_main_limit_order(signal_data)
            
            if order_result['success']:
                logger.info(f"‚úÖ === –õ–ò–ú–ò–¢–ù–´–ô –û–†–î–ï–† {ticker} –†–ê–ó–ú–ï–©–ï–ù ===")
                logger.info(f"üìã Order ID: {order_result['main_order_id']}")
                logger.info(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_result['quantity']:.6f}")
                logger.info(f"üí∞ –°—É–º–º–∞: {order_result['usdt_amount']:.2f} USDT")
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è...")
                
                return True
            else:
                # –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                self._send_error_notification(order_result['error'], signal_data)
                return False
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {ticker}: {e}"
            logger.error(f"‚ùå {error_msg}")
            self._send_error_notification(error_msg, signal_data)
            return False
    
    def _send_success_notification(self, order_result: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞"""
        try:
            signal_data = order_result['signal_data']
            ticker = signal_data['ticker']
            signal_type = signal_data['signal']
            quantity = order_result['quantity']
            usdt_amount = order_result['usdt_amount']
            
            main_order_id = order_result['main_order']['orderId']
            stop_order_id = order_result['stop_order']['orderId']
            tp_order_id = order_result['tp_order']['orderId']
            
            # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ –º–∞—Ä–∂–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            display_margin_type = 'CROSSED' if FUTURES_MARGIN_TYPE == 'CROSS' else 'ISOLATED'
            
            message = f"""
üöÄ <b>–û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù!</b> üöÄ

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {quantity}
üíµ <b>–°—É–º–º–∞:</b> {usdt_amount:.2f} USDT
‚ö° <b>–ü–ª–µ—á–æ:</b> {FUTURES_LEVERAGE}x
üîß <b>–†–µ–∂–∏–º –º–∞—Ä–∂–∏:</b> {display_margin_type}

üéØ <b>–¶–µ–Ω—ã:</b>
‚Ä¢ Entry: {signal_data['entry_price']:.6f}
‚Ä¢ Stop: {signal_data['stop_loss']:.6f}
‚Ä¢ Target: {signal_data['take_profit']:.6f}

üÜî <b>–û—Ä–¥–µ—Ä–∞:</b>
‚Ä¢ Main: {main_order_id}
‚Ä¢ Stop: {stop_order_id}  
‚Ä¢ TP: {tp_order_id}

üìä <b>–°—Ö–æ–∂–¥–µ–Ω–∏–µ:</b> {signal_data.get('timeframes_str', 'N/A')}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal_data.get('confidence', 0):.1%}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
    
    def _send_error_notification(self, error_msg: str, signal_data: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            ticker = signal_data.get('ticker', 'UNKNOWN')
            signal_type = signal_data.get('signal', 'UNKNOWN')
            
            message = f"""
üö® <b>–û–®–ò–ë–ö–ê –û–†–î–ï–†–ê</b> üö®

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üìà <b>–°–∏–≥–Ω–∞–ª:</b> {signal_type}
‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_msg}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def _send_position_exists_notification(self, ticker: str, position_info: dict, signal_data: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            signal_type = signal_data.get('signal', 'UNKNOWN')
            
            message = f"""
üìä <b>–û–¢–ö–†–´–¢–ê–Ø –ü–û–ó–ò–¶–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê</b> üìä

üí∞ <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {position_info['side']}
üî¢ <b>–†–∞–∑–º–µ—Ä:</b> {position_info['size']}
üíµ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {position_info['entry_price']:.6f}
üìä <b>P&L:</b> {position_info['unrealized_pnl']:.2f} USDT ({position_info['percentage']:.2f}%)
üíº <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {position_info['notional']:.2f} USDT

üîî <b>–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:</b> {signal_type}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def _send_multiple_orders_denied_notification(self, ticker: str, signal_data: Dict, position_info: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            signal_type = signal_data.get('signal', 'UNKNOWN')
            entry_price = signal_data.get('entry_price', 0)
            
            message = f"""
üö´ <b>–ü–û–í–¢–û–†–ù–û–ï –û–¢–ö–†–´–¢–ò–ï –ó–ê–ü–†–ï–©–ï–ù–û</b> üö´

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–°–∏–≥–Ω–∞–ª:</b> {signal_type}
üíµ <b>–¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {entry_price}

‚ùå <b>–û—Ä–¥–µ—Ä –ù–ï –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!</b>

üìà <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è {position_info['side']} {position_info['size']}
‚öôÔ∏è <b>MULTIPLE_ORDERS = false</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
    
    def _send_multiple_orders_allowed_notification(self, ticker: str, signal_data: Dict, position_info: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            signal_type = signal_data.get('signal', 'UNKNOWN')
            entry_price = signal_data.get('entry_price', 0)
            
            message = f"""
‚úÖ <b>–ü–û–í–¢–û–†–ù–û–ï –û–¢–ö–†–´–¢–ò–ï –†–ê–ó–†–ï–®–ï–ù–û</b> ‚úÖ

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:</b> {signal_type}
üíµ <b>–¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {entry_price}

üìà <b>–û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è:</b> {position_info['side']} {position_info['size']}
‚öôÔ∏è <b>MULTIPLE_ORDERS = true</b>

üöÄ <b>–†–∞–∑–º–µ—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä...</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
    
    def _add_to_monitoring(self, order_result: Dict) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if order_monitor:
                # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –æ—Ä–¥–µ—Ä–æ–≤ –≤ REST –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                order_monitor.add_order_group(order_result)
                
                ticker = order_result['signal_data']['ticker']
                logger.info(f"üëÅÔ∏è –û—Ä–¥–µ—Ä–∞ {ticker} –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ REST API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            else:
                logger.warning("‚ö†Ô∏è –°—Ç–∞—Ä—ã–π order_monitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {e}")

    def _count_open_orders_for_symbol(self, symbol: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            if not self.binance_client:
                return 0
                
            open_orders = self.binance_client.futures_get_open_orders(symbol=symbol)
            return len(open_orders)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            return 0
    
    def _count_active_positions_and_orders_for_symbol(self, symbol: str) -> Tuple[int, int, int]:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (FILLED) –∏ pending –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        
        Returns:
            tuple: (filled_positions, pending_orders, total_for_limit_check) –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        """
        try:
            if not self.binance_client:
                return 0, 0, 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ FILLED –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            account_info = self.binance_client.futures_account()
            filled_positions = 0
            
            for position in account_info.get('positions', []):
                if position['symbol'] == symbol:
                    position_amt = float(position.get('positionAmt', 0))
                    if position_amt != 0:  # –†–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞—è FILLED –ø–æ–∑–∏—Ü–∏—è
                        filled_positions += 1
                        break  # –î–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 1 –ø–æ–∑–∏—Ü–∏—è
            
            # –ü–æ–ª—É—á–∞–µ–º pending –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞  
            open_orders = self.binance_client.futures_get_open_orders(symbol=symbol)
            pending_orders = len(open_orders)
            
            # –î–ª—è –ª–∏–º–∏—Ç–∞ —Å—á–∏—Ç–∞–µ–º: —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ + pending –æ—Ä–¥–µ—Ä–∞
            total_for_limit = filled_positions + pending_orders
            
            logger.debug(f"üìä {symbol} status: {filled_positions} FILLED positions + {pending_orders} pending orders = {total_for_limit} total")
            
            return filled_positions, pending_orders, total_for_limit
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–ª—è {symbol}: {e}")
            return 0, 0, 0
            
    def _get_open_orders_with_prices(self, symbol: str, side: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–Ω—ã
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            side: –°—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (BUY/SELL)
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
        """
        try:
            if not self.binance_client:
                return []
                
            open_orders = self.binance_client.futures_get_open_orders(symbol=symbol)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ –∏ —Ç–∏–ø—É –æ—Ä–¥–µ—Ä–∞
            relevant_orders = []
            for order in open_orders:
                if order.get('side') == side and order.get('type') == 'LIMIT':
                    relevant_orders.append({
                        'orderId': order['orderId'],
                        'price': float(order['price']),
                        'side': order['side'],
                        'quantity': float(order['origQty'])
                    })
            
            return relevant_orders
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –¥–ª—è {symbol}: {e}")
            return []
            
    def _check_price_quality(self, symbol: str, side: str, new_price: float) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—ã –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ LONG/SHORT –ª–æ–≥–∏–∫–µ
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª  
            side: –°—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ (BUY/SELL)
            new_price: –¶–µ–Ω–∞ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            Tuple[is_acceptable: bool, reason: str]
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã (–ø–æ–∑–∏—Ü–∏–∏ + –æ—Ä–¥–µ—Ä–∞)
            relevant_prices = []
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ 
            if self.binance_client:
                account_info = self.binance_client.futures_account()
                for position in account_info.get('positions', []):
                    if position['symbol'] == symbol:
                        position_amt = float(position.get('positionAmt', 0))
                        if position_amt != 0:
                            entry_price = float(position['entryPrice'])
                            relevant_prices.append(entry_price)
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
            existing_orders = self._get_open_orders_with_prices(symbol, side)
            for order in existing_orders:
                relevant_prices.append(order['price'])
            
            if not relevant_prices:
                return True, "–ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∏–ª–∏ –æ—Ä–¥–µ—Ä–æ–≤"
            
            # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è LONG/SHORT
            if side == 'BUY':  # LONG –ø–æ–∑–∏—Ü–∏–∏
                # –î–ª—è LONG: –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ù–ò–ñ–ï –ª—É—á—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                min_existing_price = min(relevant_prices)
                if new_price >= min_existing_price:
                    return False, f"LONG: –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ {new_price} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ –ª—É—á—à–µ–π {min_existing_price}"
            else:  # SELL / SHORT –ø–æ–∑–∏—Ü–∏–∏  
                # –î–ª—è SHORT: –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –í–´–®–ï –ª—É—á—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                max_existing_price = max(relevant_prices)
                if new_price <= max_existing_price:
                    return False, f"SHORT: –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ {new_price} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –ª—É—á—à–µ–π {max_existing_price}"
            
            return True, "–¶–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return True, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º"
    
    def _send_max_orders_limit_notification(self, ticker: str, signal_data: Dict, open_orders_count: int) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        try:
            signal_type = signal_data.get('signal', 'N/A')
            entry_price = signal_data.get('entry_price', 0)
            
            message = f"""
‚ö†Ô∏è <b>–õ–ò–ú–ò–¢ –û–†–î–ï–†–û–í –î–û–°–¢–ò–ì–ù–£–¢</b> ‚ö†Ô∏è

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–°–∏–≥–Ω–∞–ª (–æ—Ç–∫–ª–æ–Ω–µ–Ω):</b> {signal_type}
üíµ <b>–¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {entry_price}

üìà <b>–û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:</b> {open_orders_count}/{MAX_CONCURRENT_ORDERS}
‚öôÔ∏è <b>MAX_CONCURRENT_ORDERS = {MAX_CONCURRENT_ORDERS}</b>

‚ùå <b>–ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä –ù–ï —Ä–∞–∑–º–µ—â–µ–Ω</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ: {e}")

    def _send_max_portfolio_limit_notification(self, ticker: str, signal_data: Dict, positions_count: int, orders_count: int, total_active: int) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        try:
            signal_type = signal_data.get('signal', 'N/A')
            entry_price = signal_data.get('entry_price', 0)
            
            message = f"""
üö´ <b>–õ–ò–ú–ò–¢ –ü–û–†–¢–§–ï–õ–Ø –î–û–°–¢–ò–ì–ù–£–¢</b> üö´

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–°–∏–≥–Ω–∞–ª (–æ—Ç–∫–ª–æ–Ω–µ–Ω):</b> {signal_type}
üíµ <b>–¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {entry_price}

üìà <b>–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {positions_count}
   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {orders_count}
   ‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ: {total_active}/{MAX_CONCURRENT_ORDERS}

‚öôÔ∏è <b>MAX_CONCURRENT_ORDERS = {MAX_CONCURRENT_ORDERS}</b>

‚ùå <b>–ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä –ù–ï —Ä–∞–∑–º–µ—â–µ–Ω</b>
üí° <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–ª–∏ –æ—Ä–¥–µ—Ä–æ–≤</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.warning(f"üö´ –ü–û–†–¢–§–ï–õ–¨-–õ–ò–ú–ò–¢: {ticker} –æ—Ç–∫–ª–æ–Ω–µ–Ω - {total_active}/{MAX_CONCURRENT_ORDERS} –∞–∫—Ç–∏–≤–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

    def _send_max_symbol_limit_notification(self, ticker: str, signal_data: Dict, positions_count: int, orders_count: int, total_active: int) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            signal_type = signal_data.get('signal', 'N/A')
            entry_price = signal_data.get('entry_price', 0)
            
            message = f"""
üö´ <b>–õ–ò–ú–ò–¢ –î–õ–Ø {ticker} –î–û–°–¢–ò–ì–ù–£–¢</b> üö´

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–°–∏–≥–Ω–∞–ª (–æ—Ç–∫–ª–æ–Ω–µ–Ω):</b> {signal_type}
üíµ <b>–¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {entry_price}

üìà <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {ticker}:</b>
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {positions_count}
   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {orders_count}
   ‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ: {total_active}/{MAX_CONCURRENT_ORDERS}

‚öôÔ∏è <b>MAX_CONCURRENT_ORDERS = {MAX_CONCURRENT_ORDERS}</b>

‚ùå <b>–ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä –ù–ï —Ä–∞–∑–º–µ—â–µ–Ω</b>
üí° <b>–î–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ {ticker}</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.warning(f"üö´ –°–ò–ú–í–û–õ-–õ–ò–ú–ò–¢: {ticker} –æ—Ç–∫–ª–æ–Ω–µ–Ω - {total_active}/{MAX_CONCURRENT_ORDERS} –∞–∫—Ç–∏–≤–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–µ —Å–∏–º–≤–æ–ª–∞: {e}")
            
    def _send_price_quality_notification(self, ticker: str, signal_data: Dict, price_reason: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–º –∫–∞—á–µ—Å—Ç–≤–µ —Ü–µ–Ω—ã"""
        try:
            signal_type = signal_data.get('signal', 'N/A')
            entry_price = signal_data.get('entry_price', 0)
            
            message = f"""
‚ö†Ô∏è <b>–¶–ï–ù–ê –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–†–ï–ë–û–í–ê–ù–ò–Æ</b> ‚ö†Ô∏è

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–°–∏–≥–Ω–∞–ª (–æ—Ç–∫–ª–æ–Ω–µ–Ω):</b> {signal_type}
üíµ <b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞:</b> {entry_price}

‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b> {price_reason}

üí° <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b> –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ü–µ–Ω—É "equal or better" —á–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.warning(f"‚ö†Ô∏è –¶–ï–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ê: {ticker} - {price_reason}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ü–µ–Ω—ã: {e}")
    
    def _send_synchronization_conflict_notification(self, ticker: str, signal_data: Dict, validation_reason: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            signal_type = signal_data.get('signal', 'N/A')
            entry_price = signal_data.get('entry_price', 0)
            timeframe = signal_data.get('timeframe', 'N/A')
            
            message = f"""
üîÑ <b>–ö–û–ù–§–õ–ò–ö–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò</b> üîÑ

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–°–∏–≥–Ω–∞–ª (–æ—Ç–∫–ª–æ–Ω–µ–Ω):</b> {signal_type}
üíµ <b>–¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞:</b> {entry_price}
‚åö <b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {timeframe}

‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:</b>
{validation_reason}

üêï <b>Orders Watchdog –æ–±–Ω–∞—Ä—É–∂–∏–ª –∫–æ–Ω—Ñ–ª–∏–∫—Ç</b>
‚ùå <b>–ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä –ù–ï —Ä–∞–∑–º–µ—â–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")


class OrderLifecycleManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –æ—Ä–¥–µ—Ä–æ–≤: LIMIT -> –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ -> STOP_MARKET + LIMIT
    """
    
    def __init__(self, order_executor_instance):
        self.executor = order_executor_instance
        self.pending_orders = {}  # {ticker: {'main_order_id': ..., 'signal_data': ..., 'created_at': ...}}
        self.timeout_minutes = 60  # –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.lock = threading.Lock()
        
        logger.info("üìã OrderLifecycleManager initialized")
    
    def place_main_limit_order(self, signal_data: Dict) -> Dict:
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        """
        ticker = signal_data['ticker']
        signal_type = signal_data['signal']
        entry_price = float(signal_data['entry_price'])
        stop_loss = float(signal_data['stop_loss'])
        take_profit = float(signal_data['take_profit'])
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            has_position, position_info = self.executor.check_open_position(ticker)
            
            if has_position:
                self.executor._send_position_exists_notification(ticker, position_info, signal_data)
                
                if not MULTIPLE_ORDERS:
                    self.executor._send_multiple_orders_denied_notification(ticker, signal_data, position_info)
                    return {
                        'success': False,
                        'error': f'–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –¥–ª—è {ticker}',
                        'signal_data': signal_data
                    }
                else:
                    self.executor._send_multiple_orders_allowed_notification(ticker, signal_data, position_info)
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ä–¥–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            self._cancel_pending_order(ticker)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞ (–±–∞–∑–æ–≤—ã–µ)
            self.executor.setup_symbol_settings(ticker)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            quantity, usdt_amount, error_msg = self.executor.calculate_position_size(
                ticker, entry_price, stop_loss
            )
            
            if quantity == 0:
                return {
                    'success': False,
                    'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é: {error_msg}',
                    'signal_data': signal_data
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–µ—á–∞
            notional_value = quantity * entry_price
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            logger.info(f"üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ –¥–ª—è {ticker} (–ø–æ–∑–∏—Ü–∏—è: ${notional_value:,.2f})")
            leverage_ok = self.executor.set_leverage(ticker, notional_value)
            
            if not leverage_ok:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {ticker}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            side = 'BUY' if signal_type == 'LONG' else 'SELL'
            position_side = 'LONG' if signal_type == 'LONG' else 'SHORT'
            entry_price_rounded = round_price_for_symbol(ticker, entry_price)
            
            logger.info(f"üéØ –†–∞–∑–º–µ—â–∞–µ–º LIMIT {side} –æ—Ä–¥–µ—Ä {ticker}: {quantity} –ø–æ —Ü–µ–Ω–µ {entry_price_rounded}")
            
            main_order = self.executor.binance_client.futures_create_order(
                symbol=ticker,
                side=side,
                type='LIMIT',
                quantity=quantity,
                price=str(entry_price_rounded),
                timeInForce='GTC',
                positionSide=position_side
            )
            
            logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {main_order['orderId']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            order_info = {
                'main_order_id': main_order['orderId'],
                'signal_data': signal_data,
                'quantity': quantity,
                'usdt_amount': usdt_amount,
                'created_at': datetime.now(),
                'entry_price_rounded': entry_price_rounded,
                'side': side,
                'position_side': position_side
            }
            
            with self.lock:
                self.pending_orders[ticker] = order_info
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
            self._send_main_order_placed_notification(order_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ Orders Watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self._add_to_watchdog_monitoring(order_info)
            
            return {
                'success': True,
                'main_order_id': main_order['orderId'],
                'order_data': main_order,
                'quantity': quantity,
                'usdt_amount': usdt_amount,
                'signal_data': signal_data,
                'stage': 'MAIN_ORDER_PLACED'
            }
            
        except BinanceAPIException as e:
            error_msg = f"Binance API –æ—à–∏–±–∫–∞: {e.message}"
            logger.error(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'signal_data': signal_data
            }
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
            logger.error(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'signal_data': signal_data
            }
    
    def on_main_order_filled(self, ticker: str, order_id: str, fill_data: Dict):
        """
        Callback –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ - —Ä–∞–∑–º–µ—â–∞–µ–º SL/TP
        """
        logger.info(f"üéâ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä {ticker} –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
        
        with self.lock:
            if ticker not in self.pending_orders:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ä–¥–µ—Ä–µ {ticker}")
                return
            
            order_info = self.pending_orders.pop(ticker)
        
        try:
            signal_data = order_info['signal_data']
            quantity = order_info['quantity']
            position_side = order_info['position_side']
            signal_type = signal_data['signal']
            
            stop_loss = float(signal_data['stop_loss'])
            take_profit = float(signal_data['take_profit'])
            
            # –†–∞–∑–º–µ—â–∞–µ–º Stop Loss (STOP_MARKET)
            sl_side = 'SELL' if signal_type == 'LONG' else 'BUY'
            sl_price = round_price_for_symbol(ticker, stop_loss)
            
            logger.info(f"üõ°Ô∏è –†–∞–∑–º–µ—â–∞–µ–º STOP_MARKET {sl_side} –¥–ª—è {ticker}: {quantity} at {sl_price}")
            
            stop_order = self.executor.binance_client.futures_create_order(
                symbol=ticker,
                side=sl_side,
                type='STOP_MARKET',  # –ò–°–ü–†–ê–í–õ–ï–ù–û: STOP_MARKET –≤–º–µ—Å—Ç–æ STOP
                quantity=quantity,
                stopPrice=str(sl_price),
                timeInForce='GTC',
                positionSide=position_side
            )
            
            logger.info(f"‚úÖ Stop Loss —Ä–∞–∑–º–µ—â–µ–Ω: {stop_order['orderId']}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º Take Profit (LIMIT)
            tp_side = 'SELL' if signal_type == 'LONG' else 'BUY'
            tp_price = round_price_for_symbol(ticker, take_profit)
            
            logger.info(f"üéØ –†–∞–∑–º–µ—â–∞–µ–º TAKE_PROFIT {tp_side} –¥–ª—è {ticker}: {quantity} at {tp_price}")
            
            tp_order = self.executor.binance_client.futures_create_order(
                symbol=ticker,
                side=tp_side,
                type='LIMIT',  # Take Profit –∫–∞–∫ LIMIT –æ—Ä–¥–µ—Ä
                quantity=quantity,
                price=str(tp_price),
                timeInForce='GTC',
                positionSide=position_side
            )
            
            logger.info(f"‚úÖ Take Profit —Ä–∞–∑–º–µ—â–µ–Ω: {tp_order['orderId']}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            complete_order_result = {
                'success': True,
                'main_order': {'orderId': order_id},
                'stop_order': stop_order,
                'tp_order': tp_order,
                'quantity': quantity,
                'usdt_amount': order_info['usdt_amount'],
                'signal_data': signal_data
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.executor._send_success_notification(complete_order_result)
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.executor._add_to_monitoring(complete_order_result)
            
            logger.info(f"üéâ –ü–æ–ª–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è {ticker} –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SL/TP –¥–ª—è {ticker}: {e}"
            logger.error(f"‚ùå {error_msg}")
            self.executor._send_error_notification(error_msg, order_info['signal_data'])
    
    def on_main_order_cancelled(self, ticker: str, order_id: str):
        """
        Callback –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        """
        logger.info(f"üö´ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä {ticker} –æ—Ç–º–µ–Ω–µ–Ω: {order_id}")
        
        with self.lock:
            if ticker in self.pending_orders:
                order_info = self.pending_orders.pop(ticker)
                self._send_main_order_cancelled_notification(ticker, order_info)
    
    def _cancel_pending_order(self, ticker: str):
        """
        –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ä–¥–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        """
        with self.lock:
            if ticker in self.pending_orders:
                old_order = self.pending_orders[ticker]
                old_order_id = old_order['main_order_id']
                
                try:
                    # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ä–¥–µ—Ä
                    cancel_result = self.executor.binance_client.futures_cancel_order(
                        symbol=ticker,
                        orderId=old_order_id
                    )
                    logger.info(f"üö´ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ä–¥–µ—Ä {ticker} –æ—Ç–º–µ–Ω–µ–Ω: {old_order_id}")
                    self._send_previous_order_cancelled_notification(ticker, old_order)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ä–¥–µ—Ä {ticker}: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                del self.pending_orders[ticker]
    
    def _add_to_watchdog_monitoring(self, order_info: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –≤ Orders Watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            if not WATCHDOG_AVAILABLE:
                logger.warning("‚ö†Ô∏è Orders Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
                self._start_order_monitoring_fallback(order_info)
                return
            
            signal_data = order_info['signal_data']
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è watchdog
            watchdog_data = {
                'symbol': signal_data['ticker'],
                'order_id': order_info['main_order_id'],
                'side': order_info['side'],
                'position_side': order_info['position_side'],
                'quantity': order_info['quantity'],
                'price': order_info['entry_price_rounded'],
                'signal_type': signal_data['signal'],
                'stop_loss': signal_data['stop_loss'],
                'take_profit': signal_data['take_profit']
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Orders Watchdog
            if watchdog_api and watchdog_api.add_order_for_monitoring(watchdog_data):
                logger.info(f"üêï –û—Ä–¥–µ—Ä {signal_data['ticker']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Orders Watchdog")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä {signal_data['ticker']} –≤ Orders Watchdog")
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
                self._start_order_monitoring_fallback(order_info)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Orders Watchdog: {e}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
            self._start_order_monitoring_fallback(order_info)
    
    def _start_order_monitoring_fallback(self, order_info: Dict):
        """Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –µ—Å–ª–∏ Orders Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        try:
            ticker = order_info['signal_data']['ticker']
            order_id = order_info['main_order_id']
            
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {ticker} –æ—Ä–¥–µ—Ä–∞ {order_id}")
            self._start_timeout_timer(ticker, order_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _start_order_monitoring(self, ticker: str, order_id: str):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ä–¥–µ—Ä–∞
        """
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ REST API –≤ order_monitor (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
            logger.info(f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {ticker} –æ—Ä–¥–µ—Ä–∞ {order_id}")
            logger.info(f"ÔøΩ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è REST API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (websocket_monitor.py)")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è timeout
            self._start_timeout_timer(ticker, order_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {ticker}: {e}")
    
    def _start_timeout_timer(self, ticker: str, order_id: str):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –ø–æ timeout
        """
        def timeout_handler():
            time.sleep(self.timeout_minutes * 60)  # 60 –º–∏–Ω—É—Ç
            
            with self.lock:
                if ticker in self.pending_orders:
                    order_info = self.pending_orders[ticker]
                    if order_info['main_order_id'] == order_id:
                        try:
                            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä –ø–æ timeout
                            cancel_result = self.executor.binance_client.futures_cancel_order(
                                symbol=ticker,
                                orderId=order_id
                            )
                            logger.info(f"‚è∞ –û—Ä–¥–µ—Ä {ticker} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ timeout: {order_id}")
                            self._send_timeout_cancellation_notification(ticker, order_info)
                            
                            del self.pending_orders[ticker]
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –ø–æ timeout {ticker}: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        timeout_thread = threading.Thread(target=timeout_handler, daemon=True)
        timeout_thread.start()
    
    def _send_main_order_placed_notification(self, order_info: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            signal_data = order_info['signal_data']
            ticker = signal_data['ticker']
            
            message = f"""
ÔøΩ <b>–û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù!</b> ÔøΩ

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal_data['signal']}
üí∞ <b>–û–±—ä–µ–º:</b> {order_info['quantity']}
üíµ <b>–°—É–º–º–∞:</b> {order_info['usdt_amount']:.2f} USDT
‚ö° <b>–ü–ª–µ—á–æ:</b> {FUTURES_LEVERAGE}x

üéØ <b>Orders:</b>
‚Ä¢ Limit: {order_info['entry_price_rounded']:.6f}
‚Ä¢ Stop: {signal_data['stop_loss']:.6f}
‚Ä¢ Target: {signal_data['take_profit']:.6f}

üìä <b>–°—Ö–æ–∂–¥–µ–Ω–∏–µ:</b> {signal_data.get('timeframes_str', 'N/A')}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal_data.get('confidence', 0):.1%}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏: {e}")
    
    def _send_main_order_cancelled_notification(self, ticker: str, order_info: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            message = f"""
üö´ <b>–û–†–î–ï–† –û–¢–ú–ï–ù–ï–ù</b> üö´

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üÜî <b>–û—Ä–¥–µ—Ä:</b> {order_info['main_order_id']}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
    
    def _send_previous_order_cancelled_notification(self, ticker: str, old_order_info: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            message = f"""
üîÑ <b>–ü–†–ï–î–´–î–£–©–ò–ô –û–†–î–ï–† –û–¢–ú–ï–ù–ï–ù</b> üîÑ

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üÜî <b>–°—Ç–∞—Ä—ã–π –æ—Ä–¥–µ—Ä:</b> {old_order_info['main_order_id']}

üîî <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞: {e}")
    
    def _send_timeout_cancellation_notification(self, ticker: str, order_info: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ timeout"""
        try:
            message = f"""
‚è∞ <b>–û–†–î–ï–† –û–¢–ú–ï–ù–ï–ù –ü–û TIMEOUT</b> ‚è∞

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üÜî <b>–û—Ä–¥–µ—Ä:</b> {order_info['main_order_id']}
‚è≥ <b>Timeout:</b> {self.timeout_minutes} –º–∏–Ω—É—Ç

üí° <b>–û—Ä–¥–µ—Ä –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ timeout: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä lifecycle manager  
order_lifecycle_manager = None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ticker_monitor
order_executor = OrderExecutor()


def execute_trading_signal(signal_data: Dict) -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ticker_monitor.py
    
    –ó–∞–º–µ–Ω—è–µ—Ç process_trading_signal –∏–∑ order_generator.py
    
    Args:
        signal_data: –î–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω
    """
    return order_executor.execute_signal(signal_data)


# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
process_trading_signal = execute_trading_signal


if __name__ == "__main__":
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ä–¥–µ—Ä–æ–≤"""
    import logging
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    test_signal = {
        'ticker': 'BTCUSDT',
        'signal': 'LONG',
        'entry_price': 45000.0,
        'stop_loss': 44000.0,
        'take_profit': 47000.0,
        'confidence': 0.85,
        'timeframes_str': '1H, 4H'
    }
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º OrderExecutor...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞)
    executor = OrderExecutor()
    if executor.binance_client:
        quantity, usdt_amount, error = executor.calculate_position_size(
            test_signal['ticker'],
            test_signal['entry_price'], 
            test_signal['stop_loss']
        )
        
        if error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {error}")
        else:
            logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: {quantity} ({usdt_amount:.2f} USDT)")
    else:
        logger.error("‚ùå Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
