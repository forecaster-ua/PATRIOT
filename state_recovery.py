#!/usr/bin/env python3
"""
State Recovery Manager - –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
========================================================

–ú–æ–¥—É–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Orders Watchdog
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ –±–∏—Ä–∂–µ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤

Author: HEDGER
Version: 1.0 - State Recovery System
"""

import json
import time
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set, Tuple
from dataclasses import dataclass, asdict
from utils import logger
from config import BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET

# Binance imports
try:
    from binance.client import Client
    from binance.exceptions import BinanceAPIException
    BINANCE_AVAILABLE = True
except ImportError:
    logger.error("‚ùå python-binance not installed")
    BINANCE_AVAILABLE = False
    Client = None
    BinanceAPIException = Exception


@dataclass
class ActivePosition:
    """–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    symbol: str
    side: str  # LONG/SHORT
    size: float
    entry_price: float
    unrealized_pnl: float
    margin_type: str
    isolated_wallet: float
    has_sl: bool = False
    has_tp: bool = False
    sl_order_id: Optional[str] = None
    tp_order_id: Optional[str] = None
    main_order_id: Optional[str] = None
    created_at: Optional[datetime] = None
    last_updated: Optional[datetime] = None


@dataclass
class SystemState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    timestamp: datetime
    active_positions: Dict[str, ActivePosition]
    watchdog_orders: Dict[str, Dict[str, Any]]
    exchange_positions: Dict[str, Dict[str, Any]]
    exchange_orders: Dict[str, List[Dict[str, Any]]]
    synchronization_issues: List[str]
    recovery_actions: List[str]
    is_synchronized: bool = True


class StateRecoveryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.client: Optional[Client] = None
        self.state_file = Path('system_state.json')
        self.watchdog_state_file = Path('orders_watchdog_state.json')
        self.blocked_symbols: Set[str] = set()
        
        self._init_binance_client()
    
    def _init_binance_client(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        if not BINANCE_AVAILABLE or Client is None:
            logger.error("‚ùå Binance library not available")
            return
            
        if not BINANCE_API_KEY or not BINANCE_API_SECRET:
            logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        try:
            logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance ({'TESTNET' if BINANCE_TESTNET else 'MAINNET'})...")
            self.client = Client(
                api_key=BINANCE_API_KEY,
                api_secret=BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.client.futures_account()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            self.client = None
    
    def recover_system_state(self) -> SystemState:
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            SystemState —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        """
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        system_state = SystemState(
            timestamp=datetime.now(),
            active_positions={},
            watchdog_orders={},
            exchange_positions={},
            exchange_orders={},
            synchronization_issues=[],
            recovery_actions=[]
        )
        
        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Orders Watchdog
            logger.info("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Orders Watchdog...")
            system_state.watchdog_orders = self._load_watchdog_state()
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(system_state.watchdog_orders)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            if self.client:
                logger.info("üåê –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏...")
                system_state.exchange_positions = self._get_exchange_positions()
                system_state.exchange_orders = self._get_exchange_orders()
                logger.info(f"‚úÖ –° –±–∏—Ä–∂–∏: {len(system_state.exchange_positions)} –ø–æ–∑–∏—Ü–∏–π, {len(system_state.exchange_orders)} —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ—Ä–¥–µ—Ä–∞–º–∏")
            else:
                system_state.synchronization_issues.append("‚ùå Binance API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∏—Å–∫ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π...")
            system_state.active_positions = self._analyze_and_merge_positions(system_state)
            
            # 4. –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            self._validate_state_integrity(system_state)
            
            # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self._apply_auto_corrections(system_state)
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._save_system_state(system_state)
            
            logger.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return system_state
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            system_state.synchronization_issues.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            system_state.is_synchronized = False
            return system_state
    
    def _load_watchdog_state(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Orders Watchdog"""
        watchdog_orders = {}
        
        try:
            if self.watchdog_state_file.exists():
                with open(self.watchdog_state_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                for order_data in data.get('watched_orders', []):
                    order_id = order_data.get('order_id')
                    if order_id:
                        watchdog_orders[order_id] = order_data
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è watchdog: {e}")
        
        return watchdog_orders
    
    def _get_exchange_positions(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏"""
        positions = {}
        
        if not self.client:
            return positions
        
        try:
            positions_data = self.client.futures_position_information()
            
            for pos in positions_data:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:  # –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    symbol = pos['symbol']
                    positions[symbol] = {
                        'symbol': symbol,
                        'side': 'LONG' if position_amt > 0 else 'SHORT',
                        'size': abs(position_amt),
                        'entry_price': float(pos.get('entryPrice', 0)),
                        'unrealized_pnl': float(pos.get('unrealizedPnl', 0)),
                        'margin_type': pos.get('marginType', 'crossed').upper(),
                        'isolated_wallet': float(pos.get('isolatedWallet', 0)),
                        'percentage': float(pos.get('percentage', 0))
                    }
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏: {e}")
        
        return positions
    
    def _get_exchange_orders(self) -> Dict[str, List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏"""
        orders_by_symbol = {}
        
        if not self.client:
            return orders_by_symbol
        
        try:
            orders_data = self.client.futures_get_open_orders()
            
            for order in orders_data:
                symbol = order['symbol']
                if symbol not in orders_by_symbol:
                    orders_by_symbol[symbol] = []
                
                orders_by_symbol[symbol].append({
                    'order_id': str(order['orderId']),
                    'symbol': symbol,
                    'type': order['type'],
                    'side': order['side'],
                    'amount': float(order['origQty']),
                    'price': float(order['price']) if order.get('price') else None,
                    'stop_price': float(order['stopPrice']) if order.get('stopPrice') else None,
                    'status': order['status'],
                    'time': order['time'],
                    'update_time': order['updateTime']
                })
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏: {e}")
        
        return orders_by_symbol
    
    def _analyze_and_merge_positions(self, system_state: SystemState) -> Dict[str, ActivePosition]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        active_positions = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏ (–æ–Ω–∏ —Å–∞–º—ã–µ —Ç–æ—á–Ω—ã–µ)
        for symbol, exchange_pos in system_state.exchange_positions.items():
            position = ActivePosition(
                symbol=symbol,
                side=exchange_pos['side'],
                size=exchange_pos['size'],
                entry_price=exchange_pos['entry_price'],
                unrealized_pnl=exchange_pos['unrealized_pnl'],
                margin_type=exchange_pos['margin_type'],
                isolated_wallet=exchange_pos['isolated_wallet'],
                last_updated=datetime.now()
            )
            
            # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤ watchdog
            symbol_orders = [order for order in system_state.watchdog_orders.values() 
                           if order.get('symbol') == symbol]
            
            for order in symbol_orders:
                if order.get('sl_order_id'):
                    position.has_sl = True
                    position.sl_order_id = order.get('sl_order_id')
                if order.get('tp_order_id'):
                    position.has_tp = True
                    position.tp_order_id = order.get('tp_order_id')
                if not position.main_order_id:
                    position.main_order_id = order.get('order_id')
                    if order.get('created_at'):
                        try:
                            position.created_at = datetime.fromisoformat(order['created_at'])
                        except:
                            pass
            
            active_positions[symbol] = position
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º orphaned –æ—Ä–¥–µ—Ä–∞ –≤ watchdog (–µ—Å—Ç—å –≤ watchdog, –Ω–æ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)
        watchdog_symbols = set(order.get('symbol') for order in system_state.watchdog_orders.values())
        exchange_symbols = set(system_state.exchange_positions.keys())
        orphaned_symbols = watchdog_symbols - exchange_symbols
        
        if orphaned_symbols:
            system_state.synchronization_issues.append(
                f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π: {', '.join(orphaned_symbols)}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º untracked –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, –Ω–æ –Ω–µ—Ç –≤ watchdog)
        untracked_symbols = exchange_symbols - watchdog_symbols
        if untracked_symbols:
            system_state.synchronization_issues.append(
                f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {', '.join(untracked_symbols)}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ SL/TP
            for symbol in untracked_symbols:
                if symbol in system_state.exchange_positions:
                    pos_data = system_state.exchange_positions[symbol]
                    if symbol not in active_positions:  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                        active_positions[symbol] = ActivePosition(
                            symbol=symbol,
                            side=pos_data['side'],
                            size=pos_data['size'],
                            entry_price=pos_data['entry_price'],
                            unrealized_pnl=pos_data['unrealized_pnl'],
                            margin_type=pos_data['margin_type'],
                            isolated_wallet=pos_data['isolated_wallet'],
                            has_sl=False,
                            has_tp=False,
                            last_updated=datetime.now()
                        )
        
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        if system_state.synchronization_issues:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(system_state.synchronization_issues)} –ø—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        return active_positions
    
    def _validate_state_integrity(self, system_state: SystemState) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        for symbol, position in system_state.active_positions.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SL/TP –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
            if position.has_sl and position.sl_order_id:
                if not self._order_exists_on_exchange(symbol, position.sl_order_id, system_state.exchange_orders):
                    system_state.synchronization_issues.append(
                        f"‚ö†Ô∏è {symbol}: SL –æ—Ä–¥–µ—Ä {position.sl_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ"
                    )
                    position.has_sl = False
                    position.sl_order_id = None
            
            if position.has_tp and position.tp_order_id:
                if not self._order_exists_on_exchange(symbol, position.tp_order_id, system_state.exchange_orders):
                    system_state.synchronization_issues.append(
                        f"‚ö†Ô∏è {symbol}: TP –æ—Ä–¥–µ—Ä {position.tp_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ"
                    )
                    position.has_tp = False
                    position.tp_order_id = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ SL/TP –∑–∞—â–∏—â–µ–Ω–∞
            if not position.has_sl and not position.has_tp:
                system_state.synchronization_issues.append(
                    f"‚ö†Ô∏è {symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞—â–∏—â–µ–Ω–∞ SL/TP –æ—Ä–¥–µ—Ä–∞–º–∏"
                )
    
    def _order_exists_on_exchange(self, symbol: str, order_id: str, exchange_orders: Dict[str, List[Dict]]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ"""
        symbol_orders = exchange_orders.get(symbol, [])
        return any(order['order_id'] == order_id for order in symbol_orders)
    
    def _apply_auto_corrections(self, system_state: SystemState) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö SL/TP –æ—Ä–¥–µ—Ä–æ–≤
        pass
    
    def _save_system_state(self, system_state: SystemState) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–∞–π–ª"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            state_dict = {
                'timestamp': system_state.timestamp.isoformat(),
                'active_positions': {
                    symbol: asdict(position) for symbol, position in system_state.active_positions.items()
                },
                'synchronization_issues': system_state.synchronization_issues,
                'recovery_actions': system_state.recovery_actions,
                'is_synchronized': system_state.is_synchronized,
                'total_positions': len(system_state.active_positions),
                'watchdog_orders_count': len(system_state.watchdog_orders),
                'exchange_positions_count': len(system_state.exchange_positions)
            }
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã
            for symbol, pos_data in state_dict['active_positions'].items():
                if pos_data.get('created_at'):
                    pos_data['created_at'] = pos_data['created_at'].isoformat() if isinstance(pos_data['created_at'], datetime) else pos_data['created_at']
                if pos_data.get('last_updated'):
                    pos_data['last_updated'] = pos_data['last_updated'].isoformat() if isinstance(pos_data['last_updated'], datetime) else pos_data['last_updated']
            
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(state_dict, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {self.state_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_system_state(self) -> Optional[SystemState]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        if not self.state_file.exists():
            return None
        
        try:
            with open(self.state_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            active_positions = {}
            for symbol, pos_data in data.get('active_positions', {}).items():
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã
                if pos_data.get('created_at'):
                    try:
                        pos_data['created_at'] = datetime.fromisoformat(pos_data['created_at'])
                    except:
                        pos_data['created_at'] = None
                
                if pos_data.get('last_updated'):
                    try:
                        pos_data['last_updated'] = datetime.fromisoformat(pos_data['last_updated'])
                    except:
                        pos_data['last_updated'] = None
                
                active_positions[symbol] = ActivePosition(**pos_data)
            
            system_state = SystemState(
                timestamp=datetime.fromisoformat(data['timestamp']),
                active_positions=active_positions,
                watchdog_orders={},
                exchange_positions={},
                exchange_orders={},
                synchronization_issues=data.get('synchronization_issues', []),
                recovery_actions=data.get('recovery_actions', []),
                is_synchronized=data.get('is_synchronized', True)
            )
            
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {len(active_positions)} –ø–æ–∑–∏—Ü–∏–π")
            return system_state
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return None
    
    def _get_watchdog_symbols(self) -> Set[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º Orders Watchdog"""
        try:
            if not self.watchdog_state_file.exists():
                return set()
            
            with open(self.watchdog_state_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                watched_orders = data.get('watched_orders', [])
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                symbols = set()
                for order in watched_orders:
                    if isinstance(order, dict) and 'symbol' in order:
                        symbols.add(order['symbol'])
                
                return symbols
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Watchdog: {e}")
            return set()
    
    def is_symbol_blocked_for_new_orders(self, symbol: str) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–∏–º–≤–æ–ª –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        
        Returns:
            Tuple[is_blocked: bool, reason: str]
        """
        # 1. –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: Orders Watchdog
        watchdog_symbols = self._get_watchdog_symbols()
        if symbol in watchdog_symbols:
            return True, f"–°–∏–º–≤–æ–ª –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º Orders Watchdog (–æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)"
        
        # 2. –ü–†–û–í–ï–†–ö–ê: –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        if self.client:
            try:
                open_orders = self.client.futures_get_open_orders(symbol=symbol)
                if open_orders:
                    order_types = [order['type'] for order in open_orders]
                    return True, f"–ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ: {', '.join(set(order_types))}"
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = self.load_system_state()
        if not current_state:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –¥–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            current_state = self.recover_system_state()
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if symbol in current_state.active_positions:
            position = current_state.active_positions[symbol]
            return True, f"–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è {position.side} {position.size} (PnL: {position.unrealized_pnl:+.2f})"
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if symbol in self.blocked_symbols:
            return True, "–°–∏–º–≤–æ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        
        return False, "–°–∏–º–≤–æ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
    
    def print_recovery_report(self, system_state: SystemState) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        print("=" * 80)
        print("üîÑ –û–¢–ß–ï–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
        print("=" * 80)
        
        print(f"üïê –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {system_state.timestamp.strftime('%H:%M:%S')}")
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {'‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ê' if system_state.is_synchronized else '‚ùå –†–ê–°–°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ê'}")
        print(f"üìç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(system_state.active_positions)}")
        print(f"üîç –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(system_state.synchronization_issues)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if system_state.active_positions:
            print(f"\nüìä –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò ({len(system_state.active_positions)}):")
            print("-" * 60)
            
            for symbol, position in system_state.active_positions.items():
                sl_status = "‚úÖ SL" if position.has_sl else "‚ùå NO SL"
                tp_status = "‚úÖ TP" if position.has_tp else "‚ùå NO TP"
                pnl_str = f"{position.unrealized_pnl:+.2f}" if position.unrealized_pnl != 0 else "0.00"
                
                print(f"‚Ä¢ {symbol}: {position.side} {position.size} @ {position.entry_price} "
                      f"(PnL: {pnl_str}) | {sl_status} | {tp_status}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if system_state.synchronization_issues:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ({len(system_state.synchronization_issues)}):")
            print("-" * 60)
            for issue in system_state.synchronization_issues:
                print(f"  {issue}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if system_state.recovery_actions:
            print(f"\nüîß –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ({len(system_state.recovery_actions)}):")
            print("-" * 60)
            for action in system_state.recovery_actions:
                print(f"  {action}")
        
        print("=" * 80)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
state_recovery = StateRecoveryManager()


def recover_system_state() -> SystemState:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    return state_recovery.recover_system_state()


def is_symbol_available_for_trading(symbol: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    is_blocked, reason = state_recovery.is_symbol_blocked_for_new_orders(symbol)
    return not is_blocked, reason


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ State Recovery Manager...")
    
    manager = StateRecoveryManager()
    system_state = manager.recover_system_state()
    manager.print_recovery_report(system_state)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–º–≤–æ–ª–æ–≤
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
    print(f"\nüß™ –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ò–ú–í–û–õ–û–í:")
    print("-" * 40)
    for symbol in test_symbols:
        is_available, reason = is_symbol_available_for_trading(symbol)
        status = "‚úÖ –î–û–°–¢–£–ü–ï–ù" if is_available else "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù"
        print(f"‚Ä¢ {symbol}: {status} - {reason}")
