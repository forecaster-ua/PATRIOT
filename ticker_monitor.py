"""
Ticker Monitor - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (Production Ready)
================================================================

–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞ PATRIOT:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏: signal_analyzer, order_generator
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã –∏–∑ COIN_SYMBOLS –≤ tickers.txt
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å utils.logger –∏ config
- Graceful shutdown –∏ —Å–∏—Å—Ç–µ–º–∞ recovery

Author: HEDGER
Version: 4.0 - Production Ready
"""

import time
import schedule
import signal
import sys
import threading
import traceback
from datetime import datetime
from queue import Queue, Empty
from pathlib import Path
from typing import List, Optional, Dict, Any, Set
import gc
from config import (
    TIMEFRAMES, TICKER_DELAY, MAX_WORKERS, PROCESSING_TIMEOUT,
    SCHEDULE_INTERVAL_MINUTES, SCHEDULE_AT_SECOND, 
    DEFAULT_TICKERS_FILE, BATCH_LOG_FREQUENCY
)

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
import logging

# –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å logger –∏–∑ utils
try:
    from signal_analyzer import SignalAnalyzer
    from order_executor import execute_trading_signal
    from utils import logger
    from config import TIMEFRAMES
    logger.info("‚úÖ Successfully imported project modules")
except ImportError as e:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π logger
    logger = logging.getLogger(__name__)
    if not logger.handlers:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s [%(levelname)s] %(message)s'
        )
    
    logger.error(f"‚ùå Import error: {e}")
    logger.warning("‚ö†Ô∏è Running in standalone mode with mock implementations")
    
    # Mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    import random
    
    class MockSignalAnalyzer:
        def __init__(self, ticker: str):
            self.ticker = ticker
            
        def analyze_ticker(self, stop_event) -> Optional[Dict]:
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –Ω–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª
            if random.random() < 0.3:
                return {
                    'ticker': self.ticker,
                    'signal': random.choice(['LONG', 'SHORT']),
                    'timeframes': ['1H', '4H'],
                    'entry_price': random.uniform(0.1, 1000),
                    'confidence': random.uniform(0.7, 1.0)
                }
            return None
    
    def process_trading_signal(signal_data: Dict) -> bool:
        logger.info(f"üì± MOCK: Processing signal for {signal_data['ticker']}")
        return True
    
    execute_trading_signal = process_trading_signal
    SignalAnalyzer = MockSignalAnalyzer
    TIMEFRAMES = ['1H', '4H', '1D']


class TickerLoader:
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ tickers.txt
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç COIN_SYMBOLS = [...]
    """
    
    def __init__(self, file_path: str = 'tickers.txt'):
        self.file_path = Path(file_path)
        
    def load_tickers(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not self.file_path.exists():
                logger.error(f"‚ùå Ticker file not found: {self.file_path}")
                return self._get_fallback_tickers()
            
            content = self.file_path.read_text(encoding='utf-8').strip()
            if not content:
                logger.warning("‚ö†Ô∏è Ticker file is empty")
                return self._get_fallback_tickers()
            
            logger.debug(f"üìÑ File content preview: {content[:200]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞
            return self._extract_coin_symbols(content)
            
        except Exception as e:
            logger.error(f"‚ùå Error loading tickers: {e}")
            return self._get_fallback_tickers()
    
    def _extract_coin_symbols(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç COIN_SYMBOLS –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            local_vars = {}
            exec(content, {"__builtins__": {}}, local_vars)
            
            if 'COIN_SYMBOLS' in local_vars:
                tickers = local_vars['COIN_SYMBOLS']
                logger.info(f"üìã Loaded {len(tickers)} tickers from COIN_SYMBOLS")
                return self._validate_tickers(tickers)
            else:
                logger.warning("‚ö†Ô∏è COIN_SYMBOLS not found, trying regex extraction")
                return self._extract_with_regex(content)
                
        except Exception as e:
            logger.error(f"‚ùå Failed to execute file content: {e}")
            return self._extract_with_regex(content)
    
    def _extract_with_regex(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        import re
        import ast
        
        try:
            # –ò—â–µ–º COIN_SYMBOLS = [...]
            pattern = r'COIN_SYMBOLS\s*=\s*\[(.*?)\]'
            match = re.search(pattern, content, re.DOTALL)
            
            if match:
                list_content = '[' + match.group(1) + ']'
                tickers = ast.literal_eval(list_content)
                logger.info(f"üìã Extracted {len(tickers)} tickers via regex")
                return self._validate_tickers(tickers)
            else:
                logger.error("‚ùå Could not find COIN_SYMBOLS pattern")
                return self._get_fallback_tickers()
                
        except Exception as e:
            logger.error(f"‚ùå Regex extraction failed: {e}")
            return self._get_fallback_tickers()
    
    def _validate_tickers(self, tickers: List) -> List[str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤"""
        valid_tickers = []
        
        for ticker in tickers:
            if isinstance(ticker, str) and ticker.strip():
                clean_ticker = ticker.strip().upper()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                if len(clean_ticker) >= 6 and clean_ticker.endswith('USDT'):
                    valid_tickers.append(clean_ticker)
                    logger.debug(f"‚úÖ Valid ticker: {clean_ticker}")
                else:
                    logger.debug(f"‚ö†Ô∏è Skipping ticker: {ticker}")
            else:
                logger.warning(f"‚ö†Ô∏è Invalid ticker format: {ticker}")
        
        if not valid_tickers:
            logger.error("‚ùå No valid tickers found")
            return self._get_fallback_tickers()
        
        logger.info(f"üìä Validated {len(valid_tickers)} tickers")
        return valid_tickers
    
    def _get_fallback_tickers(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        fallback = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
        logger.info(f"üîÑ Using fallback tickers: {fallback}")
        return fallback


class WorkerStats:
    """Thread-safe —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self._lock = threading.Lock()
        self.processed = 0
        self.signals_found = 0
        self.orders_created = 0
        self.errors = 0
        self.start_time: Optional[datetime] = None
        self.reset()
    
    def reset(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            self.processed = 0
            self.signals_found = 0
            self.orders_created = 0
            self.errors = 0
            self.start_time = None
    
    def update(self, processed: int = 0, signals: int = 0, orders: int = 0, errors: int = 0):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            self.processed += processed
            self.signals_found += signals
            self.orders_created += orders
            self.errors += errors
    
    def get_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            duration = 0
            if self.start_time:
                duration = (datetime.now() - self.start_time).total_seconds()
            
            success_rate = (self.signals_found / self.processed * 100) if self.processed > 0 else 0
            conversion_rate = (self.orders_created / self.signals_found * 100) if self.signals_found > 0 else 0
            
            return {
                'processed': self.processed,
                'signals_found': self.signals_found,
                'orders_created': self.orders_created,
                'errors': self.errors,
                'duration_seconds': round(duration, 1),
                'success_rate': round(success_rate, 1),
                'conversion_rate': round(conversion_rate, 1)
            }


class TickerMonitor:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
    """
    
    def __init__(self, tickers_file: str = DEFAULT_TICKERS_FILE, max_workers: int = MAX_WORKERS, ticker_delay: float = TICKER_DELAY):
        self.tickers_file = tickers_file
        self.max_workers = max_workers
        self.ticker_delay = ticker_delay  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–∏–∫–µ—Ä–∞–º–∏
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –æ—á–µ—Ä–µ–¥—è–º–∏
        self.ticker_queue: Queue[Optional[str]] = Queue()
        self.stop_event = threading.Event()
        self.worker_threads: List[threading.Thread] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.stats = WorkerStats()
        self.current_batch_start: Optional[datetime] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.ticker_loader = TickerLoader(tickers_file)
        self.tickers = self.ticker_loader.load_tickers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
        logger.info(f"üéº TickerMonitor initialized: {len(self.tickers)} tickers, {self.max_workers} workers, {self.ticker_delay}s delay")
    
    def _setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown"""
        def signal_handler(signum: int, frame: Any) -> None:
            signal_name = "SIGINT" if signum == signal.SIGINT else "SIGTERM"
            logger.info(f"üõë Received {signal_name} - initiating graceful shutdown...")
            self.shutdown()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def shutdown(self) -> None:
        """Graceful shutdown –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("ÔøΩ Starting graceful shutdown...")
        self.stop_event.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö worker'–æ–≤
        active_workers = [t for t in self.worker_threads if t.is_alive()]
        if active_workers:
            logger.info(f"‚è≥ Waiting for {len(active_workers)} workers to complete...")
            for thread in active_workers:
                thread.join(timeout=10)
                if thread.is_alive():
                    logger.warning(f"‚ö†Ô∏è Thread {thread.name} did not terminate gracefully")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        while not self.ticker_queue.empty():
            try:
                self.ticker_queue.get_nowait()
            except Empty:
                break
        
        logger.info("‚úÖ Graceful shutdown completed")
        sys.exit(0)
    
    def _fill_queue(self) -> None:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.stop_event.is_set():
            return
        
        for ticker in self.tickers:
            if self.stop_event.is_set():
                break
            self.ticker_queue.put(ticker)
        
        # –£–±—Ä–∞–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∏–¥–Ω–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –ª–æ–≥–æ–≤
    
    def _worker(self) -> None:
        """
        –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SignalAnalyzer –∏ OrderGenerator —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        """
        worker_id = threading.current_thread().name
        processed_count = 0
        
        while not self.stop_event.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                ticker = self.ticker_queue.get(timeout=1)
                
                if ticker is None or self.stop_event.is_set():
                    break
                
                processed_count += 1
                remaining = self.ticker_queue.qsize()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 20 —Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                if processed_count % 20 == 0 or remaining <= 10:
                    logger.info(f"üîç [{worker_id}] Progress: {processed_count} processed, {remaining} remaining")
                
                try:
                    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ SignalAnalyzer
                    analyzer = SignalAnalyzer(ticker)
                    signal_data = analyzer.analyze_ticker(self.stop_event)
                    
                    self.stats.update(processed=1)
                    
                    # 2. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å—Ö–æ–∂–¥–µ–Ω–∏–µ - –ø–µ—Ä–µ–¥–∞–µ–º –≤ OrderGenerator
                    if signal_data:
                        logger.info(f"üéØ SIGNAL FOUND: {ticker} - {signal_data.get('signal', 'UNKNOWN')}")
                        self.stats.update(signals=1)
                        
                        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ OrderExecutor –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                        if execute_trading_signal(signal_data):
                            self.stats.update(orders=1)
                            logger.info(f"‚úÖ ORDER CREATED: {ticker}")
                        else:
                            logger.error(f"‚ùå ORDER FAILED: {ticker}")
                            self.stats.update(errors=1)
                
                except Exception as e:
                    logger.error(f"‚ùå Error processing {ticker}: {e}")
                    self.stats.update(errors=1)
                
                finally:
                    self.ticker_queue.task_done()
                    
                    # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∏–∫–µ—Ä–æ–≤
                    if not self.stop_event.is_set():
                        time.sleep(self.ticker_delay)
            
            except Empty:
                # –¢–∞–π–º–∞—É—Ç –æ—á–µ—Ä–µ–¥–∏ - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
                continue
            except Exception as e:
                logger.error(f"‚ùå Worker {worker_id} critical error: {e}")
                self.stats.update(errors=1)
                continue
        
        logger.info(f"üèÅ Worker {worker_id} completed: {processed_count} tickers processed")
    
    def _start_workers(self, num_workers: int = 1) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏"""
        self.worker_threads = []
        actual_workers = min(num_workers, self.max_workers, len(self.tickers))
        
        for i in range(actual_workers):
            worker = threading.Thread(
                target=self._worker,
                name=f"Worker-{i+1}",
                daemon=True
            )
            worker.start()
            self.worker_threads.append(worker)
        
        logger.info(f"üöÄ Started {actual_workers} worker thread(s)")
    
    def _wait_for_completion(self) -> None:
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        logger.info("‚è≥ Waiting for processing to complete...")
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        max_wait_time = PROCESSING_TIMEOUT  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        start_wait = time.time()
        last_log_time = 0
        
        while not self.ticker_queue.empty() and not self.stop_event.is_set():
            remaining = self.ticker_queue.qsize()
            elapsed = time.time() - start_wait
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–∏–∫–µ—Ä–æ–≤
            if elapsed - last_log_time > 30 or remaining <= 5:
                logger.info(f"üìä Progress: {remaining} tickers remaining (elapsed: {elapsed:.1f}s)")
                last_log_time = elapsed
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if elapsed > max_wait_time:
                logger.warning(f"‚ö†Ô∏è Processing timeout after {max_wait_time}s, forcing shutdown...")
                self.stop_event.set()
                break
                
            time.sleep(2)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        active_threads = [t for t in self.worker_threads if t.is_alive()]
        if active_threads:
            logger.info(f"üîÑ Shutting down {len(active_threads)} worker threads...")
            for worker in active_threads:
                worker.join(timeout=15)
                if worker.is_alive():
                    logger.warning(f"‚ö†Ô∏è Thread {worker.name} still alive after timeout")
        
        # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏
        cleared_count = 0
        while not self.ticker_queue.empty():
            try:
                self.ticker_queue.get_nowait()
                cleared_count += 1
            except Empty:
                break
        
        if cleared_count > 0:
            logger.warning(f"‚ö†Ô∏è Cleared {cleared_count} unprocessed items from queue")
        
        logger.info("‚úÖ All workers completed")
    
    def _log_batch_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        summary = self.stats.get_summary()
        
        logger.info("=" * 60)
        logger.info("BATCH PROCESSING SUMMARY")
        logger.info("=" * 60)
        logger.info(f"Duration: {summary['duration_seconds']}s")
        logger.info(f"Tickers processed: {summary['processed']}/{len(self.tickers)}")
        logger.info(f"Signals found: {summary['signals_found']} ({summary['success_rate']}%)")
        logger.info(f"Orders/Alerts created: {summary['orders_created']} ({summary['conversion_rate']}%)")
        logger.info(f"Errors: {summary['errors']}")
        logger.info(f"Completed at: {datetime.now().strftime('%H:%M:%S')}")
        logger.info(f"Active threads: {threading.active_count()}")
        logger.info("=" * 60)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        gc.collect()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            self.stats.reset()
        except Exception as e:
            logger.debug(f"Warning during cleanup: {e}")
    
    def process_tickers(self) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞–Ω–∞–ª–∏–∑ -> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        if self.stop_event.is_set():
            logger.info("üõë Processing skipped - shutdown in progress")
            return
        
        if not self.tickers:
            logger.warning("‚ö†Ô∏è No tickers to process")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞—Ç—á–∞
        self.current_batch_start = datetime.now()
        self.stats.reset()
        self.stats.start_time = self.current_batch_start
        
        logger.info("üöÄ STARTING TICKER PROCESSING BATCH")
        logger.info(f"üìÖ {self.current_batch_start.strftime('%H:%M:%S')} | {len(self.tickers)} tickers | {', '.join(TIMEFRAMES)} timeframes")
        
        try:
            # 1. –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ä–∞–º–∏
            self._fill_queue()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º worker –ø–æ—Ç–æ–∫–∏
            self._start_workers(num_workers=self.max_workers)
            
            # 3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._wait_for_completion()
            
        except Exception as e:
            logger.error(f"‚ùå Critical error during ticker processing: {e}")
        finally:
            # 4. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._log_batch_summary()
    
    def run(self) -> None:
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        –í–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
        """
        logger.info("üéº Ticker Monitor Orchestra started!")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            logger.info("üé¨ Running initial processing...")
            self.process_tickers()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            schedule.every().hour.at("00:00").do(self.process_tickers)
            schedule.every().hour.at("15:00").do(self.process_tickers) 
            schedule.every().hour.at("30:00").do(self.process_tickers)
            schedule.every().hour.at("45:00").do(self.process_tickers)

            logger.info("‚è∞ Scheduled processing at 00, 15, 30, 45 minutes of each hour")
            logger.info("üéµ Waiting for next scheduled processing... Press Ctrl+C to stop")
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            while not self.stop_event.is_set():
                try:
                    schedule.run_pending()
                    time.sleep(1)
                except KeyboardInterrupt:
                    logger.info("‚å®Ô∏è Keyboard interrupt received")
                    break
                except Exception as e:
                    logger.error(f"‚ùå Scheduler error: {e}")
                    time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
        
        except Exception as e:
            logger.error(f"üí• Fatal error in orchestrator: {e}")
            logger.debug(f"Stack trace: {traceback.format_exc()}")
        finally:
            self.shutdown()
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return {
            'tickers_loaded': len(self.tickers),
            'queue_size': self.ticker_queue.qsize(),
            'active_workers': len([t for t in self.worker_threads if t.is_alive()]),
            'is_running': not self.stop_event.is_set(),
            'last_batch_start': self.current_batch_start.isoformat() if self.current_batch_start else None,
            'stats': self.stats.get_summary()
        }


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    try:
        logger.info("üöÄ Starting PATRIOT Ticker Monitor...")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        monitor = TickerMonitor(
            max_workers=MAX_WORKERS,
            ticker_delay=TICKER_DELAY
        )
        monitor.run()
        
    except KeyboardInterrupt:
        logger.info("üëã Graceful shutdown requested by user")
    except Exception as e:
        logger.error(f"üí• Application failed to start: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()