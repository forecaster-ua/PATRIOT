"""
Ticker Monitor - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (Production Ready)
================================================================

–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞ PATRIOT:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏: signal_analyzer, order_generator
- –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã –∏–∑ COIN_SYMBOLS –≤ tickers.txt
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å utils.logger –∏ config
- Graceful shutdown –∏ —Å–∏—Å—Ç–µ–º–∞ recovery

Author: HEDGER
Version: 4.0 - Production Ready
"""

import time
import schedule
import signal
import sys
import threading
import traceback
from datetime import datetime, timedelta
from queue import Queue, Empty
from pathlib import Path
from typing import List, Optional, Dict, Any, Set
import gc
from config import (
    TIMEFRAMES, TICKER_DELAY, MAX_WORKERS, PROCESSING_TIMEOUT,
    SCHEDULE_INTERVAL_MINUTES, SCHEDULE_AT_SECOND, 
    DEFAULT_TICKERS_FILE, BATCH_LOG_FREQUENCY, reload_trading_config
)
from env_loader import reload_env_config

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
import logging

# –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å logger –∏–∑ utils
try:
    from signal_analyzer import SignalAnalyzer
    from order_executor import execute_trading_signal
    from utils import logger
    from config import TIMEFRAMES
    from unified_sync import orders_sync, validate_signal_before_execution
    from unified_sync import state_recovery, recover_system_state, is_symbol_available_for_trading
    logger.info("‚úÖ Successfully imported project modules")
except ImportError as e:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π logger
    logger = logging.getLogger(__name__)
    if not logger.handlers:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s [%(levelname)s] %(message)s'
        )
    
    logger.error(f"‚ùå Import error: {e}")
    logger.warning("‚ö†Ô∏è Running in standalone mode with mock implementations")
    
    # Mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    import random
    
    # Mock —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä
    class MockOrdersSync:
        def validate_new_signal(self, symbol, side, quantity):
            return True, "Mock validation"
        def get_synchronization_report(self):
            return {'watchdog_running': False, 'mock': True}
        def print_sync_report(self, report=None):
            print("üîÑ Mock sync report - Orders Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    orders_sync = MockOrdersSync()
    
    def validate_signal_before_execution(symbol, side, quantity):
        """Mock validation function"""
        return True, "Mock validation"
    
    def is_symbol_available_for_trading(symbol):
        """Mock availability check"""
        return True, "Mock - always available"
    
    def recover_system_state():
        """Mock state recovery"""
        from datetime import datetime
        
        class MockSystemState:
            def __init__(self):
                self.timestamp = datetime.now()
                self.active_positions = {}
                self.watchdog_orders = {}
                self.exchange_positions = {}
                self.exchange_orders = {}
                self.synchronization_issues = []
                self.recovery_actions = ["Mock state recovery"]
                self.is_synchronized = False
        
        return MockSystemState()
    
    class MockSignalAnalyzer:
        def __init__(self, ticker: str):
            self.ticker = ticker
            
        def analyze_ticker(self, stop_event) -> Optional[Dict]:
            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –Ω–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª
            if random.random() < 0.3:
                return {
                    'ticker': self.ticker,
                    'signal': random.choice(['LONG', 'SHORT']),
                    'timeframes': ['1H', '4H'],
                    'entry_price': random.uniform(0.1, 1000),
                    'confidence': random.uniform(0.7, 1.0)
                }
            return None
    
    def process_trading_signal(signal_data: Dict) -> bool:
        logger.info(f"üì± MOCK: Processing signal for {signal_data['ticker']}")
        return True
    
    execute_trading_signal = process_trading_signal
    SignalAnalyzer = MockSignalAnalyzer
    TIMEFRAMES = ['1H', '4H', '1D']


class TickerLoader:
    """
    –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ tickers.txt
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç COIN_SYMBOLS = [...]
    """
    
    def __init__(self, file_path: str = 'tickers.txt'):
        self.file_path = Path(file_path)
        
    def load_tickers(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not self.file_path.exists():
                logger.error(f"‚ùå Ticker file not found: {self.file_path}")
                return self._get_fallback_tickers()
            
            content = self.file_path.read_text(encoding='utf-8').strip()
            if not content:
                logger.warning("‚ö†Ô∏è Ticker file is empty")
                return self._get_fallback_tickers()
            
            logger.debug(f"üìÑ File content preview: {content[:200]}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å Python –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞
            return self._extract_coin_symbols(content)
            
        except Exception as e:
            logger.error(f"‚ùå Error loading tickers: {e}")
            return self._get_fallback_tickers()
    
    def _extract_coin_symbols(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç COIN_SYMBOLS –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
            local_vars = {}
            exec(content, {"__builtins__": {}}, local_vars)
            
            if 'COIN_SYMBOLS' in local_vars:
                tickers = local_vars['COIN_SYMBOLS']
                logger.info(f"üìã Loaded {len(tickers)} tickers from COIN_SYMBOLS")
                return self._validate_tickers(tickers)
            else:
                logger.warning("‚ö†Ô∏è COIN_SYMBOLS not found, trying regex extraction")
                return self._extract_with_regex(content)
                
        except Exception as e:
            logger.error(f"‚ùå Failed to execute file content: {e}")
            return self._extract_with_regex(content)
    
    def _extract_with_regex(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∏–∫–µ—Ä—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        import re
        import ast
        
        try:
            # –ò—â–µ–º COIN_SYMBOLS = [...]
            pattern = r'COIN_SYMBOLS\s*=\s*\[(.*?)\]'
            match = re.search(pattern, content, re.DOTALL)
            
            if match:
                list_content = '[' + match.group(1) + ']'
                tickers = ast.literal_eval(list_content)
                logger.info(f"üìã Extracted {len(tickers)} tickers via regex")
                return self._validate_tickers(tickers)
            else:
                logger.error("‚ùå Could not find COIN_SYMBOLS pattern")
                return self._get_fallback_tickers()
                
        except Exception as e:
            logger.error(f"‚ùå Regex extraction failed: {e}")
            return self._get_fallback_tickers()
    
    def _validate_tickers(self, tickers: List) -> List[str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤"""
        valid_tickers = []
        
        for ticker in tickers:
            if isinstance(ticker, str) and ticker.strip():
                clean_ticker = ticker.strip().upper()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
                if len(clean_ticker) >= 6 and clean_ticker.endswith('USDT'):
                    valid_tickers.append(clean_ticker)
                    logger.debug(f"‚úÖ Valid ticker: {clean_ticker}")
                else:
                    logger.debug(f"‚ö†Ô∏è Skipping ticker: {ticker}")
            else:
                logger.warning(f"‚ö†Ô∏è Invalid ticker format: {ticker}")
        
        if not valid_tickers:
            logger.error("‚ùå No valid tickers found")
            return self._get_fallback_tickers()
        
        logger.info(f"üìä Validated {len(valid_tickers)} tickers")
        return valid_tickers
    
    def _get_fallback_tickers(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        fallback = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
        logger.info(f"üîÑ Using fallback tickers: {fallback}")
        return fallback


class WorkerStats:
    """Thread-safe —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self._lock = threading.Lock()
        self.processed = 0
        self.signals_found = 0
        self.orders_created = 0
        self.errors = 0
        self.start_time: Optional[datetime] = None
        self.reset()
    
    def reset(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            self.processed = 0
            self.signals_found = 0
            self.orders_created = 0
            self.errors = 0
            self.start_time = None
    
    def update(self, processed: int = 0, signals: int = 0, orders: int = 0, errors: int = 0):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            self.processed += processed
            self.signals_found += signals
            self.orders_created += orders
            self.errors += errors
    
    def get_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            duration = 0
            if self.start_time:
                duration = (datetime.now() - self.start_time).total_seconds()
            
            success_rate = (self.signals_found / self.processed * 100) if self.processed > 0 else 0
            conversion_rate = (self.orders_created / self.signals_found * 100) if self.signals_found > 0 else 0
            
            return {
                'processed': self.processed,
                'signals_found': self.signals_found,
                'orders_created': self.orders_created,
                'errors': self.errors,
                'duration_seconds': round(duration, 1),
                'success_rate': round(success_rate, 1),
                'conversion_rate': round(conversion_rate, 1)
            }


class TickerMonitor:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
    """
    
    def __init__(self, tickers_file: str = DEFAULT_TICKERS_FILE, max_workers: int = MAX_WORKERS, ticker_delay: float = TICKER_DELAY):
        self.tickers_file = tickers_file
        self.max_workers = max_workers
        self.ticker_delay = ticker_delay  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–∏–∫–µ—Ä–∞–º–∏
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –æ—á–µ—Ä–µ–¥—è–º–∏
        self.ticker_queue: Queue[Optional[str]] = Queue()
        self.stop_event = threading.Event()
        self.worker_threads: List[threading.Thread] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.stats = WorkerStats()
        self.current_batch_start: Optional[datetime] = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.ticker_loader = TickerLoader(tickers_file)
        self.tickers = self.ticker_loader.load_tickers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Orders Watchdog
        self._check_initial_synchronization()
        
        logger.info(f"üéº TickerMonitor initialized: {len(self.tickers)} tickers, {self.max_workers} workers, {self.ticker_delay}s delay")
    
    def _check_initial_synchronization(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Orders Watchdog –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Orders Watchdog...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            sync_report = orders_sync.get_synchronization_report()
            
            if sync_report.get('watchdog_running', False):
                watched_symbols = sync_report.get('watched_symbols', {})
                watched_count = len(watched_symbols) if isinstance(watched_symbols, dict) else 0
                total_orders = sync_report.get('total_watched_orders', 0)
                
                logger.info(f"‚úÖ Orders Watchdog –∞–∫—Ç–∏–≤–µ–Ω: {watched_count} —Å–∏–º–≤–æ–ª–æ–≤, {total_orders} –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º
                issues = sync_report.get('synchronization_issues', [])
                if isinstance(issues, list) and issues:
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
                    for issue in issues:
                        logger.warning(f"  {issue}")
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –µ—Å–ª–∏ –∏—Ö –Ω–µ –º–Ω–æ–≥–æ
                if isinstance(watched_symbols, dict) and watched_count > 0 and watched_count <= 10:
                    logger.info("üìã –°–∏–º–≤–æ–ª—ã –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º:")
                    for symbol, info in watched_symbols.items():
                        if isinstance(info, dict):
                            status = "–ü–û–ó–ò–¶–ò–Ø" if info.get('main_order_filled') else "–û–†–î–ï–†–ê"
                            side = info.get('position_side', 'UNKNOWN')
                            orders_list = info.get('orders', [])
                            orders_count = len(orders_list) if isinstance(orders_list, list) else 0
                            logger.info(f"  ‚Ä¢ {symbol}: {status} {side} ({orders_count} –æ—Ä–¥–µ—Ä–æ–≤)")
                
            else:
                logger.warning("‚ö†Ô∏è Orders Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
                logger.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Orders Watchdog –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    
    def _setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown"""
        def signal_handler(signum: int, frame: Any) -> None:
            signal_name = "SIGINT" if signum == signal.SIGINT else "SIGTERM"
            logger.info(f"üõë Received {signal_name} - initiating graceful shutdown...")
            self.shutdown()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def shutdown(self) -> None:
        """Graceful shutdown –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("ÔøΩ Starting graceful shutdown...")
        self.stop_event.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö worker'–æ–≤
        active_workers = [t for t in self.worker_threads if t.is_alive()]
        if active_workers:
            logger.info(f"‚è≥ Waiting for {len(active_workers)} workers to complete...")
            for thread in active_workers:
                thread.join(timeout=10)
                if thread.is_alive():
                    logger.warning(f"‚ö†Ô∏è Thread {thread.name} did not terminate gracefully")
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        while not self.ticker_queue.empty():
            try:
                self.ticker_queue.get_nowait()
            except Empty:
                break
        
        logger.info("‚úÖ Graceful shutdown completed")
        sys.exit(0)
    
    def _fill_queue(self) -> None:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.stop_event.is_set():
            return
        
        for ticker in self.tickers:
            if self.stop_event.is_set():
                break
            self.ticker_queue.put(ticker)
        
        # –£–±—Ä–∞–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∏–¥–Ω–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –ª–æ–≥–æ–≤
    
    def _worker(self) -> None:
        """
        –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SignalAnalyzer –∏ OrderGenerator —Å–æ–≥–ª–∞—Å–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        """
        worker_id = threading.current_thread().name
        processed_count = 0
        
        while not self.stop_event.is_set():
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                ticker = self.ticker_queue.get(timeout=0.5)
                
                if ticker is None or self.stop_event.is_set():
                    break
                
                processed_count += 1
                remaining = self.ticker_queue.qsize()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 20 —Ç–∏–∫–µ—Ä–æ–≤ –∏–ª–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                if processed_count % 20 == 0 or remaining <= 10:
                    logger.info(f"üîç [{worker_id}] Progress: {processed_count} processed, {remaining} remaining")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º stop_event –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if self.stop_event.is_set():
                        self.ticker_queue.task_done()
                        break
                    
                    # üîí –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ò–ú–í–û–õ–ê
                    is_available, availability_reason = is_symbol_available_for_trading(ticker)
                    if not is_available:
                        logger.warning(f"üö´ {ticker} blocked for trading: {availability_reason}")
                        self.stats.update(processed=1)
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º stop_event –ø–µ—Ä–µ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
                    if self.stop_event.is_set():
                        self.ticker_queue.task_done()
                        break
                    
                    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ SignalAnalyzer
                    analyzer = SignalAnalyzer(ticker)
                    signal_data = analyzer.analyze_ticker(self.stop_event)
                    
                    self.stats.update(processed=1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º stop_event –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
                    if self.stop_event.is_set():
                        self.ticker_queue.task_done()
                        break
                    
                    # 2. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å—Ö–æ–∂–¥–µ–Ω–∏–µ - –ø–µ—Ä–µ–¥–∞–µ–º –≤ OrderGenerator
                    if signal_data:
                        logger.info(f"üéØ SIGNAL FOUND: {ticker} - {signal_data.get('signal', 'UNKNOWN')}")
                        self.stats.update(signals=1)
                        
                        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ OrderExecutor –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
                        if execute_trading_signal(signal_data):
                            self.stats.update(orders=1)
                            logger.info(f"‚úÖ ORDER CREATED: {ticker}")
                        else:
                            logger.error(f"‚ùå ORDER FAILED: {ticker}")
                            self.stats.update(errors=1)
                
                except Exception as e:
                    logger.error(f"‚ùå Error processing {ticker}: {e}")
                    self.stats.update(errors=1)
                
                finally:
                    self.ticker_queue.task_done()
                    
                    # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∏–∫–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π stop_event
                    if not self.stop_event.is_set():
                        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
                        sleep_time = self.ticker_delay
                        while sleep_time > 0 and not self.stop_event.is_set():
                            chunk = min(sleep_time, 0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
                            time.sleep(chunk)
                            sleep_time -= chunk
            
            except Empty:
                # –¢–∞–π–º–∞—É—Ç –æ—á–µ—Ä–µ–¥–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º stop_event –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                if self.stop_event.is_set():
                    break
                continue
            except Exception as e:
                logger.error(f"‚ùå Worker {worker_id} critical error: {e}")
                self.stats.update(errors=1)
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞ –æ—à–∏–±–æ–∫
                if not self.stop_event.wait(1.0):  # wait –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ event —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                    continue
                else:
                    break
        
        logger.info(f"üèÅ Worker {worker_id} completed: {processed_count} tickers processed")
    
    def _start_workers(self, num_workers: int = 1) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—è —Å—Ç–∞—Ä—ã–µ"""
        # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stop_event –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_event.set()
        time.sleep(0.5)  # –î–∞–µ–º –≤—Ä–µ–º—è –≤–æ—Ä–∫–µ—Ä–∞–º —É–≤–∏–¥–µ—Ç—å stop_event
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ—Ç–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        stuck_threads = []
        for thread in self.worker_threads:
            if thread.is_alive():
                logger.info(f"üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π worker {thread.name}...")
                thread.join(timeout=10)
                if thread.is_alive():
                    logger.warning(f"‚ö†Ô∏è Thread {thread.name} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ stuck")
                    stuck_threads.append(thread.name)

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ stuck)
        self.worker_threads = []
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ stuck threads –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
        if stuck_threads:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(stuck_threads)} –∑–∞–≤–∏—Å—à–∏—Ö –ø–æ—Ç–æ–∫–æ–≤: {', '.join(stuck_threads)}")
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏, —Å—Ç–∞—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º stop_event –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
        self.stop_event.clear()

        actual_workers = min(num_workers, self.max_workers, len(self.tickers))
        for i in range(actual_workers):
            worker = threading.Thread(
                target=self._worker,
                name=f"Worker-{i+1}",
                daemon=True
            )
            worker.start()
            self.worker_threads.append(worker)

        logger.info(f"üöÄ Started {actual_workers} worker thread(s)")
    
    def _wait_for_completion(self) -> None:
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤"""
        logger.info("‚è≥ Waiting for processing to complete...")
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        max_wait_time = PROCESSING_TIMEOUT  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        start_wait = time.time()
        last_log_time = 0
        
        while not self.ticker_queue.empty() and not self.stop_event.is_set():
            remaining = self.ticker_queue.qsize()
            elapsed = time.time() - start_wait
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–∏–∫–µ—Ä–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–æ spam)
            if elapsed - last_log_time > 60 or remaining <= 3:
                logger.info(f"üìä Progress: {remaining} tickers remaining (elapsed: {elapsed:.1f}s)")
                last_log_time = elapsed
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if elapsed > max_wait_time:
                logger.warning(f"‚ö†Ô∏è Processing timeout after {max_wait_time}s, forcing shutdown...")
                self.stop_event.set()
                break
                
            time.sleep(2)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        active_threads = [t for t in self.worker_threads if t.is_alive()]
        if active_threads:
            logger.info(f"üîÑ Shutting down {len(active_threads)} worker threads...")
            for worker in active_threads:
                worker.join(timeout=15)
                if worker.is_alive():
                    logger.warning(f"‚ö†Ô∏è Thread {worker.name} still alive after timeout")
                    # –ù–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –ø–æ–∫–∞ —Å—Ç–∞—Ä—ã–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
        final_alive_threads = [t for t in self.worker_threads if t.is_alive()]
        if final_alive_threads:
            logger.error(f"‚ùå {len(final_alive_threads)} threads –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–≤–∏—Å—à–∏–º–∏: {[t.name for t in final_alive_threads]}")
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        
        # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏
        cleared_count = 0
        while not self.ticker_queue.empty():
            try:
                self.ticker_queue.get_nowait()
                cleared_count += 1
            except Empty:
                break
        
        if cleared_count > 0:
            logger.warning(f"‚ö†Ô∏è Cleared {cleared_count} unprocessed items from queue")
        
        logger.info("‚úÖ All workers completed")
    
    def _log_batch_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        summary = self.stats.get_summary()
        
        logger.info("=" * 60)
        logger.info("BATCH PROCESSING SUMMARY")
        logger.info("=" * 60)
        logger.info(f"Duration: {summary['duration_seconds']}s")
        logger.info(f"Tickers processed: {summary['processed']}/{len(self.tickers)}")
        logger.info(f"Signals found: {summary['signals_found']} ({summary['success_rate']}%)")
        logger.info(f"Orders/Alerts created: {summary['orders_created']} ({summary['conversion_rate']}%)")
        logger.info(f"Errors: {summary['errors']}")
        logger.info(f"Completed at: {datetime.now().strftime('%H:%M:%S')}")
        logger.info(f"Active threads: {threading.active_count()}")
        logger.info("=" * 60)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        gc.collect()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            self.stats.reset()
        except Exception as e:
            logger.debug(f"Warning during cleanup: {e}")
    
    def process_tickers(self) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞–Ω–∞–ª–∏–∑ -> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        if self.stop_event.is_set():
            logger.info("üõë Processing skipped - shutdown in progress")
            return
        
        if not self.tickers:
            logger.warning("‚ö†Ô∏è No tickers to process")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞—Ç—á–∞
        self.current_batch_start = datetime.now()
        self.stats.reset()
        self.stats.start_time = self.current_batch_start
        
        # üîÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º batch'–æ–º
        try:
            # 1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
            reload_env_config()
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            config_changed = reload_trading_config()
            
            if config_changed:
                logger.info("üîÑ Configuration updated before batch processing")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to reload configuration: {e}")
        
        logger.info("üöÄ STARTING TICKER PROCESSING BATCH")
        logger.info(f"üìÖ {self.current_batch_start.strftime('%H:%M:%S')} | {len(self.tickers)} tickers | {', '.join(TIMEFRAMES)} timeframes")
        
        try:
            # 1. –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–∏–∫–µ—Ä–∞–º–∏
            self._fill_queue()
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º worker –ø–æ—Ç–æ–∫–∏
            self._start_workers(num_workers=self.max_workers)
            
            # 3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._wait_for_completion()
            
        except Exception as e:
            logger.error(f"‚ùå Critical error during ticker processing: {e}")
        finally:
            # 4. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._log_batch_summary()
    
    def run(self, run_initial_batch: bool = True) -> None:
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        –í–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
        
        Args:
            run_initial_batch: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏ –ø–µ—Ä–≤–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ä–∞–∑—É
        """
        logger.info("üéº Ticker Monitor Orchestra started!")
        
        try:
            # üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´
            logger.info("üîÑ Starting system state recovery...")
            try:
                system_state = recover_system_state()
                
                if system_state.is_synchronized:
                    logger.info("‚úÖ System state is synchronized")
                else:
                    logger.warning("‚ö†Ô∏è System synchronization issues detected")
                    for issue in system_state.synchronization_issues:
                        logger.warning(f"   ‚Ä¢ {issue}")
                    
                    logger.info("üîß Recovery actions taken:")
                    for action in system_state.recovery_actions:
                        logger.info(f"   ‚Ä¢ {action}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if system_state.active_positions:
                    logger.info(f"üìä Found {len(system_state.active_positions)} active positions:")
                    for symbol, position in system_state.active_positions.items():
                        logger.info(f"   ‚Ä¢ {symbol}: {position.side} {position.size}")
                else:
                    logger.info("üìä No active positions found")
                    
            except Exception as e:
                logger.error(f"‚ùå State recovery failed: {e}")
                logger.warning("‚ö†Ô∏è Continuing with limited functionality...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if run_initial_batch:
                logger.info("üé¨ Running initial processing...")
                self.process_tickers()
            else:
                logger.info("‚è≥ Skipping initial batch, waiting for scheduled time...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            schedule.every().hour.at("00:00").do(self.process_tickers)
            #schedule.every().hour.at("15:00").do(self.process_tickers) 
            #schedule.every().hour.at("30:00").do(self.process_tickers)
            #schedule.every().hour.at("45:00").do(self.process_tickers)

            logger.info("‚è∞ Scheduled processing at 00, OFF are: 15, 30, 45 minutes of each hour")
            logger.info("üéµ Waiting for next scheduled processing... Press Ctrl+C to stop")
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            while not self.stop_event.is_set():
                try:
                    schedule.run_pending()
                    time.sleep(1)
                except KeyboardInterrupt:
                    logger.info("‚å®Ô∏è Keyboard interrupt received")
                    break
                except Exception as e:
                    logger.error(f"‚ùå Scheduler error: {e}")
                    time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
        
        except Exception as e:
            logger.error(f"üí• Fatal error in orchestrator: {e}")
            logger.debug(f"Stack trace: {traceback.format_exc()}")
        finally:
            self.shutdown()
    
    def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return {
            'tickers_loaded': len(self.tickers),
            'queue_size': self.ticker_queue.qsize(),
            'active_workers': len([t for t in self.worker_threads if t.is_alive()]),
            'is_running': not self.stop_event.is_set(),
            'last_batch_start': self.current_batch_start.isoformat() if self.current_batch_start else None,
            'stats': self.stats.get_summary()
        }


def calculate_time_to_next_hour() -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    now = datetime.now()
    next_hour = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
    return int((next_hour - now).total_seconds())


def wait_for_next_hour():
    """–û–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞"""
    seconds_to_wait = calculate_time_to_next_hour()
    next_start_time = datetime.now() + timedelta(seconds=seconds_to_wait)
    
    logger.info(f"‚è∞ Waiting for next hour scheduling at: {next_start_time.strftime('%H:%M:%S')}")
    logger.info(f"‚åõ Time to wait: {seconds_to_wait // 60} minutes {seconds_to_wait % 60} seconds")
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        while seconds_to_wait > 0:
            if seconds_to_wait % 60 == 0 or seconds_to_wait <= 10:
                minutes = seconds_to_wait // 60
                seconds = seconds_to_wait % 60
                if minutes > 0:
                    logger.info(f"‚è≥ {minutes}m {seconds}s remaining until next batch...")
                else:
                    logger.info(f"‚è≥ {seconds}s remaining until next batch...")
            
            time.sleep(1)
            seconds_to_wait -= 1
            
        logger.info("üé¨ Starting batch at scheduled time!")
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è Wait interrupted by user")
        raise


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    try:
        logger.info("üöÄ Starting PATRIOT Ticker Monitor...")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –∑–∞–ø—É—Å–∫–∞
        current_time = datetime.now().strftime('%H:%M:%S')
        next_hour_time = (datetime.now().replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)).strftime('%H:%M:%S')
        
        print(f"\n‚è∞ Current time: {current_time}")
        print(f"üìÖ Next scheduled batch: {next_hour_time}")
        print()
        
        try:
            response = input("üöÄ Start batch now? (Y/n): ").strip().lower()
        except (EOFError, KeyboardInterrupt):
            print("\nüëã Goodbye!")
            return
        
        start_immediately = response in ['', 'y', 'yes']
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        monitor = TickerMonitor(
            max_workers=MAX_WORKERS,
            ticker_delay=TICKER_DELAY
        )
        
        if start_immediately:
            logger.info("‚ñ∂Ô∏è Starting first batch immediately...")
            monitor.run(run_initial_batch=True)
        else:
            logger.info("‚è≥ Waiting for next scheduled time...")
            wait_for_next_hour()
            logger.info("üé¨ Running first scheduled batch...")
            monitor.process_tickers()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞—Ç—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            monitor.run(run_initial_batch=False)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        
    except KeyboardInterrupt:
        logger.info("üëã Graceful shutdown requested by user")
    except Exception as e:
        logger.error(f"üí• Application failed to start: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()