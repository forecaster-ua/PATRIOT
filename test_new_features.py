#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –±–∏–Ω–∞–Ω—Å–∞:
1) MAX_CONCURRENT_ORDERS –ø–æ FILLED –ø–æ–∑–∏—Ü–∏—è–º (+ pending –≤ –∞–Ω—Ç–∏-–≥–æ–Ω–∫—É)
2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—É—á—à–µ–π —Ü–µ–Ω—ã LONG/SHORT
3) –¢—Ä–µ–π–ª–∏–Ω–≥ 80/80/50 (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä)
–í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º 1 –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ.
"""
import os, sys
from dataclasses import dataclass, asdict
from typing import List, Optional

# ---- –§–µ–π–∫–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ ----
@dataclass
class FakeOrder:
    symbol: str
    side: str           # BUY/SELL
    position_side: str  # LONG/SHORT
    price: float
    status: str         # NEW/FILLED/CANCELED

@dataclass
class FakePosition:
    symbol: str
    position_side: str
    entry_price: float
    qty: float

@dataclass
class FakeTrade:
    symbol: str
    side: str           # LONG/SHORT –ª–æ–≥–∏–∫–∞
    entry: float
    tp: float
    sl: float
    qty: float
    trailing_triggered: bool = False
    partially_taken: bool = False

class FakeRegistry:
    """–ú–∏–Ω–∏-—Ä–µ–µ—Å—Ç—Ä –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–æ–≤"""
    def __init__(self, positions: List[FakePosition], open_orders: List[FakeOrder]):
        self.positions = positions
        self.open_orders = open_orders

    def count_open_trades(self) -> int:
        # —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –æ–±—ä—ë–º–æ–º (—ç–º—É–ª–∏—Ä—É–µ–º FILLED)
        return sum(1 for p in self.positions if abs(p.qty) > 1e-12)

    def count_pending_orders(self) -> int:
        return sum(1 for o in self.open_orders if o.status == "NEW")

    def best_existing_price(self, symbol: str, side: str, position_side: str) -> Optional[float]:
        prices = []
        for o in self.open_orders:
            if o.symbol == symbol and o.position_side == position_side and o.status == "NEW":
                prices.append(o.price)
        for p in self.positions:
            if p.symbol == symbol and p.position_side == position_side and abs(p.qty) > 1e-12:
                prices.append(p.entry_price)
        return min(prices) if side == "BUY" else (max(prices) if prices else None) if side == "SELL" else (min(prices) if prices else None)

# ---- –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –ª–æ–≥–∏–∫–∞ (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–≤–æ–µ–π —Ä–µ–∞–ª—å–Ω–æ–π) ----
def can_place_new_order(reg: FakeRegistry, max_concurrent: int) -> bool:
    # –ª–∏–º–∏—Ç –ø–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º —Å–¥–µ–ª–∫–∞–º (positions FILLED)
    open_trades = reg.count_open_trades()
    pending = reg.count_pending_orders()
    # –∞–Ω—Ç–∏-–≥–æ–Ω–∫–∞: –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º ¬´–ø–µ—Ä–µ—Ä–∞–∑–æ–≥–Ω–∞—Ç—å—Å—è¬ª, –µ—Å–ª–∏ —Å—É–º–º–∞—Ä–Ω–æ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏
    return (open_trades + pending) < max_concurrent

def is_price_improved(reg: FakeRegistry, symbol: str, side: str, position_side: str, new_price: float) -> bool:
    """
    LONG(BUY): –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ –ª—É—á—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    SHORT(SELL): –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –ª—É—á—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    –ï—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ‚Äî True.
    """
    be = reg.best_existing_price(symbol, "BUY" if position_side == "LONG" else "SELL", position_side)
    if be is None:
        return True
    if position_side == "LONG":   # –ø–æ–∫—É–ø–∞–µ–º –ª—É—á—à–µ ‚Äî –¥–µ—à–µ–≤–ª–µ
        return new_price < be
    else:                         # SHORT ‚Äî –ø—Ä–æ–¥–∞—ë–º –ª—É—á—à–µ ‚Äî –¥–æ—Ä–æ–∂–µ
        return new_price > be

def maybe_apply_trailing(trade: FakeTrade, last_price: float) -> Optional[dict]:
    if trade.trailing_triggered:
        return None
    if trade.side == "LONG":
        path = trade.tp - trade.entry
        if path <= 0: 
            return None
        progress = (last_price - trade.entry) / path
        if progress >= 0.8:
            trade.trailing_triggered = True
            trade.partially_taken = True
            new_sl = trade.entry + 0.5 * path
            close_qty = trade.qty * 0.8
            return {"close_qty": close_qty, "new_stop": new_sl}
    else:  # SHORT
        path = trade.entry - trade.tp
        if path <= 0:
            return None
        progress = (trade.entry - last_price) / path
        if progress >= 0.8:
            trade.trailing_triggered = True
            trade.partially_taken = True
            new_sl = trade.entry - 0.5 * path
            close_qty = trade.qty * 0.8
            return {"close_qty": close_qty, "new_stop": new_sl}
    return None

# ---- –¢–µ—Å—Ç—ã ----
def t_assert(cond, msg):
    if not cond:
        print("‚ùå", msg)
        sys.exit(1)
    else:
        print("‚úÖ", msg)

def test_max_concurrent_orders():
    print("\nüîç –¢–µ—Å—Ç 1: MAX_CONCURRENT_ORDERS –ª–æ–≥–∏–∫–∞")
    positions = [FakePosition("BTCUSDT", "LONG", 45000, 0.001)]
    open_orders = [FakeOrder("BTCUSDT", "BUY", "LONG", 44900, "NEW")]
    reg = FakeRegistry(positions, open_orders)

    t_assert(can_place_new_order(reg, 3) is True, "MAX=3 ‚Üí –º–æ–∂–Ω–æ (1 FILLED + 1 NEW < 3)")
    t_assert(can_place_new_order(reg, 2) is False, "MAX=2 ‚Üí –Ω–µ–ª—å–∑—è (1 FILLED + 1 NEW == 2) ‚Äî –∞–Ω—Ç–∏-–≥–æ–Ω–∫–∞")
    t_assert(can_place_new_order(reg, 1) is False, "MAX=1 ‚Üí –Ω–µ–ª—å–∑—è (—É–∂–µ –µ—Å—Ç—å FILLED)")

def test_price_quality():
    print("\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã LONG/SHORT")
    positions = [FakePosition("BTCUSDT", "LONG", 45000, 0.002)]
    open_orders = [FakeOrder("BTCUSDT", "BUY", "LONG", 44950, "NEW")]
    reg = FakeRegistry(positions, open_orders)

    t_assert(is_price_improved(reg, "BTCUSDT", "BUY", "LONG", 44800) is True,  "LONG: 44800 –ª—É—á—à–µ (–Ω–∏–∂–µ) ‚Üí OK")
    t_assert(is_price_improved(reg, "BTCUSDT", "BUY", "LONG", 45200) is False, "LONG: 45200 —Ö—É–∂–µ (–≤—ã—à–µ) ‚Üí Block")

    # SHORT
    positions2 = [FakePosition("ETHUSDT", "SHORT", 2600, 0.5)]
    open_orders2 = [FakeOrder("ETHUSDT", "SELL", "SHORT", 2610, "NEW")]
    reg2 = FakeRegistry(positions2, open_orders2)

    t_assert(is_price_improved(reg2, "ETHUSDT", "SELL", "SHORT", 2625) is True,  "SHORT: 2625 –ª—É—á—à–µ (–≤—ã—à–µ) ‚Üí OK")
    t_assert(is_price_improved(reg2, "ETHUSDT", "SELL", "SHORT", 2580) is False, "SHORT: 2580 —Ö—É–∂–µ (–Ω–∏–∂–µ) ‚Üí Block")

def test_trailing():
    print("\nüîç –¢–µ—Å—Ç 3: –¢—Ä–µ–π–ª–∏–Ω–≥ 80/80/50")
    # LONG: entry=100, tp=120 ‚Üí 80% –ø—É—Ç–∏ = 116 ‚Üí SL –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å 110, –∑–∞–∫—Ä—ã—Ç—å 80%
    t = FakeTrade("BTCUSDT", "LONG", entry=100, tp=120, sl=90, qty=1.0)
    act = maybe_apply_trailing(t, last_price=116)
    t_assert(act is not None, "LONG: —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ 80%")
    t_assert(abs(act["new_stop"] - 110) < 1e-9, "LONG: –Ω–æ–≤—ã–π SL = 110 (entry + 50% –ø—É—Ç–∏)")
    t_assert(abs(act["close_qty"] - 0.8) < 1e-9, "LONG: –∑–∞–∫—Ä—ã—Ç—å 80% –ø–æ–∑–∏—Ü–∏–∏")
    # –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    act2 = maybe_apply_trailing(t, last_price=118)
    t_assert(act2 is None, "LONG: –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç")

    # SHORT: entry=100, tp=80 ‚Üí 80% –ø—É—Ç–∏ = 84 ‚Üí SL=90
    s = FakeTrade("BTCUSDT", "SHORT", entry=100, tp=80, sl=110, qty=2.0)
    act = maybe_apply_trailing(s, last_price=84)
    t_assert(act is not None, "SHORT: —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ 80%")
    t_assert(abs(act["new_stop"] - 90) < 1e-9, "SHORT: –Ω–æ–≤—ã–π SL = 90 (entry - 50% –ø—É—Ç–∏)")
    t_assert(abs(act["close_qty"] - 1.6) < 1e-9, "SHORT: –∑–∞–∫—Ä—ã—Ç—å 80% –ø–æ–∑–∏—Ü–∏–∏")
    act2 = maybe_apply_trailing(s, last_price=83)
    t_assert(act2 is None, "SHORT: –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç")

def test_capacity_frees_on_close():
    print("\nüîç –¢–µ—Å—Ç 4: –°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏")
    # –°—Ç–∞—Ä—Ç: 1 FILLED –ø–æ–∑–∏—Ü–∏—è + 1 NEW –æ—Ä–¥–µ—Ä ‚Üí –ø—Ä–∏ MAX=2 –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è
    positions = [FakePosition("BTCUSDT", "LONG", 45000, 0.002)]
    open_orders = [FakeOrder("BTCUSDT", "BUY", "LONG", 44950, "NEW")]
    reg = FakeRegistry(positions, open_orders)
    t_assert(can_place_new_order(reg, 2) is False, "–î–æ –∑–∞–∫—Ä—ã—Ç–∏—è: (1 FILLED + 1 NEW) == 2 ‚Üí –Ω–µ–ª—å–∑—è")

    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ (–ø–æ–∑–∏—Ü–∏—è –æ–±–Ω—É–ª–∏–ª–∞—Å—å; pending –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è/–æ—Ç–º–µ–Ω—ë–Ω)
    positions[0].qty = 0.0
    open_orders[0].status = "FILLED"  # –∏–ª–∏ "CANCELED" ‚Äî –≤ –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç–∞—Ç—å—Å—è pending

    # –¢–µ–ø–µ—Ä—å –º–µ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ —Ö–≤–∞—Ç–∞—Ç—å
    t_assert(can_place_new_order(reg, 2) is True, "–ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è: (0 FILLED + 0 NEW) < 2 ‚Üí –º–æ–∂–Ω–æ")
    

def main():
    print("üß™ PATRIOT quick tests (MVP)\n" + "="*60)
    test_max_concurrent_orders()
    test_price_quality()
    test_trailing()
    test_capacity_frees_on_close()
    print("\n" + "="*60)
    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    main()
