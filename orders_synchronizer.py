#!/usr/bin/env python3
"""
Orders Synchronizer - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
==============================================================

–ú–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É ticker_monitor –∏ orders_watchdog:
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–æ–≤
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

Author: HEDGER
Version: 1.0 - Orders Synchronization System
"""

import json
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from utils import logger


class OrdersSynchronizer:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, timeout: float = 5.0):
        self.timeout = timeout
        self.requests_file = Path('orders_watchdog_requests.json')
        self.response_file = Path('orders_watchdog_response.json')
        
    def _send_request_to_watchdog(self, action: str, data: Optional[Any] = None) -> Optional[Dict[str, Any]]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Orders Watchdog –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞
        
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç watchdog –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ/—Ç–∞–π–º–∞—É—Ç–µ
        """
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.response_file.exists():
                self.response_file.unlink()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            request = {
                'action': action,
                'timestamp': datetime.now().isoformat(),
                'data': data
            }
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
            existing_requests = []
            if self.requests_file.exists():
                try:
                    with open(self.requests_file, 'r', encoding='utf-8') as f:
                        existing_requests = json.load(f)
                except:
                    existing_requests = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            existing_requests.append(request)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
            with open(self.requests_file, 'w', encoding='utf-8') as f:
                json.dump(existing_requests, f, indent=2, ensure_ascii=False)
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            start_time = time.time()
            expected_response = f"{action}_response"
            
            while time.time() - start_time < self.timeout:
                if self.response_file.exists():
                    try:
                        with open(self.response_file, 'r', encoding='utf-8') as f:
                            response = json.load(f)
                        
                        if response.get('action') == expected_response:
                            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
                            self.response_file.unlink()
                            return response.get('data')
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
                
                time.sleep(0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100ms
            
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Orders Watchdog ({self.timeout}s)")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Orders Watchdog: {e}")
            return None
    
    def is_watchdog_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Orders Watchdog"""
        try:
            status = self._send_request_to_watchdog('get_status')
            return status is not None and status.get('is_running', False)
        except:
            return False
    
    def get_watched_symbols(self) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º Orders Watchdog
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö
        """
        try:
            symbols_data = self._send_request_to_watchdog('get_watched_symbols')
            if symbols_data is not None:
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(symbols_data)} –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö")
                return symbols_data
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö")
                return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return {}
    
    def check_order_conflicts(self, proposed_orders: List[Dict[str, Any]]) -> Tuple[bool, Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
        
        Args:
            proposed_orders: –°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –∫–ª—é—á–∞–º–∏:
                           - symbol: str
                           - side: str (BUY/SELL)
                           - quantity: float
                           - order_type: str (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            Tuple[safe_to_proceed: bool, conflict_info: dict]
        """
        try:
            if not proposed_orders:
                return True, {'conflicts': [], 'recommendations': []}
            
            conflict_result = self._send_request_to_watchdog('check_conflicts', proposed_orders)
            
            if conflict_result is not None:
                safe_to_proceed = conflict_result.get('safe_to_proceed', True)
                conflicts_count = conflict_result.get('total_conflicts', 0)
                
                if conflicts_count > 0:
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {conflicts_count} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    for recommendation in conflict_result.get('recommendations', []):
                        logger.warning(f"  {recommendation}")
                
                return safe_to_proceed, conflict_result
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å Orders Watchdog")
                # –í —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ watchdog - —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                return True, {'error': 'Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'conflicts': [], 'recommendations': []}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {e}")
            return True, {'error': str(e), 'conflicts': [], 'recommendations': []}
    
    def validate_new_signal(self, symbol: str, side: str, quantity: float) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (BUY/SELL)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
        Returns:
            Tuple[is_valid: bool, reason: str]
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å watchdog
            if not self.is_watchdog_running():
                logger.warning("‚ö†Ô∏è Orders Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return True, "Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            proposed_order = {
                'symbol': symbol,
                'side': side,
                'quantity': quantity,
                'order_type': 'MAIN'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            safe_to_proceed, conflict_info = self.check_order_conflicts([proposed_order])
            
            if not safe_to_proceed:
                # –ï—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                error_conflicts = [c for c in conflict_info.get('conflicts', []) if c.get('severity') == 'ERROR']
                if error_conflicts:
                    conflict = error_conflicts[0]
                    reason = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç {conflict['conflict_type']}: {conflict.get('existing_position_side', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    return False, reason
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            warning_conflicts = [c for c in conflict_info.get('conflicts', []) if c.get('severity') == 'WARNING']
            if warning_conflicts:
                # –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
                return True, f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {len(warning_conflicts)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"
            
            return True, "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return True, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"
    
    def get_synchronization_report(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            –û—Ç—á–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            report = {
                'timestamp': datetime.now().isoformat(),
                'watchdog_running': False,
                'watched_symbols': {},
                'total_watched_orders': 0,
                'synchronization_issues': [],
                'recommendations': []
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å watchdog
            watchdog_status = self._send_request_to_watchdog('get_status')
            if watchdog_status:
                report['watchdog_running'] = watchdog_status.get('is_running', False)
                report['total_watched_orders'] = watchdog_status.get('watched_orders_count', 0)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–∞—Ö
                watched_symbols = self.get_watched_symbols()
                report['watched_symbols'] = watched_symbols
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                for symbol, info in watched_symbols.items():
                    if info.get('main_order_filled', False):
                        if not info.get('has_sl', False) and not info.get('has_tp', False):
                            report['synchronization_issues'].append(f"‚ö†Ô∏è {symbol}: –û—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ SL/TP")
                    
                    if len(info.get('orders', [])) > 3:
                        report['synchronization_issues'].append(f"‚ö†Ô∏è {symbol}: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤ ({len(info['orders'])})")
            else:
                report['synchronization_issues'].append("‚ùå Orders Watchdog –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                report['recommendations'].append("–ó–∞–ø—É—Å—Ç–∏—Ç–µ Orders Watchdog –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'timestamp': datetime.now().isoformat(),
                'error': str(e),
                'watchdog_running': False,
                'synchronization_issues': [f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"]
            }
    
    def print_sync_report(self, report: Optional[Dict[str, Any]] = None) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if report is None:
            report = self.get_synchronization_report()
        
        print("=" * 70)
        print("üîÑ –û–¢–ß–ï–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 70)
        
        print(f"üïê –í—Ä–µ–º—è: {report['timestamp']}")
        print(f"üêï Orders Watchdog: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if report['watchdog_running'] else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"üìä –ù–∞–±–ª—é–¥–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {report['total_watched_orders']}")
        print(f"üìà –°–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º: {len(report.get('watched_symbols', {}))}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        watched_symbols = report.get('watched_symbols', {})
        if watched_symbols:
            print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –°–ò–ú–í–û–õ–ê–ú:")
            print("-" * 50)
            
            for symbol, info in watched_symbols.items():
                status = "üìç –ü–û–ó–ò–¶–ò–Ø" if info.get('main_order_filled') else "‚è≥ –û–†–î–ï–†–ê"
                orders_count = len(info.get('orders', []))
                position_side = info.get('position_side', 'UNKNOWN')
                
                sl_status = "‚úÖ SL" if info.get('has_sl') else "‚ùå NO SL"
                tp_status = "‚úÖ TP" if info.get('has_tp') else "‚ùå NO TP"
                
                print(f"‚Ä¢ {symbol}: {status} {position_side} | {orders_count} –æ—Ä–¥–µ—Ä–æ–≤ | {sl_status} | {tp_status}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        issues = report.get('synchronization_issues', [])
        if issues:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ({len(issues)}):")
            print("-" * 50)
            for issue in issues:
                print(f"  {issue}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = report.get('recommendations', [])
        if recommendations:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("-" * 50)
            for rec in recommendations:
                print(f"  {rec}")
        
        if not issues and not recommendations and report['watchdog_running']:
            print(f"\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        print("=" * 70)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
orders_sync = OrdersSynchronizer()


def validate_signal_before_execution(symbol: str, side: str, quantity: float) -> Tuple[bool, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (BUY/SELL) 
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
    Returns:
        Tuple[is_valid: bool, reason: str]
    """
    return orders_sync.validate_new_signal(symbol, side, quantity)


def get_watched_symbols_info() -> Dict[str, Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö"""
    return orders_sync.get_watched_symbols()


def check_synchronization() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
    return orders_sync.get_synchronization_report()


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Orders Synchronizer...")
    
    sync = OrdersSynchronizer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å watchdog
    print(f"üêï Watchdog running: {sync.is_watchdog_running()}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    sync.print_sync_report()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞
    is_valid, reason = sync.validate_new_signal("BTCUSDT", "BUY", 0.001)
    print(f"üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'‚úÖ' if is_valid else '‚ùå'} {reason}")
