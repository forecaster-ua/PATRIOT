"""
Order Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ REST API
================================================

–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø MVP:
- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–æ—Å –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ REST API (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
- OCO –ª–æ–≥–∏–∫–∞ (One-Cancels-Other)  
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –æ—Ä–¥–µ—Ä–æ–≤
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

Author: HEDGER
Version: 1.0 - MVP Simplified
"""

import threading
import time
from typing import Dict, List, Optional, Set
from datetime import datetime

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from utils import logger
from telegram_bot import telegram_bot
from config import BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET

# Binance REST API
from binance.client import Client
from binance.exceptions import BinanceAPIException

class OrderMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ REST API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.binance_client = None
        self.active_order_groups = {}  # order_id -> order_group_info
        self.monitoring_active = False
        self.monitoring_thread = None
        self.check_interval = 30  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        self._init_binance_client()
        
        logger.info("üëÅÔ∏è OrderMonitor initialized (REST API polling)")
    
    def _init_binance_client(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not BINANCE_API_KEY or not BINANCE_API_SECRET:
                logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return
            
            self.binance_client = Client(
                api_key=BINANCE_API_KEY,
                api_secret=BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            logger.info("‚úÖ REST API client initialized")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ REST API: {e}")
    
    def add_order_group(self, order_result: Dict) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            order_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç order_executor.place_market_order()
        """
        try:
            if not order_result.get('success', False):
                return
            
            main_order = order_result['main_order']
            stop_order = order_result['stop_order']
            tp_order = order_result['tp_order']
            signal_data = order_result['signal_data']
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –æ—Ä–¥–µ—Ä–æ–≤
            group_id = f"group_{int(time.time())}"
            order_group = {
                'group_id': group_id,
                'ticker': signal_data['ticker'],
                'signal_type': signal_data['signal'],
                'quantity': order_result['quantity'],
                'main_order_id': main_order['orderId'],
                'stop_order_id': stop_order['orderId'],
                'tp_order_id': tp_order['orderId'],
                'main_status': 'FILLED',  # Market –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
                'stop_status': 'NEW',
                'tp_status': 'NEW',
                'created_at': datetime.now(),
                'signal_data': signal_data
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            self.active_order_groups[main_order['orderId']] = order_group
            self.active_order_groups[stop_order['orderId']] = order_group
            self.active_order_groups[tp_order['orderId']] = order_group
            
            logger.info(f"üëÅÔ∏è –ì—Ä—É–ø–ø–∞ –æ—Ä–¥–µ—Ä–æ–≤ {group_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ({signal_data['ticker']})")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self.monitoring_active:
                self.start_monitoring()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {e}")
    
    def start_monitoring(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ REST API"""
        if self.monitoring_active or not self.binance_client:
            return
        
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ REST API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤...")
            
            self.monitoring_active = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.monitoring_thread = threading.Thread(
                target=self._run_monitoring_loop,
                daemon=True,
                name="OrderMonitor"
            )
            self.monitoring_thread.start()
            
            logger.info("‚úÖ REST API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.monitoring_active = False
    
    def _run_monitoring_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            while self.monitoring_active:
                if self.active_order_groups:
                    self._check_all_orders()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.check_interval)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.monitoring_active = False
    
    def _check_all_orders(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
            symbols_to_check = set()
            for group in self.active_order_groups.values():
                symbols_to_check.add(group['ticker'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            for symbol in symbols_to_check:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
                    open_orders = self.binance_client.futures_get_open_orders(symbol=symbol)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–¥–µ—Ä–∞
                    self._process_symbol_orders(symbol, open_orders)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ {symbol}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    
    def _process_symbol_orders(self, symbol: str, open_orders: List[Dict]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
            open_order_ids = {str(order['orderId']) for order in open_orders}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–¥–µ—Ä–∞ —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            groups_to_check = []
            for order_id, group in self.active_order_groups.items():
                if group['ticker'] == symbol:
                    groups_to_check.append((order_id, group))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            for order_id, group in groups_to_check:
                self._check_order_status(order_id, group, open_order_ids)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
    
    def _check_order_status(self, order_id: str, group: Dict, open_order_ids: Set[str]) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö - –∑–Ω–∞—á–∏—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
            if order_id not in open_order_ids:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                try:
                    order_info = self.binance_client.futures_get_order(
                        symbol=group['ticker'],
                        orderId=order_id
                    )
                    
                    status = order_info['status']
                    
                    if status == 'FILLED':
                        self._handle_filled_order(group, order_id, order_info)
                    elif status == 'CANCELED':
                        self._handle_canceled_order(group, order_id, order_info)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ {order_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
    
    def _handle_filled_order(self, order_group: Dict, order_id: str, order_data: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä"""
        try:
            ticker = order_group['ticker']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
            if order_id == order_group['stop_order_id']:
                order_type = "STOP"
            elif order_id == order_group['tp_order_id']:
                order_type = "TAKE_PROFIT"
            else:
                return  # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä –º—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
            
            if order_type == "STOP":
                # –ò—Å–ø–æ–ª–Ω–∏–ª—Å—è Stop Loss - –æ—Ç–º–µ–Ω—è–µ–º Take Profit
                logger.warning(f"üõ°Ô∏è STOP LOSS –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–ª—è {ticker}")
                
                tp_order_id = order_group['tp_order_id']
                self._cancel_order(ticker, tp_order_id, "Stop Loss –∏—Å–ø–æ–ª–Ω–µ–Ω")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self._send_stop_loss_notification(order_group, order_data)
                
                # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                self._remove_order_group(order_group)
                
            elif order_type == "TAKE_PROFIT":
                # –ò—Å–ø–æ–ª–Ω–∏–ª—Å—è Take Profit - –æ—Ç–º–µ–Ω—è–µ–º Stop Loss
                logger.info(f"üéØ TAKE PROFIT –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–ª—è {ticker}")
                
                stop_order_id = order_group['stop_order_id']
                self._cancel_order(ticker, stop_order_id, "Take Profit –∏—Å–ø–æ–ª–Ω–µ–Ω")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                self._send_take_profit_notification(order_group, order_data)
                
                # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                self._remove_order_group(order_group)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
    
    def _handle_canceled_order(self, order_group: Dict, order_id: str, order_data: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä"""
        try:
            ticker = order_group['ticker']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
            if order_id == order_group['stop_order_id']:
                order_type = "STOP"
            elif order_id == order_group['tp_order_id']:
                order_type = "TAKE_PROFIT"
            else:
                return
                
            logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_type} –æ—Ç–º–µ–Ω–µ–Ω –≤–Ω–µ—à–Ω–µ –¥–ª—è {ticker}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—à–Ω–µ–π –æ—Ç–º–µ–Ω–µ
            self._send_external_cancel_notification(order_group, order_type, order_data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
    
    def _cancel_order(self, symbol: str, order_id: str, reason: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä"""
        try:
            if not self.binance_client:
                return False
            
            result = self.binance_client.futures_cancel_order(
                symbol=symbol,
                orderId=order_id
            )
            
            logger.info(f"‚ùå –û—Ä–¥–µ—Ä {order_id} –æ—Ç–º–µ–Ω–µ–Ω ({reason})")
            return True
            
        except BinanceAPIException as e:
            if e.code == -2011:  # Order does not exist
                logger.info(f"‚ÑπÔ∏è –û—Ä–¥–µ—Ä {order_id} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
            return False
    
    def _remove_order_group(self, order_group: Dict) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            main_order_id = order_group['main_order_id']
            stop_order_id = order_group['stop_order_id']
            tp_order_id = order_group['tp_order_id']
            group_id = order_group['group_id']
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
            self.active_order_groups.pop(main_order_id, None)
            self.active_order_groups.pop(stop_order_id, None)
            self.active_order_groups.pop(tp_order_id, None)
            
            logger.info(f"üóëÔ∏è –ì—Ä—É–ø–ø–∞ –æ—Ä–¥–µ—Ä–æ–≤ {group_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    
    def _send_stop_loss_notification(self, order_group: Dict, order_data: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ Stop Loss"""
        try:
            ticker = order_group['ticker']
            signal_type = order_group['signal_type']
            quantity = order_group['quantity']
            fill_price = float(order_data.get('ap', 0))  # Average price
            
            message = f"""
üõ°Ô∏è <b>STOP LOSS –ò–°–ü–û–õ–ù–ï–ù</b> üõ°Ô∏è

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üìà <b>–ü–æ–∑–∏—Ü–∏—è:</b> {signal_type}
üí∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}
üíµ <b>–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {fill_price:.6f}

‚ùå Take Profit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Stop Loss {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Stop Loss: {e}")
    
    def _send_take_profit_notification(self, order_group: Dict, order_data: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ Take Profit"""
        try:
            ticker = order_group['ticker']
            signal_type = order_group['signal_type']
            quantity = order_group['quantity']
            fill_price = float(order_data.get('ap', 0))  # Average price
            
            message = f"""
üéØ <b>TAKE PROFIT –ò–°–ü–û–õ–ù–ï–ù!</b> üéØ

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üìà <b>–ü–æ–∑–∏—Ü–∏—è:</b> {signal_type}
üí∞ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}
üíµ <b>–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {fill_price:.6f}

‚úÖ Stop Loss –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω

üéâ <b>–ü–†–ò–ë–´–õ–¨ –ó–ê–§–ò–ö–°–ò–†–û–í–ê–ù–ê!</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Take Profit {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Take Profit: {e}")
    
    def _send_external_cancel_notification(self, order_group: Dict, order_type: str, order_data: Dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—à–Ω–µ–π –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞"""
        try:
            ticker = order_group['ticker']
            
            message = f"""
‚ö†Ô∏è <b>–í–ù–ï–®–ù–Ø–Ø –û–¢–ú–ï–ù–ê –û–†–î–ï–†–ê</b> ‚ö†Ô∏è

üìä <b>–°–∏–º–≤–æ–ª:</b> {ticker}
üéØ <b>–¢–∏–ø –æ—Ä–¥–µ—Ä–∞:</b> {order_type}

‚ùó –û—Ä–¥–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –Ω–µ —Å–∏—Å—Ç–µ–º–æ–π!
üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—à–Ω–µ–π –æ—Ç–º–µ–Ω–µ {ticker} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–Ω–µ—à–Ω–µ–π –æ—Ç–º–µ–Ω–µ: {e}")
    
    def get_monitoring_status(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'monitoring_active': self.monitoring_active,
            'active_groups': len(set(group['group_id'] for group in self.active_order_groups.values())),
            'total_orders': len(self.active_order_groups)
        }
    
    def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            if self.monitoring_active:
                self.monitoring_active = False
                if self.monitoring_thread and self.monitoring_thread.is_alive():
                    self.monitoring_thread.join(timeout=5)
                logger.info("üõë REST API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ order_executor
order_monitor = OrderMonitor()


if __name__ == "__main__":
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    import logging
    logging.basicConfig(level=logging.INFO)
    
    monitor = OrderMonitor()
    
    if monitor.binance_client:
        logger.info("‚úÖ Order monitor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
        monitor.start_monitoring()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        import time
        time.sleep(10)
        
        status = monitor.get_monitoring_status()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {status}")
        
        monitor.stop_monitoring()
    else:
        logger.error("‚ùå Order monitor –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω")
