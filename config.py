import logging
import os
from pathlib import Path
from typing import List

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
_ENV_LOADED = False
if not _ENV_LOADED:
    try:
        from env_loader import load_env_file
        load_env_file()
        _ENV_LOADED = True
    except ImportError:
        print("Environment loader not available - using system environment variables only")

# Add UTC timezone setting
USE_UTC = True

# --- Directory Configuration ---
LOG_DIR = Path('logs')
LOG_FILE = LOG_DIR / 'signals.log'
BINANCE_LOG_FILE = LOG_DIR / 'binance.log'
LOG_LEVEL = logging.INFO

# Create logs directory if not exists
LOG_DIR.mkdir(exist_ok=True, mode=0o755)  # Secure directory permissions

# Logging configuration with UTF-8 encoding
LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': str(LOG_FILE),
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'binance_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': str(BINANCE_LOG_FILE),
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
            'stream': 'ext://sys.stdout',
        },
    },
    'loggers': {
        'binance_factory': {
            'level': 'INFO',
            'handlers': ['binance_file', 'console'],
            'propagate': False,
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['file', 'console'],
    },
}

# --- API Configuration ---
API_BASE_URL = "https://5ca35593a63d.ngrok-free.app/" # Base URL for the API
API_ENDPOINT = "/signal"
API_KEY = os.getenv("API_KEY", "my_secret_9876_maxa")  # Prefer environment variable
API_TIMEOUT = 10  # seconds

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è SignalProcessor
API_CLIENT_CONFIG = {  
    'base_url': API_BASE_URL,
    'api_key': API_KEY,
    'timeout': API_TIMEOUT
}

# --- Trading Configuration ---
TIMEFRAMES: List[str] = ['15m', '1h', '4h']  # Consistent lowercase timeframe format

# --- Binance Configuration ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (testnet –∏–ª–∏ mainnet)
BINANCE_TESTNET = os.getenv("BINANCE_TESTNET", "true").lower() == "true"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ API –∫–ª—é—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
if BINANCE_TESTNET:
    # –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
    BINANCE_API_KEY = os.getenv("BINANCE_TESTNET_API_KEY", "")
    BINANCE_API_SECRET = os.getenv("BINANCE_TESTNET_API_SECRET", "")
    NETWORK_MODE = "TESTNET"
else:
    # –ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º  
    BINANCE_API_KEY = os.getenv("BINANCE_MAINNET_API_KEY", "")
    BINANCE_API_SECRET = os.getenv("BINANCE_MAINNET_API_SECRET", "")
    NETWORK_MODE = "MAINNET"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
if not BINANCE_API_KEY or not BINANCE_API_SECRET:
    missing_env = "TESTNET" if BINANCE_TESTNET else "MAINNET"
    print(f"‚ö†Ô∏è  WARNING: Binance {missing_env} API keys not configured!")
    print(f"Required environment variables: BINANCE_{missing_env}_API_KEY, BINANCE_{missing_env}_API_SECRET")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏
RISK_PERCENT = float(os.getenv("RISK_PERCENT", "2.0"))  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2%)
FUTURES_LEVERAGE = int(os.getenv("FUTURES_LEVERAGE", "30"))  # –ü–ª–µ—á–æ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30x)
FUTURES_MARGIN_TYPE = os.getenv("FUTURES_MARGIN_TYPE", "CROSSED")  # –†–µ–∂–∏–º –º–∞—Ä–∂–∏: CROSS –∏–ª–∏ ISOLATED (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é CROSS)
PRICE_TOLERANCE_PERCENT = float(os.getenv("PRICE_TOLERANCE_PERCENT", "1.0"))  # 1% –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏
MULTIPLE_ORDERS = os.getenv("MULTIPLE_ORDERS", "false").lower() == "true"  # –†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä
MAX_CONCURRENT_ORDERS = int(os.getenv("MAX_CONCURRENT_ORDERS", "3"))  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç

# --- Telegram Configuration ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_TOKEN", "7948515996:AAHg9Tnvex3xyRc0rjnMscYTbHM1EUU5-d4")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "-1002693639183")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
TELEGRAM_PARSE_MODE = "Markdown"  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
TELEGRAM_DISABLE_NOTIFICATION = False  # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏

# --- Data Validation ---
VALID_TIMEFRAMES = {'15m', '1h', '4h', '1d'}  # For input validation
MAX_PAIRS_PER_REQUEST = 10  # Safety limit

# Retry configuration
MAX_API_RETRIES = 3  # Total attempts (initial + retries)
RETRY_DELAY_SEC = 1  # Seconds between tries

# ========================================
# TICKER MONITOR CONFIGURATION  
# ========================================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
TICKER_DELAY = 2.0              # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∏–∫–µ—Ä–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)
MAX_WORKERS = 1                 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
PROCESSING_TIMEOUT = 1800        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ (—Å–µ–∫—É–Ω–¥—ã)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
SCHEDULE_INTERVAL_MINUTES = 15  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∏–Ω—É—Ç—ã)
SCHEDULE_AT_SECOND = ":00"      # –ù–∞ –∫–∞–∫–æ–π —Å–µ–∫—É–Ω–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç—å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
DEFAULT_TICKERS_FILE = 'tickers.txt'  # –§–∞–π–ª —Å —Ç–∏–∫–µ—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
BATCH_LOG_FREQUENCY = 50        # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ N –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–∏–∫–µ—Ä–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ —à—É–º–∞)