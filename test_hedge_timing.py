#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è hedge scheduler
"""

import time
import datetime
import math
import os

def test_timing_algorithm():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    timezone = 'Europe/Kyiv'
    os.environ['TZ'] = timezone
    time.tzset()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    now = time.time()
    current_dt = datetime.datetime.fromtimestamp(now)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É–Ω–æ—á—å —Å–µ–≥–æ–¥–Ω—è
    midnight_dt = current_dt.replace(hour=0, minute=0, second=0, microsecond=0)
    midnight = midnight_dt.timestamp()
    
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_dt.strftime('%Y-%m-%d %H:%M:%S %Z')}")
    print(f"üåô –ü–æ–ª–Ω–æ—á—å —Å–µ–≥–æ–¥–Ω—è: {midnight_dt.strftime('%Y-%m-%d %H:%M:%S %Z')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    intervals = [15, 30, 60]  # –º–∏–Ω—É—Ç—ã
    
    for interval_min in intervals:
        step = interval_min * 60  # —Å–µ–∫—É–Ω–¥—ã
        elapsed = now - midnight
        
        print(f"\nüìä –¢–µ—Å—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {interval_min} –º–∏–Ω—É—Ç:")
        print(f"   –ü—Ä–æ—à–ª–æ —Å –ø–æ–ª—É–Ω–æ—á–∏: {elapsed/3600:.2f} —á–∞—Å–æ–≤ ({int(elapsed)} —Å–µ–∫—É–Ω–¥)")
        
        if elapsed % step == 0:
            next_tick = now
            print(f"   üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—Ä–∞—Ç–Ω—É—é —Ç–æ—á–∫—É - –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!")
        else:
            next_tick = midnight + math.ceil(elapsed / step) * step
        
        next_dt = datetime.datetime.fromtimestamp(next_tick)
        wait_seconds = next_tick - now
        
        print(f"   ‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {next_dt.strftime('%H:%M:%S')}")
        print(f"   ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ: {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ ({wait_seconds/60:.1f} –º–∏–Ω—É—Ç)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        print(f"   üìÖ –°–ª–µ–¥—É—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        for i in range(1, 4):
            future_tick = next_tick + (i * step)
            future_dt = datetime.datetime.fromtimestamp(future_tick)
            print(f"      {i+1}. {future_dt.strftime('%H:%M:%S')}")

if __name__ == "__main__":
    test_timing_algorithm()