#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É orders_watchdog_state.json –∏ –ë–î
"""

import json
import sqlite3
from datetime import datetime
from typing import Dict, List, Set
from pathlib import Path

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
    return sqlite3.connect('signals.db', timeout=10)

def load_json_orders() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('orders_watchdog_state.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data.get('watched_orders', [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
        return []

def load_db_orders() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT symbol, order_id, side, position_side, quantity, price, 
                   signal_type, stop_loss, take_profit, status, created_at, 
                   filled_at, sl_order_id, tp_order_id, timestamp
            FROM watchdog_orders
        """)
        
        columns = [desc[0] for desc in cursor.description]
        rows = cursor.fetchall()
        conn.close()
        
        return [dict(zip(columns, row)) for row in rows]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î: {e}")
        return []

def compare_orders(json_orders: List[Dict], db_orders: List[Dict]) -> Dict:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –º–µ–∂–¥—É JSON –∏ –ë–î"""
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ order_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    json_ids = {order.get('order_id') for order in json_orders if order.get('order_id')}
    db_ids = {order.get('order_id') for order in db_orders if order.get('order_id')}
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è
    only_in_json = json_ids - db_ids  # –ï—Å—Ç—å –≤ JSON, –Ω–µ—Ç –≤ –ë–î
    only_in_db = db_ids - json_ids    # –ï—Å—Ç—å –≤ –ë–î, –Ω–µ—Ç –≤ JSON
    in_both = json_ids & db_ids       # –ï—Å—Ç—å –≤ –æ–±–æ–∏—Ö
    
    return {
        'only_in_json': only_in_json,
        'only_in_db': only_in_db,
        'in_both': in_both,
        'total_json': len(json_ids),
        'total_db': len(db_ids)
    }

def sync_missing_to_db(json_orders: List[Dict], missing_ids: Set[str]):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î"""
    if not missing_ids:
        return 0
    
    conn = get_db_connection()
    cursor = conn.cursor()
    added_count = 0
    
    for order in json_orders:
        order_id = order.get('order_id')
        if order_id in missing_ids:
            try:
                cursor.execute("""
                    INSERT INTO watchdog_orders 
                    (symbol, order_id, side, position_side, quantity, price, 
                     signal_type, stop_loss, take_profit, status, created_at, 
                     filled_at, sl_order_id, tp_order_id, timestamp)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    order.get('symbol'),
                    order.get('order_id'),
                    order.get('side'),
                    order.get('position_side'),
                    order.get('quantity'),
                    order.get('price'),
                    order.get('signal_type'),
                    order.get('stop_loss'),
                    order.get('take_profit'),
                    order.get('status'),
                    order.get('created_at'),
                    order.get('filled_at'),
                    order.get('sl_order_id'),
                    order.get('tp_order_id'),
                    order.get('timestamp', datetime.now().isoformat())
                ))
                added_count += 1
                print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î: {order.get('symbol')} | {order_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {order_id}: {e}")
    
    conn.commit()
    conn.close()
    return added_count

def update_json_from_db(json_orders: List[Dict], db_orders: List[Dict], missing_ids: Set[str]) -> List[Dict]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    if not missing_ids:
        return json_orders
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ë–î –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    db_orders_dict = {order.get('order_id'): order for order in db_orders}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ JSON
    updated_orders = json_orders.copy()
    added_count = 0
    
    for order_id in missing_ids:
        if order_id in db_orders_dict:
            db_order = db_orders_dict[order_id]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç JSON
            json_order = {
                'symbol': db_order.get('symbol'),
                'order_id': db_order.get('order_id'),
                'side': db_order.get('side'),
                'position_side': db_order.get('position_side'),
                'quantity': db_order.get('quantity'),
                'price': db_order.get('price'),
                'signal_type': db_order.get('signal_type'),
                'stop_loss': db_order.get('stop_loss'),
                'take_profit': db_order.get('take_profit'),
                'status': db_order.get('status'),
                'created_at': db_order.get('created_at'),
                'filled_at': db_order.get('filled_at'),
                'sl_order_id': db_order.get('sl_order_id'),
                'tp_order_id': db_order.get('tp_order_id'),
                'sl_tp_attempts': 0,  # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ë–î
                'expires_at': None,
                'source_timeframe': None,
                'trailing_triggered': False
            }
            
            updated_orders.append(json_order)
            added_count += 1
            print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤ JSON: {db_order.get('symbol')} | {order_id}")
    
    return updated_orders

def save_updated_json(orders: List[Dict]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª"""
    try:
        data = {
            'timestamp': datetime.now().isoformat(),
            'watched_orders': orders
        }
        
        with open('orders_watchdog_state.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: {e}")
        return False

def show_sync_report(comparison: Dict, added_to_db: int, added_to_json: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüìä –û–¢–ß–ï–¢ –û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
    print("=" * 40)
    print(f"üìÅ JSON –æ—Ä–¥–µ—Ä–æ–≤: {comparison['total_json']}")
    print(f"üóÑÔ∏è  –ë–î –æ—Ä–¥–µ—Ä–æ–≤: {comparison['total_db']}")
    print(f"üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(comparison['in_both'])}")
    print(f"üìÅ‚û°Ô∏èüóÑÔ∏è  –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {added_to_db}")
    print(f"üóÑÔ∏è‚û°Ô∏èüìÅ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ JSON: {added_to_json}")
    
    if comparison['only_in_json']:
        print(f"\nüìÅ –¢–æ–ª—å–∫–æ –≤ JSON ({len(comparison['only_in_json'])}):")
        for order_id in list(comparison['only_in_json'])[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   - {order_id}")
        if len(comparison['only_in_json']) > 5:
            print(f"   ... –∏ –µ—â–µ {len(comparison['only_in_json']) - 5}")
    
    if comparison['only_in_db']:
        print(f"\nüóÑÔ∏è  –¢–æ–ª—å–∫–æ –≤ –ë–î ({len(comparison['only_in_db'])}):")
        for order_id in list(comparison['only_in_db'])[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   - {order_id}")
        if len(comparison['only_in_db']) > 5:
            print(f"   ... –∏ –µ—â–µ {len(comparison['only_in_db']) - 5}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Æ JSON ‚Üî –ë–î")
    print("=" * 50)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    json_orders = load_json_orders()
    db_orders = load_db_orders()
    
    if not json_orders and not db_orders:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return
    
    # 2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è...")
    comparison = compare_orders(json_orders, db_orders)
    
    # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î
    added_to_db = sync_missing_to_db(json_orders, comparison['only_in_json'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ JSON
    updated_json_orders = update_json_from_db(json_orders, db_orders, comparison['only_in_db'])
    added_to_json = len(comparison['only_in_db'])
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if added_to_json > 0:
        save_updated_json(updated_json_orders)
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    show_sync_report(comparison, added_to_db, added_to_json)
    
    print(f"\n‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")

if __name__ == "__main__":
    main()
