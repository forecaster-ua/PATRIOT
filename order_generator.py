"""
Order Generator - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
===============================================

–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ
–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è Binance  
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
4. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤

Author: HEDGER
Version: 1.0
"""

import uuid
from typing import Dict, List, Set, Optional
from datetime import datetime, timezone

# Local imports
from telegram_bot import telegram_bot
from config import TIMEFRAMES
from utils import logger

try:
    from database import db
    DATABASE_AVAILABLE = True
except ImportError:
    DATABASE_AVAILABLE = False
    logger.warning("Database module not available - order saving disabled")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è binance_factory
binance_factory_instance = None

def set_binance_factory(factory_instance):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä binance_factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
    global binance_factory_instance
    binance_factory_instance = factory_instance
    logger.info("Binance Factory instance set for order processing")


class OrderGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    1. –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram
    2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –±–∏—Ä–∂
    3. –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        # –ü–æ—Ä—è–¥–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        self.timeframe_hierarchy = {
            '1m': 1, '5m': 2, '15m': 3, '30m': 4,
            '1h': 5, '2h': 6, '4h': 7, '6h': 8, '12h': 9,
            '1d': 10, '3d': 11, '1w': 12
        }
        logger.info("OrderGenerator initialized")

    def create_telegram_alert(self, signal_data: Dict) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            signal_data: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üì± Creating Telegram alert for {signal_data['ticker']}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ
            self._log_signal_details(signal_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message = self._format_telegram_message(signal_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ telegram_bot
            telegram_data = {
                'pair': signal_data['ticker'],
                'timeframe': signal_data['timeframes_str'],
                'signal': signal_data['signal'],
                'current_price': signal_data['current_price'],
                'entry_price': signal_data['entry_price'],
                'stop_loss': signal_data['stop_loss'],
                'take_profit': signal_data['take_profit'],
                'confidence': signal_data['confidence'],
                'dominance_change_percent': signal_data.get('dominance_change_percent', 0),
                'timestamp': signal_data['timestamp']
            }
            
            telegram_bot.send_signal(telegram_data)
            logger.info(f"‚úÖ Telegram alert sent successfully for {signal_data['ticker']}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to send Telegram alert for {signal_data['ticker']}: {str(e)}", exc_info=True)
            return False

    def create_binance_template(self, signal_data: Dict) -> Optional[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –æ—Ä–¥–µ—Ä–∞ –¥–ª—è Binance
        
        Args:
            signal_data: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            
        Returns:
            Optional[Dict]: –®–∞–±–ª–æ–Ω –æ—Ä–¥–µ—Ä–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üìã Creating Binance order template for {signal_data['ticker']}")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å —Å –±–æ–ª—å—à–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            optimal_stop_loss = self._select_stop_loss_from_larger_timeframe(signal_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ä–¥–µ—Ä–∞
            order_id = str(uuid.uuid4())
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
            position_size = self._calculate_position_size(signal_data)
            
            # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –æ—Ä–¥–µ—Ä–∞
            order_template = {
                'order_id': order_id,
                'exchange': 'binance_futures',  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
                'symbol': signal_data['ticker'],
                'side': 'BUY' if signal_data['signal'] == 'LONG' else 'SELL',
                'type': 'MARKET',  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º MARKET –æ—Ä–¥–µ—Ä–∞
                'quantity': position_size,
                'price': signal_data['entry_price'],
                'stop_loss': optimal_stop_loss,
                'take_profit': signal_data['take_profit'],
                'time_in_force': 'GTC',  # Good Till Cancelled
                'status': 'PENDING',
                'signal_data': {
                    'matched_timeframes': signal_data['matched_timeframes'],
                    'confidence': signal_data['confidence'],
                    'timestamp': signal_data['timestamp']
                },
                'created_at': datetime.now(timezone.utc).isoformat(),
                'risk_reward_ratio': self._calculate_risk_reward_ratio(
                    signal_data['entry_price'], 
                    optimal_stop_loss, 
                    signal_data['take_profit'],
                    signal_data['signal']
                ),
                'leverage': 1  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–ª–µ—á–∞
            }
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            if self._validate_order_params(order_template):
                logger.info(f"‚úÖ Binance order template created: {order_id}")
                self._log_order_details(order_template)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
                if DATABASE_AVAILABLE:
                    self._save_order_to_database(order_template)
                    
                return order_template
            else:
                logger.error(f"‚ùå Order validation failed for {signal_data['ticker']}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Failed to create Binance template for {signal_data['ticker']}: {str(e)}", exc_info=True)
            return None

    def _select_stop_loss_from_larger_timeframe(self, signal_data: Dict) -> float:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å —Å –±–æ–ª—å—à–µ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏–∑ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
            
        Returns:
            float: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        """
        matched_timeframes = signal_data['matched_timeframes']
        raw_signals = signal_data['raw_signals']
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö
        largest_tf = None
        largest_tf_rank = 0
        
        for tf in matched_timeframes:
            tf_rank = self.timeframe_hierarchy.get(tf, 0)
            if tf_rank > largest_tf_rank:
                largest_tf_rank = tf_rank
                largest_tf = tf
        
        if largest_tf and largest_tf in raw_signals:
            selected_stop = raw_signals[largest_tf]['stop_loss']
            logger.info(
                f"üéØ Stop-loss selected from larger timeframe {largest_tf}: {selected_stop:.6f}"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            logger.info("üìä Stop-loss comparison across timeframes:")
            for tf in sorted(matched_timeframes):
                if tf in raw_signals:
                    stop_value = raw_signals[tf]['stop_loss']
                    is_selected = tf == largest_tf
                    status = "üéØ SELECTED" if is_selected else "  "
                    logger.info(f"  {status} {tf}: {stop_value:.6f}")
            
            return selected_stop
        else:
            # Fallback –∫ —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            logger.warning(f"‚ö†Ô∏è Could not determine larger timeframe, using averaged stop-loss")
            return signal_data['stop_loss']

    def _calculate_position_size(self, signal_data: Dict) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            
        Returns:
            float: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        """
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
        base_position_size = 0.01
        
        # –ú–æ–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å confidence –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
        confidence_multiplier = min(signal_data['confidence'] * 1.5, 2.0)
        
        position_size = base_position_size * confidence_multiplier
        
        logger.debug(
            f"Position size calculation: base={base_position_size}, "
            f"confidence={signal_data['confidence']:.3f}, "
            f"multiplier={confidence_multiplier:.3f}, "
            f"final={position_size:.6f}"
        )
        
        return round(position_size, 6)

    def _calculate_risk_reward_ratio(self, entry_price: float, stop_loss: float, 
                                   take_profit: float, signal_direction: str) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        
        Args:
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            signal_direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (LONG/SHORT)
            
        Returns:
            float: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        """
        try:
            if signal_direction == 'LONG':
                risk = abs(entry_price - stop_loss)
                reward = abs(take_profit - entry_price)
            else:  # SHORT
                risk = abs(stop_loss - entry_price)
                reward = abs(entry_price - take_profit)
            
            if risk > 0:
                ratio = reward / risk
                logger.debug(f"Risk/Reward calculation: Risk={risk:.6f}, Reward={reward:.6f}, Ratio={ratio:.2f}")
                return round(ratio, 2)
            else:
                logger.warning("Risk is zero - invalid stop loss configuration")
                return 0.0
                
        except Exception as e:
            logger.error(f"Error calculating risk/reward ratio: {str(e)}")
            return 0.0

    def _validate_order_params(self, order_template: Dict) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        
        Args:
            order_template: –®–∞–±–ª–æ–Ω –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        required_fields = ['symbol', 'side', 'quantity', 'price', 'stop_loss', 'take_profit']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in order_template or order_template[field] is None:
                logger.error(f"Missing required field in order: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        numeric_fields = ['quantity', 'price', 'stop_loss', 'take_profit']
        for field in numeric_fields:
            if order_template[field] <= 0:
                logger.error(f"Invalid value for {field}: {order_template[field]}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if order_template['side'] not in ['BUY', 'SELL']:
            logger.error(f"Invalid side: {order_template['side']}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        entry = order_template['price']
        stop = order_template['stop_loss']
        target = order_template['take_profit']
        
        if order_template['side'] == 'BUY':  # LONG
            if stop >= entry:
                logger.error(f"Invalid LONG stop-loss: {stop} >= {entry}")
                return False
            if target <= entry:
                logger.error(f"Invalid LONG take-profit: {target} <= {entry}")
                return False
        else:  # SELL (SHORT)
            if stop <= entry:
                logger.error(f"Invalid SHORT stop-loss: {stop} <= {entry}")
                return False
            if target >= entry:
                logger.error(f"Invalid SHORT take-profit: {target} >= {entry}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        rr_ratio = order_template.get('risk_reward_ratio', 0)
        if rr_ratio < 1.0:
            logger.warning(f"Poor risk/reward ratio: {rr_ratio:.2f} (should be >= 1.0)")
        
        logger.debug(f"‚úÖ Order validation passed for {order_template['symbol']}")
        return True

    def _log_signal_details(self, signal_data: Dict) -> None:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–≥–Ω–∞–ª–µ"""
        logger.info(f"üìä Signal Details for {signal_data['ticker']}:")
        logger.info(f"  Direction: {signal_data['signal']}")
        logger.info(f"  Matched Timeframes: {signal_data['timeframes_str']}")
        logger.info(f"  Current Price: {signal_data['current_price']:.6f}")
        logger.info(f"  Entry Price: {signal_data['entry_price']:.6f}")
        logger.info(f"  Stop Loss: {signal_data['stop_loss']:.6f}")
        logger.info(f"  Take Profit: {signal_data['take_profit']:.6f}")
        logger.info(f"  Confidence: {signal_data['confidence']:.3f}")
        logger.info(f"  Dominance Change: {signal_data.get('dominance_change_percent', 0):.2f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        if 'raw_signals' in signal_data:
            logger.info("üìã Individual Timeframe Data:")
            for tf in sorted(signal_data['matched_timeframes']):
                if tf in signal_data['raw_signals']:
                    tf_data = signal_data['raw_signals'][tf]
                    logger.info(
                        f"  {tf}: {tf_data['signal']} | "
                        f"Entry: {tf_data['entry_price']:.6f} | "
                        f"Stop: {tf_data['stop_loss']:.6f} | "
                        f"Target: {tf_data['take_profit']:.6f} | "
                        f"Confidence: {tf_data['confidence']:.3f}"
                    )

    def _log_order_details(self, order_template: Dict) -> None:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ"""
        logger.info(f"üìã Order Template Details:")
        logger.info(f"  Order ID: {order_template['order_id']}")
        logger.info(f"  Symbol: {order_template['symbol']}")
        logger.info(f"  Side: {order_template['side']}")
        logger.info(f"  Quantity: {order_template['quantity']}")
        logger.info(f"  Entry Price: {order_template['price']:.6f}")
        logger.info(f"  Stop Loss: {order_template['stop_loss']:.6f}")
        logger.info(f"  Take Profit: {order_template['take_profit']:.6f}")
        logger.info(f"  Risk/Reward Ratio: {order_template['risk_reward_ratio']:.2f}")
        logger.info(f"  Timeframes: {', '.join(order_template['signal_data']['matched_timeframes'])}")

    def _format_telegram_message(self, signal_data: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rr_ratio = self._calculate_risk_reward_ratio(
            signal_data['entry_price'],
            signal_data['stop_loss'], 
            signal_data['take_profit'],
            signal_data['signal']
        )
        
        message = (
            f"üöÄ *{signal_data['ticker']}* ({signal_data['timeframes_str']})\n"
            f"üìç Direction: *{signal_data['signal']}*\n"
            f"üí∞ Current: `{signal_data['current_price']:.6f}`\n"
            f"üî¢ Entry: `{signal_data['entry_price']:.6f}`\n"
            f"üõë Stop: `{signal_data['stop_loss']:.6f}`\n"
            f"üéØ Target: `{signal_data['take_profit']:.6f}`\n"
            f"üìä Confidence: {signal_data['confidence']*100:.1f}%\n"
            f"‚öñÔ∏è R/R Ratio: {rr_ratio:.2f}\n"
            f"üîç Dominance: {signal_data.get('dominance_change_percent', 0):.2f}%\n"
            f"‚è±Ô∏è {signal_data['timestamp']}"
        )
        
        return message

    def _save_order_to_database(self, order_template: Dict) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        
        Args:
            order_template: –®–∞–±–ª–æ–Ω –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"üíæ Order template saved to database: {order_template['order_id']}")
            return True
        except Exception as e:
            logger.error(f"Failed to save order to database: {str(e)}")
            return False

    def process_signal(self, signal_data: Dict) -> bool:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ä–¥–µ—Ä–∞
        
        Args:
            signal_data: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        logger.info(f"üîÑ Processing signal for {signal_data['ticker']}")
        
        success = True
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        if not self.create_telegram_alert(signal_data):
            logger.error(f"Failed to send Telegram alert for {signal_data['ticker']}")
            success = False
        
        # 2. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –æ—Ä–¥–µ—Ä–∞ –¥–ª—è Binance
        order_template = self.create_binance_template(signal_data)
        if not order_template:
            logger.error(f"Failed to create Binance template for {signal_data['ticker']}")
            success = False
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ binance_factory (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω)
        if binance_factory_instance and order_template:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç binance_factory
                factory_order_data = {
                    'symbol': signal_data['ticker'],
                    'side': 'BUY' if signal_data['signal'] == 'LONG' else 'SELL',
                    'price': signal_data['entry_price'],  # entry_price –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    'tolerance_percent': 1.0,  # –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ %
                    'stop_loss': signal_data['stop_loss'],
                    'take_profit': signal_data['take_profit'],
                    'confidence': signal_data['confidence'],
                    'timeframes': signal_data['timeframes_str'],
                    'order_id': order_template['order_id']
                }
                
                binance_factory_instance.add_order_to_queue(factory_order_data)
                logger.info(f"üì¶ Order sent to Binance Factory: {signal_data['ticker']}")
                
            except Exception as e:
                logger.error(f"Failed to send order to Binance Factory: {str(e)}")
                success = False
        
        if success:
            logger.info(f"‚úÖ Signal processing completed successfully for {signal_data['ticker']}")
        else:
            logger.error(f"‚ùå Signal processing failed for {signal_data['ticker']}")
            
        return success


# Singleton instance for application-wide use
order_generator = OrderGenerator()


# Utility function for external use
def process_trading_signal(signal_data: Dict) -> bool:
    """
    Convenience function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    
    Args:
        signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
    """
    return order_generator.process_signal(signal_data)