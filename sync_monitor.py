#!/usr/bin/env python3
"""
Sync Monitor - –£—Ç–∏–ª–∏—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
===============================================

–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É ticker_monitor –∏ orders_watchdog
- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python sync_monitor.py [--continuous] [--interval SECONDS] [--fix-conflicts]

--continuous    : –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
--interval N    : –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
--fix-conflicts : –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

Author: HEDGER  
Version: 1.0 - Synchronization Monitor
"""

import sys
import time
import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

try:
    from orders_synchronizer import OrdersSynchronizer
    from utils import logger
    SYNC_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("‚ùå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ orders_synchronizer.py –∏ utils.py –¥–æ—Å—Ç—É–ø–Ω—ã")
    sys.exit(1)


class SyncMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.sync = OrdersSynchronizer()
        
    def display_current_status(self) -> Dict[str, Any]:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("=" * 80)
        print("üîÑ –ú–û–ù–ò–¢–û–† –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò PATRIOT TRADING SYSTEM")
        print("=" * 80)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        report = self.sync.get_synchronization_report()
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        self.sync.print_sync_report(report)
        
        return report
    
    def check_files_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        files_status = {
            'orders_watchdog_state.json': {'exists': False, 'size': 0, 'modified': None},
            'orders_watchdog_requests.json': {'exists': False, 'size': 0, 'modified': None},
            'orders_watchdog_response.json': {'exists': False, 'size': 0, 'modified': None},
            'tickers.txt': {'exists': False, 'size': 0, 'modified': None},
            'signals.db': {'exists': False, 'size': 0, 'modified': None}
        }
        
        for filename, info in files_status.items():
            filepath = Path(filename)
            if filepath.exists():
                info['exists'] = True
                info['size'] = filepath.stat().st_size
                info['modified'] = datetime.fromtimestamp(filepath.stat().st_mtime).strftime('%H:%M:%S')
        
        print("\nüìÅ –°–û–°–¢–û–Ø–ù–ò–ï –§–ê–ô–õ–û–í –°–ò–°–¢–ï–ú–´:")
        print("-" * 50)
        for filename, info in files_status.items():
            status = "‚úÖ" if info['exists'] else "‚ùå"
            size_str = f"{info['size']} bytes" if info['exists'] else "N/A"
            modified_str = info['modified'] if info['exists'] else "N/A"
            print(f"{status} {filename}: {size_str} (–∏–∑–º–µ–Ω–µ–Ω: {modified_str})")
        
        return files_status
    
    def test_communication(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å Orders Watchdog"""
        print(f"\nüîß –¢–ï–°–¢ –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò –° ORDERS WATCHDOG:")
        print("-" * 50)
        
        test_results = {
            'watchdog_running': False,
            'response_time': None,
            'watched_symbols_count': 0,
            'communication_ok': False
        }
        
        try:
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ watchdog
            watchdog_running = self.sync.is_watchdog_running()
            response_time = time.time() - start_time
            
            test_results['watchdog_running'] = watchdog_running
            test_results['response_time'] = response_time
            
            if watchdog_running:
                print(f"‚úÖ Orders Watchdog –æ—Ç–≤–µ—á–∞–µ—Ç ({response_time:.2f}s)")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–∞—Ö
                watched_symbols = self.sync.get_watched_symbols()
                test_results['watched_symbols_count'] = len(watched_symbols)
                test_results['communication_ok'] = True
                
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(watched_symbols)} —Å–∏–º–≤–æ–ª–∞—Ö")
                
            else:
                print(f"‚ùå Orders Watchdog –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç: {response_time:.2f}s)")
                print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ orders_watchdog.py")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {e}")
            test_results['error'] = str(e)
        
        return test_results
    
    def run_conflict_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        print(f"\nüß™ –¢–ï–°–¢ –ü–†–û–í–ï–†–ö–ò –ö–û–ù–§–õ–ò–ö–¢–û–í:")
        print("-" * 50)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_orders = [
            {'symbol': 'BTCUSDT', 'side': 'BUY', 'quantity': 0.001, 'order_type': 'MAIN'},
            {'symbol': 'ETHUSDT', 'side': 'SELL', 'quantity': 0.01, 'order_type': 'MAIN'},
            {'symbol': 'ADAUSDT', 'side': 'BUY', 'quantity': 100.0, 'order_type': 'MAIN'}
        ]
        
        conflict_results = {}
        
        for test_order in test_orders:
            symbol = test_order['symbol']
            try:
                safe_to_proceed, conflict_info = self.sync.check_order_conflicts([test_order])
                
                conflict_results[symbol] = {
                    'safe_to_proceed': safe_to_proceed,
                    'conflicts_count': len(conflict_info.get('conflicts', [])),
                    'has_warnings': len([c for c in conflict_info.get('conflicts', []) if c.get('severity') == 'WARNING']) > 0,
                    'has_errors': len([c for c in conflict_info.get('conflicts', []) if c.get('severity') == 'ERROR']) > 0
                }
                
                status = "‚úÖ OK" if safe_to_proceed else "‚ùå –ö–û–ù–§–õ–ò–ö–¢"
                conflicts_count = conflict_results[symbol]['conflicts_count']
                print(f"{status} {symbol}: {conflicts_count} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
                
            except Exception as e:
                print(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
                conflict_results[symbol] = {'error': str(e)}
        
        return conflict_results
    
    def continuous_monitoring(self, interval: int = 30) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}s)")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...\n")
        
        try:
            cycle = 0
            while True:
                cycle += 1
                print(f"\n{'='*20} –¶–ò–ö–õ #{cycle} - {datetime.now().strftime('%H:%M:%S')} {'='*20}")
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
                report = self.display_current_status()
                
                # –ö–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if cycle % 5 == 0:
                    self.test_communication()
                    self.check_files_status()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                issues = report.get('synchronization_issues', [])
                if issues:
                    print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û {len(issues)} –ü–†–û–ë–õ–ï–ú:")
                    for issue in issues:
                        print(f"  {issue}")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                print(f"\nüí§ –û–∂–∏–¥–∞–Ω–∏–µ {interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print(f"\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def attempt_fix_conflicts(self) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        print(f"\nüîß –ü–û–ü–´–¢–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ù–§–õ–ò–ö–¢–û–í:")
        print("-" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç
            report = self.sync.get_synchronization_report()
            
            if not report.get('watchdog_running', False):
                print("‚ùå Orders Watchdog –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
                return False
            
            issues = report.get('synchronization_issues', [])
            if not issues:
                print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
            for i, issue in enumerate(issues, 1):
                print(f"  {i}. {issue}")
            
            # –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            print("\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ ticker_monitor.py –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            print("  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ orders_cleaner.py –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ logs/ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {e}")
            return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ PATRIOT Trading System')
    parser.add_argument('--continuous', '-c', action='store_true',
                       help='–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    parser.add_argument('--interval', '-i', type=int, default=30,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    parser.add_argument('--fix-conflicts', '-f', action='store_true',
                       help='–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã')
    parser.add_argument('--test-communication', '-t', action='store_true',
                       help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å Orders Watchdog')
    
    args = parser.parse_args()
    
    try:
        monitor = SyncMonitor()
        
        if args.test_communication:
            # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
            monitor.test_communication()
            monitor.run_conflict_test()
        elif args.continuous:
            # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitor.continuous_monitoring(args.interval)
        else:
            # –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            report = monitor.display_current_status()
            monitor.check_files_status()
            comm_test = monitor.test_communication()
            conflict_test = monitor.run_conflict_test()
            
            if args.fix_conflicts:
                monitor.attempt_fix_conflicts()
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            print(f"\n{'='*80}")
            print("üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
            print("=" * 80)
            
            watchdog_status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if comm_test.get('communication_ok') else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            issues_count = len(report.get('synchronization_issues', []))
            symbols_count = len(report.get('watched_symbols', {}))
            
            print(f"üêï Orders Watchdog: {watchdog_status}")
            print(f"üìä –°–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º: {symbols_count}")
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {issues_count}")
            
            if issues_count == 0 and comm_test.get('communication_ok'):
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            
            print("=" * 80)
        
    except KeyboardInterrupt:
        print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
