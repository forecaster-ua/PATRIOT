#!/usr/bin/env python3
"""
Unified Synchronization System - –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
================================================================

–ó–∞–º–µ–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:
- state_recovery.py
- orders_synchronizer.py  
- sync_check.py
- sync_monitor.py

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Å –±–∏—Ä–∂–µ–π
3. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö/–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
4. –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π
5. Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö

Author: HEDGER
Version: 2.0 - Unified State Management
"""

import json
import time
import os
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set, Tuple
from dataclasses import dataclass, asdict
from utils import logger
from config import BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET

# Binance imports
try:
    from binance.client import Client
    from binance.exceptions import BinanceAPIException
    BINANCE_AVAILABLE = True
except ImportError:
    logger.error("‚ùå python-binance not installed")
    BINANCE_AVAILABLE = False
    Client = None
    BinanceAPIException = Exception

# Telegram notifications
try:
    from telegram_bot import telegram_bot
    TELEGRAM_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è Telegram bot not available")
    TELEGRAM_AVAILABLE = False
    telegram_bot = None


@dataclass
class SyncAction:
    """–î–µ–π—Å—Ç–≤–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    action_type: str  # 'remove_order', 'close_position', 'cancel_order', 'update_state'
    symbol: str
    order_id: Optional[str]
    description: str
    details: Optional[Dict] = None
    timestamp: Optional[datetime] = None


@dataclass
class SyncResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    timestamp: datetime
    total_checked: int
    actions_taken: int
    successful_actions: int
    failed_actions: int
    actions: List[SyncAction]
    warnings: List[str]
    errors: List[str]
    is_synchronized: bool = True


class UnifiedSynchronizer:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.client: Optional[Client] = None
        self.watchdog_state_file = Path('orders_watchdog_state.json')
        self.backup_state_file = Path('orders_watchdog_state_backup.json')
        self.sync_log_file = Path('sync_log.json')
        
        self._init_binance_client()
    
    def _init_binance_client(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        if not BINANCE_AVAILABLE or Client is None:
            logger.error("‚ùå Binance library not available")
            return
            
        if not BINANCE_API_KEY or not BINANCE_API_SECRET:
            logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        try:
            logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance ({'TESTNET' if BINANCE_TESTNET else 'MAINNET'})...")
            self.client = Client(
                api_key=BINANCE_API_KEY,
                api_secret=BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.client.futures_account()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            self.client = None
    
    def _load_watchdog_state(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Orders Watchdog"""
        try:
            if not self.watchdog_state_file.exists():
                logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è Orders Watchdog –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {'watched_orders': [], 'symbols': {}, 'last_update': None}
            
            with open(self.watchdog_state_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            orders_count = len(data.get('watched_orders', []))
            symbols_count = len(data.get('symbols', {}))
            
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {orders_count} –æ—Ä–¥–µ—Ä–æ–≤, {symbols_count} —Å–∏–º–≤–æ–ª–æ–≤")
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {'watched_orders': [], 'symbols': {}, 'last_update': None}
    
    def _save_watchdog_state(self, state_data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if self.watchdog_state_file.exists():
                with open(self.watchdog_state_file, 'r', encoding='utf-8') as src:
                    with open(self.backup_state_file, 'w', encoding='utf-8') as dst:
                        dst.write(src.read())
            
            # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
            state_data['last_update'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            with open(self.watchdog_state_file, 'w', encoding='utf-8') as f:
                json.dump(state_data, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ Orders Watchdog –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return False
    
    def _get_exchange_orders(self) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏"""
        if not self.client:
            return {}
        
        try:
            open_orders = self.client.futures_get_open_orders()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            orders_by_symbol = {}
            for order in open_orders:
                symbol = order['symbol']
                if symbol not in orders_by_symbol:
                    orders_by_symbol[symbol] = []
                orders_by_symbol[symbol].append(order)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(open_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏ ({len(orders_by_symbol)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return orders_by_symbol
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏: {e}")
            return {}
    
    def _get_exchange_positions(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏"""
        if not self.client:
            return {}
        
        try:
            positions = self.client.futures_position_information()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            active_positions = {}
            for pos in positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    active_positions[pos['symbol']] = pos
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏")
            return active_positions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å –±–∏—Ä–∂–∏: {e}")
            return {}
    
    def _check_order_history(self, symbol: str, order_id: str, hours_back: int = 24) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        if not self.client:
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
            end_time = int(time.time() * 1000)
            start_time = end_time - (hours_back * 60 * 60 * 1000)
            
            order_history = self.client.futures_get_all_orders(
                symbol=symbol,
                orderId=int(order_id),
                startTime=start_time,
                endTime=end_time,
                limit=1
            )
            
            if order_history:
                return order_history[0]
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
        
        return None
    
    def _analyze_order_fate(self, local_order: Dict, exchange_orders: Dict[str, List], exchange_positions: Dict[str, Dict]) -> Optional[SyncAction]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É–¥—å–±—É –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        symbol = local_order.get('symbol')
        order_id = local_order.get('order_id')
        order_type = local_order.get('order_type', 'UNKNOWN')
        
        if not symbol or not order_id:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–∞
        order_history = self._check_order_history(symbol, order_id)
        
        if order_history:
            status = order_history.get('status', 'UNKNOWN')
            
            if status == 'FILLED':
                # –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω
                if symbol in exchange_positions:
                    return SyncAction(
                        action_type='remove_order',
                        symbol=symbol,
                        order_id=order_id,
                        description=f"{order_type} –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω - –ø–æ–∑–∏—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞",
                        details={'status': 'FILLED', 'position_exists': True},
                        timestamp=datetime.now()
                    )
                else:
                    return SyncAction(
                        action_type='close_position',
                        symbol=symbol,
                        order_id=order_id,
                        description=f"{order_type} –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞",
                        details={'status': 'FILLED', 'position_closed': True},
                        timestamp=datetime.now()
                    )
            
            elif status in ['CANCELED', 'REJECTED', 'EXPIRED']:
                return SyncAction(
                    action_type='remove_order',
                    symbol=symbol,
                    order_id=order_id,
                    description=f"{order_type} –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω ({status})",
                    details={'status': status},
                    timestamp=datetime.now()
                )
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, –Ω–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
        return SyncAction(
            action_type='remove_order',
            symbol=symbol,
            order_id=order_id,
            description=f"{order_type} –æ—Ä–¥–µ—Ä –∏—Å—á–µ–∑ —Å –±–∏—Ä–∂–∏ (–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)",
            details={'status': 'MISSING'},
            timestamp=datetime.now()
        )
    
    def synchronize_state(self, send_telegram: bool = True) -> SyncResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            send_telegram: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        result = SyncResult(
            timestamp=datetime.now(),
            total_checked=0,
            actions_taken=0,
            successful_actions=0,
            failed_actions=0,
            actions=[],
            warnings=[],
            errors=[]
        )
        
        if not self.client:
            result.errors.append("Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            result.is_synchronized = False
            return result
        
        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            watchdog_state = self._load_watchdog_state()
            local_orders = watchdog_state.get('watched_orders', [])
            result.total_checked = len(local_orders)
            
            if not local_orders:
                logger.info("‚úÖ –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return result
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            exchange_orders = self._get_exchange_orders()
            exchange_positions = self._get_exchange_positions()
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
            orders_to_remove = []
            
            for local_order in local_orders:
                symbol = local_order.get('symbol')
                order_id = local_order.get('order_id')
                
                if not symbol or not order_id:
                    result.warnings.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {local_order}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
                exchange_symbol_orders = exchange_orders.get(symbol, [])
                order_exists = any(str(order['orderId']) == str(order_id) for order in exchange_symbol_orders)
                
                if not order_exists:
                    # –û—Ä–¥–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É
                    action = self._analyze_order_fate(local_order, exchange_orders, exchange_positions)
                    if action:
                        result.actions.append(action)
                        orders_to_remove.append(local_order)
                        result.actions_taken += 1
            
            # 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if orders_to_remove:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤
                updated_orders = [order for order in local_orders if order not in orders_to_remove]
                watchdog_state['watched_orders'] = updated_orders
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
                symbols_data = {}
                for order in updated_orders:
                    symbol = order.get('symbol')
                    if symbol:
                        if symbol not in symbols_data:
                            symbols_data[symbol] = {
                                'orders': [], 
                                'has_main': False, 
                                'has_sl': False, 
                                'has_tp': False,
                                'main_order_filled': False
                            }
                        
                        symbols_data[symbol]['orders'].append(order)
                        
                        order_type = order.get('order_type', '')
                        if order_type == 'MAIN':
                            symbols_data[symbol]['has_main'] = True
                            symbols_data[symbol]['main_order_filled'] = order.get('filled', False)
                        elif order_type == 'SL':
                            symbols_data[symbol]['has_sl'] = True
                        elif order_type == 'TP':
                            symbols_data[symbol]['has_tp'] = True
                
                watchdog_state['symbols'] = symbols_data
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if self._save_watchdog_state(watchdog_state):
                    result.successful_actions = len(orders_to_remove)
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —É–¥–∞–ª–µ–Ω–æ {len(orders_to_remove)} –æ—Ä–¥–µ—Ä–æ–≤")
                else:
                    result.failed_actions = len(orders_to_remove)
                    result.errors.append("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            
            # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if send_telegram and TELEGRAM_AVAILABLE and telegram_bot and result.actions_taken > 0:
                self._send_sync_notification(result)
            
            # 6. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._log_sync_result(result)
            
            result.is_synchronized = result.failed_actions == 0
            
            if result.actions_taken > 0:
                logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.successful_actions}/{result.actions_taken} –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
            else:
                logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            result.errors.append(str(e))
            result.is_synchronized = False
        
        return result
    
    def _send_sync_notification(self, result: SyncResult) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
        try:
            if not telegram_bot:
                return
            
            status_emoji = "‚úÖ" if result.is_synchronized else "‚ö†Ô∏è"
            
            message = f"""
{status_emoji} <b>–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø</b> {status_emoji}

‚è∞ <b>–í—Ä–µ–º—è:</b> {result.timestamp.strftime('%H:%M:%S')}
üìä <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤:</b> {result.total_checked}
üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–π:</b> {result.actions_taken}
‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {result.successful_actions}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {result.failed_actions}
"""
            
            if result.actions:
                message += f"\n\n<b>üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>"
                for action in result.actions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
                    action_emoji = {
                        'remove_order': 'üóëÔ∏è',
                        'close_position': 'üîí',
                        'cancel_order': '‚ùå',
                        'update_state': 'üìù'
                    }.get(action.action_type, 'üîß')
                    
                    order_display = f"#{action.order_id}" if action.order_id else ""
                    message += f"\n{action_emoji} {action.symbol} {order_display}: {action.description}"
                
                if len(result.actions) > 10:
                    message += f"\n... –∏ –µ—â–µ {len(result.actions) - 10} –¥–µ–π—Å—Ç–≤–∏–π"
            
            if result.warnings:
                message += f"\n\n‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>"
                for warning in result.warnings[:5]:
                    message += f"\n‚Ä¢ {warning}"
            
            if result.errors:
                message += f"\n\n‚ùå <b>–û—à–∏–±–∫–∏:</b>"
                for error in result.errors[:3]:
                    message += f"\n‚Ä¢ {error}"
            
            telegram_bot.send_message(message)
            logger.info("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _log_sync_result(self, result: SyncResult) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            log_entry = {
                'timestamp': result.timestamp.isoformat(),
                'total_checked': result.total_checked,
                'actions_taken': result.actions_taken,
                'successful_actions': result.successful_actions,
                'failed_actions': result.failed_actions,
                'is_synchronized': result.is_synchronized,
                'actions': [asdict(action) for action in result.actions],
                'warnings': result.warnings,
                'errors': result.errors
            }
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥
            sync_log = []
            if self.sync_log_file.exists():
                try:
                    with open(self.sync_log_file, 'r', encoding='utf-8') as f:
                        sync_log = json.load(f)
                except:
                    sync_log = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            sync_log.append(log_entry)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            sync_log = sync_log[-100:]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
            with open(self.sync_log_file, 'w', encoding='utf-8') as f:
                json.dump(sync_log, f, indent=2, ensure_ascii=False, default=str)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
    
    def get_sync_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self.sync_log_file.exists():
                return {
                    'last_sync': None,
                    'is_synchronized': False,
                    'needs_sync': True,
                    'total_checked': 0,
                    'actions_taken': 0
                }
            
            with open(self.sync_log_file, 'r', encoding='utf-8') as f:
                sync_log = json.load(f)
            
            if not sync_log:
                return {
                    'last_sync': None,
                    'is_synchronized': False,
                    'needs_sync': True,
                    'total_checked': 0,
                    'actions_taken': 0
                }
            
            last_entry = sync_log[-1]
            last_sync_time = datetime.fromisoformat(last_entry['timestamp'])
            age_minutes = (datetime.now() - last_sync_time).total_seconds() / 60
            
            return {
                'last_sync': last_sync_time.strftime('%Y-%m-%d %H:%M:%S'),
                'age_minutes': int(age_minutes),
                'is_synchronized': last_entry.get('is_synchronized', False),
                'needs_sync': age_minutes > 30 or not last_entry.get('is_synchronized', False),
                'total_checked': last_entry.get('total_checked', 0),
                'actions_taken': last_entry.get('actions_taken', 0),
                'errors': len(last_entry.get('errors', []))
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return {
                'last_sync': None,
                'is_synchronized': False,
                'needs_sync': True,
                'total_checked': 0,
                'actions_taken': 0,
                'error': str(e)
            }
    
    def print_status(self) -> None:
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("=" * 80)
        print("üîÑ –°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 80)
        
        status = self.get_sync_status()
        
        if status.get('last_sync'):
            sync_status = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" if status.get('is_synchronized', False) else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
            
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {status['last_sync']}")
            print(f"‚è±Ô∏è –í–æ–∑—Ä–∞—Å—Ç: {status.get('age_minutes', 0)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {sync_status}")
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {status.get('total_checked', 0)}")
            print(f"üîÑ –î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {status.get('actions_taken', 0)}")
            
            if status.get('errors', 0) > 0:
                print(f"‚ùå –û—à–∏–±–æ–∫: {status['errors']}")
        else:
            print("‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å")
        
        print(f"üîó Binance –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if self.client else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print(f"üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if TELEGRAM_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}")
        
        if status.get('needs_sync', True):
            print("\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")

    def recover_system_state(self) -> 'SystemState':
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã (–º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å orders_watchdog)"""
        return recover_system_state()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
unified_sync = UnifiedSynchronizer()


# ================================
# –ò–ù–¢–ï–†–§–ï–ô–°–´ –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# ================================

@dataclass
class SystemState:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å orders_watchdog"""
    timestamp: datetime
    active_positions: Dict[str, Dict]
    watchdog_orders: Dict[str, Dict] 
    exchange_positions: Dict[str, Dict]
    exchange_orders: Dict[str, List]
    synchronization_issues: List[str]
    recovery_actions: List[str]
    is_synchronized: bool


class OrdersSyncInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, sync_instance=None):
        self._sync_instance = sync_instance
    
    @property
    def unified_sync(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
        if self._sync_instance is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            return globals().get('unified_sync')
        return self._sync_instance
    
    def validate_new_signal(self, symbol: str, side: str, quantity: float) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        return validate_signal_before_execution(symbol, side, quantity)
    
    def get_synchronization_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        sync_instance = self.unified_sync
        if sync_instance is None:
            return {
                'watchdog_running': False,
                'last_sync': None,
                'is_synchronized': False,
                'total_checked': 0,
                'actions_taken': 0,
                'unified_sync': True,
                'error': 'Sync instance not available'
            }
        
        status = sync_instance.get_sync_status()
        return {
            'watchdog_running': True,
            'last_sync': status.get('last_sync'),
            'is_synchronized': status.get('is_synchronized', False),
            'total_checked': status.get('total_checked', 0),
            'actions_taken': status.get('actions_taken', 0),
            'unified_sync': True
        }
    
    def print_sync_report(self, report: Optional[Dict] = None) -> None:
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if report is None:
            report = self.get_synchronization_report()
        
        print("üîÑ Sync Report (Unified System):")
        print(f"   üìä Synchronized: {report.get('is_synchronized', False)}")
        print(f"   üìÖ Last sync: {report.get('last_sync', 'Never')}")
        print(f"   üîç Checked: {report.get('total_checked', 0)} orders")
        print(f"   üîÑ Actions: {report.get('actions_taken', 0)}")


class StateRecoveryInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, sync_instance=None):
        self._sync_instance = sync_instance
    
    @property
    def unified_sync(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
        if self._sync_instance is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            return globals().get('unified_sync')
        return self._sync_instance


# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# (–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤)


def validate_signal_before_execution(symbol: str, side: str, quantity: float) -> Tuple[bool, str]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (BUY/SELL)
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
    Returns:
        (is_valid, message)
    """
    try:
        if not unified_sync.client:
            return True, "Binance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        is_available, availability_msg = is_symbol_available_for_trading(symbol)
        if not is_available:
            return False, f"–°–∏–º–≤–æ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {availability_msg}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        status = unified_sync.get_sync_status()
        if status.get('needs_sync', True):
            logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π {symbol}")
            return False, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        
        return True, "–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")
        return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}"


def recover_system_state() -> SystemState:
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    
    Returns:
        –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        logger.info("üîÑ Starting system state recovery...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        sync_result = unified_sync.synchronize_state(send_telegram=False)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        watchdog_state = unified_sync._load_watchdog_state()
        exchange_positions = unified_sync._get_exchange_positions()
        exchange_orders = unified_sync._get_exchange_orders()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        system_state = SystemState(
            timestamp=datetime.now(),
            active_positions=watchdog_state.get('active_positions', {}),
            watchdog_orders=watchdog_state.get('orders', {}),
            exchange_positions=exchange_positions,
            exchange_orders=exchange_orders,
            synchronization_issues=sync_result.errors if sync_result.errors else [],
            recovery_actions=[f"Unified sync executed: {sync_result.actions_taken} actions"],
            is_synchronized=sync_result.is_synchronized
        )
        
        logger.info(f"‚úÖ System state recovered: {len(system_state.active_positions)} positions")
        
        return system_state
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return SystemState(
            timestamp=datetime.now(),
            active_positions={},
            watchdog_orders={},
            exchange_positions={},
            exchange_orders={},
            synchronization_issues=[f"Recovery error: {e}"],
            recovery_actions=["Emergency state recovery"],
            is_synchronized=False
        )


def is_symbol_available_for_trading(symbol: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        
    Returns:
        (is_available, message)
    """
    try:
        if not unified_sync.client:
            return True, "Binance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        exchange_info = unified_sync.client.futures_exchange_info()
        
        for symbol_info in exchange_info['symbols']:
            if symbol_info['symbol'] == symbol:
                status = symbol_info.get('status', 'UNKNOWN')
                
                if status == 'TRADING':
                    return True, "–°–∏–º–≤–æ–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
                else:
                    return False, f"–°–∏–º–≤–æ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —Å—Ç–∞—Ç—É—Å {status}"
        
        return False, "–°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ"
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {symbol}: {e}")
        return True, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º: {e}"


def sync_before_startup(component_name: str = "system") -> bool:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    Args:
        component_name: –ò–º—è –∑–∞–ø—É—Å–∫–∞–µ–º–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º {component_name}...")
    
    if not unified_sync.client:
        logger.warning("‚ö†Ô∏è Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    status = unified_sync.get_sync_status()
    if not status.get('needs_sync', True):
        logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        return True
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    result = unified_sync.synchronize_state()
    
    if result.is_synchronized:
        logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º {component_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        logger.error(f"‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º {component_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        return False


def force_sync() -> SyncResult:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    return unified_sync.synchronize_state()


if __name__ == "__main__":
    """–£—Ç–∏–ª–∏—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--status":
        unified_sync.print_status()
    elif len(sys.argv) > 1 and sys.argv[1] == "--force":
        print("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        result = force_sync()
        print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {result.total_checked} –æ—Ä–¥–µ—Ä–æ–≤")
        print(f"   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {result.actions_taken}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.successful_actions}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {result.failed_actions}")
        
        if result.errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏:")
            for error in result.errors:
                print(f"   ‚Ä¢ {error}")
        
        if result.warnings:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in result.warnings:
                print(f"   ‚Ä¢ {warning}")
    else:
        print("üîÑ Unified Synchronization System")
        print("=================================")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python unified_sync.py --status   # –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  python unified_sync.py --force    # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        print("")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        unified_sync.print_status()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        status = unified_sync.get_sync_status()
        if status.get('needs_sync', True):
            print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            user_input = input("üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–µ–π—á–∞—Å? (y/N): ")
            if user_input.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                result = force_sync()
                print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.successful_actions}/{result.actions_taken} —É—Å–ø–µ—à–Ω–æ")


# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
# (–ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤)
if 'orders_sync' not in globals():
    orders_sync = OrdersSyncInterface(unified_sync)
if 'state_recovery' not in globals():  
    state_recovery = StateRecoveryInterface(unified_sync)
