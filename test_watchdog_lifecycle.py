#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ Orders Watchdog
=====================================

–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:
- –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–¥–µ—Ä–æ–≤ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º –ø–æ 4h —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
- Graceful shutdown —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤

Author: HEDGER
Version: 1.0 - Lifecycle Testing
"""

import sys
import time
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

try:
    from orders_watchdog import WatchedOrder, OrderStatus, OrdersWatchdog
    from utils import logger
    print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


def test_order_lifecycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–¥–µ—Ä–æ–≤"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –û–†–î–ï–†–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
    test_order = WatchedOrder(
        symbol='BTCUSDT',
        order_id='test_lifecycle_123',
        side='BUY',
        position_side='LONG',
        quantity=0.001,
        price=45000.0,
        signal_type='LONG',
        stop_loss=44000.0,
        take_profit=47000.0,
        status=OrderStatus.PENDING,
        created_at=datetime.now(),
        source_timeframe='4h'
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expiry_time = test_order.calculate_expiry_time()
    print(f"üìÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {test_order.created_at.strftime('%H:%M:%S')}")
    print(f"‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiry_time.strftime('%H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
    is_expired = test_order.is_expired()
    print(f"üïê –ò—Å—Ç–µ–∫ –ª–∏ –æ—Ä–¥–µ—Ä: {'–î–∞' if is_expired else '–ù–µ—Ç'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ
    expires_soon = test_order.should_expire_soon(15)
    print(f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω: {'–î–∞' if expires_soon else '–ù–µ—Ç'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
    order_dict = test_order.to_dict()
    restored_order = WatchedOrder.from_dict(order_dict)
    
    print(f"üíæ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if restored_order.expires_at == test_order.expires_at else '‚ùå –û—à–∏–±–∫–∞'}")
    
    return test_order


def test_4h_intervals():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ 4h –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï 4H –ò–ù–¢–ï–†–í–ê–õ–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    test_times = [
        "01:23:45",  # ‚Üí 04:00:00
        "03:59:59",  # ‚Üí 04:00:00  
        "04:00:01",  # ‚Üí 08:00:00
        "15:30:00",  # ‚Üí 16:00:00
        "22:45:00",  # ‚Üí 00:00:00 (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
        "23:59:59"   # ‚Üí 00:00:00 (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
    ]
    
    for time_str in test_times:
        hour, minute, second = map(int, time_str.split(':'))
        test_time = datetime.now().replace(hour=hour, minute=minute, second=second, microsecond=0)
        
        test_order = WatchedOrder(
            symbol='BTCUSDT',
            order_id='123456789',
            side='BUY',
            position_side='LONG',
            quantity=0.01,
            price=100000.0,
            signal_type='LONG',
            stop_loss=95000.0,
            take_profit=105000.0,
            status=OrderStatus.PENDING,
            created_at=test_time,
            source_timeframe='4h'
        )
        
        expiry = test_order.calculate_expiry_time()
        print(f"–°–æ–∑–¥–∞–Ω: {test_time.strftime('%H:%M:%S')} ‚Üí –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry.strftime('%H:%M:%S')} ({expiry.date()})")


def test_graceful_shutdown_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç graceful shutdown (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ)"""
    print("\nüîç –°–ò–ú–£–õ–Ø–¶–ò–Ø GRACEFUL SHUTDOWN")
    print("=" * 50)
    
    print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
    test_orders = [
        {
            'symbol': 'BTCUSDT',
            'order_id': 'limit_001',
            'side': 'BUY',
            'position_side': 'LONG',
            'quantity': 0.001,
            'price': 45000.0,
            'signal_type': 'LONG',
            'stop_loss': 44000.0,
            'take_profit': 47000.0,
            'status': OrderStatus.PENDING
        },
        {
            'symbol': 'ETHUSDT', 
            'order_id': 'limit_002',
            'side': 'SELL',
            'position_side': 'SHORT',
            'quantity': 0.01,
            'price': 3200.0,
            'signal_type': 'SHORT',
            'stop_loss': 3250.0,
            'take_profit': 3100.0,
            'status': OrderStatus.PENDING
        },
        {
            'symbol': 'ADAUSDT',
            'order_id': 'position_003',
            'side': 'BUY',
            'position_side': 'LONG', 
            'quantity': 100.0,
            'price': 0.45,
            'signal_type': 'LONG',
            'stop_loss': 0.44,
            'take_profit': 0.47,
            'status': OrderStatus.SL_TP_PLACED
        }
    ]
    
    print("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞:")
    for i, order_data in enumerate(test_orders, 1):
        status_text = "–õ–ò–ú–ò–¢–ù–´–ô" if order_data['status'] == OrderStatus.PENDING else "–ü–û–ó–ò–¶–ò–Ø"
        print(f"{i}. {order_data['symbol']}: {status_text} {order_data['signal_type']} {order_data['quantity']} @ {order_data['price']}")
    
    print("\nüí° –ü—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º–∞ —Å–ø—Ä–æ—Å–∏—Ç:")
    print("   - –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ª–∏–º–∏—Ç–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å)")
    print("   - –ü–æ–∑–∏—Ü–∏–∏ —Å SL/TP –ø—Ä–æ–¥–æ–ª–∂–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ")
    
    return test_orders


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ï–† –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê ORDERS WATCHDOG")
    print("=" * 60)
    print("–í–µ—Ä—Å–∏—è: 1.0 - Lifecycle Testing")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç 1: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–¥–µ—Ä–æ–≤
        test_order = test_order_lifecycle()
        
        # –¢–µ—Å—Ç 2: 4h –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        test_4h_intervals()
        
        # –¢–µ—Å—Ç 3: Graceful shutdown
        test_orders = test_graceful_shutdown_simulation()
        
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("üìã –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("  ‚úÖ –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ 4h —Ç–∞–π–º—Ñ—Ä–µ–π–º—É")
        print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
        print("  ‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è") 
        print("  ‚úÖ –†–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã")
        print("  ‚úÖ –õ–æ–≥–∏–∫–∞ graceful shutdown")
        
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
