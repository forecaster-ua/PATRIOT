#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ BTCUSDT 15M
–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import json
import requests
from datetime import datetime
from pathlib import Path

def fetch_btc_signal():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ BTCUSDT 15M –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ current_data_examp.json
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
    base_url = "http://194.135.94.212:8001/confirm-trade"
    headers = {
        "Authorization": "Bearer maxa-secret-123",
        "Content-Type": "application/json"
    }
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "pair": "BTCUSDT",
        "timeframe": "15m"
    }
    
    try:
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {params['pair']} {params['timeframe']}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        url = f"{base_url}/signal"
        response = requests.get(url, headers=headers, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞
            data['fetch_timestamp'] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
            output_file = Path(__file__).parent / "current_data_examp.json"
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file.name}")
            print(f"üìä –°–∏–≥–Ω–∞–ª: {data.get('signal', 'N/A')}")
            print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {data.get('current_price', 'N/A')}")
            print(f"üéØ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {data.get('entry_price', 'N/A')}")
            print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data.get('confidence', 0) * 100:.1f}%")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 50)
    print("üöÄ PATRIOT Signal Fetcher")
    print("=" * 50)
    
    success = fetch_btc_signal()
    
    if success:
        print("\nüéâ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
    else:
        print("\nüí• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        exit(1)

if __name__ == "__main__":
    main()
