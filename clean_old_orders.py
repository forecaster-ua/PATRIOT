#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ orders_watchdog_state.json
"""

import json
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
import shutil

def backup_state_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state_file = Path('orders_watchdog_state.json')
    if state_file.exists():
        backup_name = f"orders_watchdog_state_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        shutil.copy2(state_file, backup_name)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_name}")
        return True
    else:
        print("‚ùå –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def load_watchdog_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ watchdog"""
    try:
        with open('orders_watchdog_state.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return None

def get_exchange_active_orders():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
    # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Binance API
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return []

def clean_old_orders(data, cutoff_days=7):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
    if not data or 'watched_orders' not in data:
        return data
    
    cutoff_date = datetime.now() - timedelta(days=cutoff_days)
    original_count = len(data['watched_orders'])
    
    cleaned_orders = []
    removed_count = 0
    
    for order in data['watched_orders']:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            created_at = datetime.fromisoformat(order.get('created_at', ''))
        except:
            created_at = datetime.now()  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:
        should_remove = (
            # –û—Ä–¥–µ—Ä–∞ —Å –æ—à–∏–±–∫–∞–º–∏ SL/TP —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            (order.get('status') == 'SL_TP_ERROR' and created_at < cutoff_date) or
            # –û—Ä–¥–µ—Ä–∞ –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –±–∏—Ä–∂–µ
            (order.get('status') in ['CANCELLED', 'REJECTED', 'EXPIRED']) or
            # –û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞ (–±–æ–ª–µ–µ 30 –¥–Ω–µ–π) –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            (created_at < datetime.now() - timedelta(days=30)) or
            # –û—Ä–¥–µ—Ä–∞ —Å –Ω—É–ª–µ–≤—ã–º–∏ ID (—è–≤–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
            (not order.get('order_id') or order.get('order_id') == 'None')
        )
        
        if should_remove:
            removed_count += 1
            print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º: {order.get('symbol')} | {order.get('order_id')} | {order.get('status')} | {created_at.strftime('%Y-%m-%d')}")
        else:
            cleaned_orders.append(order)
    
    data['watched_orders'] = cleaned_orders
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ß–ò–°–¢–ö–ò:")
    print(f"   –ë—ã–ª–æ –æ—Ä–¥–µ—Ä–æ–≤: {original_count}")
    print(f"   –£–¥–∞–ª–µ–Ω–æ: {removed_count}")  
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {len(cleaned_orders)}")
    
    return data

def save_cleaned_state(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    try:
        with open('orders_watchdog_state.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print("‚úÖ –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def show_statistics(data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –æ—Ä–¥–µ—Ä–æ–≤"""
    if not data or 'watched_orders' not in data:
        return
    
    status_counts = {}
    for order in data['watched_orders']:
        status = order.get('status', 'UNKNOWN')
        status_counts[status] = status_counts.get(status, 0) + 1
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:")
    for status, count in sorted(status_counts.items()):
        print(f"   {status}: {count}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    print("üßπ –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£ –£–°–¢–ê–†–ï–í–®–ò–• –û–†–î–ï–†–û–í")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    if not backup_state_file():
        return
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = load_watchdog_state()
    if not data:
        return
    
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –æ—á–∏—Å—Ç–∫–∏
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –û–ß–ò–°–¢–ö–ò:")
    show_statistics(data)
    
    # 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ä–¥–µ—Ä–∞
    cleaned_data = clean_old_orders(data)
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò:")
    show_statistics(cleaned_data)
    
    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if save_cleaned_state(cleaned_data):
        print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–•–†–ê–ù–ï–ù–ò–ò!")

if __name__ == "__main__":
    main()
