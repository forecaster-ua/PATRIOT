"""
Signal Analyzer - –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
==========================================

–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.
–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Ü–µ–Ω–µ.

Author: HEDGER
Version: 1.0
"""

import time
from typing import Dict, List, Set, Optional, Tuple, Mapping
from datetime import datetime, timezone

# Local imports
from api_client import api_client
from config import TIMEFRAMES, MAX_API_RETRIES, RETRY_DELAY_SEC
from utils import logger


class SignalAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    2. –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Ü–µ–Ω–µ
    3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    """
    
    def __init__(self, ticker: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        
        Args:
            ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
        """
        self.ticker = ticker
        self.timeframes = TIMEFRAMES
        self.price_threshold = 0.005  # 0.5% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–∞—Ö –≤—Ö–æ–¥–∞

        logger.debug(f"Initialized SignalAnalyzer for {ticker}")

    def fetch_all_signals(self, stop_event=None) -> Dict[str, Optional[Dict]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            
        Returns:
            Dict[str, Optional[Dict]]: –°–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            
        Example:
            {
                "15m": {"signal": "LONG", "entry_price": 45000, ...},
                "1h": {"signal": "LONG", "entry_price": 45100, ...},
                "4h": None  # –Ω–µ –ø–æ–ª—É—á–µ–Ω
            }
        """
        signals = {}
        
        for timeframe in self.timeframes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
            if stop_event and stop_event.is_set():
                logger.info(f"Signal fetching interrupted for {self.ticker}")
                break
                
            logger.info(f"Fetching signal: {self.ticker} {timeframe}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å retry –ª–æ–≥–∏–∫–æ–π
            signal = self._fetch_single_signal(timeframe)
            
            if signal:
                signals[timeframe] = signal
                logger.info(f"‚úÖ Signal received: {self.ticker} {timeframe}")
            else:
                logger.warning(f"‚ùå No signal: {self.ticker} {timeframe}")
        
        logger.info(f"üìä Signals summary for {self.ticker}: {len(signals)}/{len(self.timeframes)} received")
        return signals

    def _fetch_single_signal(self, timeframe: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ None
        """
        for attempt in range(1, MAX_API_RETRIES + 1):
            try:
                logger.debug(f"Attempt {attempt}/{MAX_API_RETRIES}: {self.ticker} {timeframe}")
                
                # –ó–∞–ø—Ä–æ—Å –∫ API
                signal = api_client.get_signal(self.ticker, timeframe)
                
                if signal and self._validate_signal_data(signal):
                    return signal
                else:
                    logger.warning(f"Invalid/empty signal data: {self.ticker} {timeframe}")
                    
            except Exception as e:
                logger.error(f"Error attempt {attempt}: {self.ticker} {timeframe} - {str(e)}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if attempt < MAX_API_RETRIES:
                    logger.debug(f"Waiting {RETRY_DELAY_SEC}s before retry...")
                    time.sleep(RETRY_DELAY_SEC)
                    continue
                else:
                    logger.error(f"All {MAX_API_RETRIES} attempts failed for {self.ticker} {timeframe}")
                    
        return None

    def analyze_convergence(self, signals: Mapping[str, Optional[Dict]]) -> Optional[Set[str]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
        
        –ò—â–µ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å:
        1. –û–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–∏–≥–Ω–∞–ª–∞ (LONG/SHORT)
        2. –ë–ª–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –≤—Ö–æ–¥–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö price_threshold)
        
        Args:
            signals: –°–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º (–º–æ–≥—É—Ç –±—ã—Ç—å None)
            
        Returns:
            Optional[Set[str]]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–ª–∏ None
        """
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        valid_signals = {tf: signal for tf, signal in signals.items() if signal is not None}
        
        if not valid_signals or len(valid_signals) < 2:
            logger.debug(f"Not enough valid signals for convergence analysis: {len(valid_signals)}")
            return None
            
        matched_timeframes = set()
        timeframe_list = list(valid_signals.keys())
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        for i, tf1 in enumerate(timeframe_list):
            for tf2 in timeframe_list[i+1:]:
                
                if self._check_convergence(valid_signals[tf1], valid_signals[tf2]):
                    matched_timeframes.update([tf1, tf2])
                    logger.debug(f"Convergence found: {tf1} + {tf2} for {self.ticker}")
        
        if matched_timeframes and len(matched_timeframes) >= 2:
            logger.info(f"üéØ Convergence detected for {self.ticker}: {sorted(matched_timeframes)}")
            return matched_timeframes
        else:
            logger.info(f"No convergence found for {self.ticker}")
            return None

    def _check_convergence(self, signal1: Dict, signal2: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–∏–≥–Ω–∞–ª–∞–º–∏
        
        Args:
            signal1, signal2: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª—ã —Å—Ö–æ–∂–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        same_direction = signal1['signal'] == signal2['signal']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å —Ü–µ–Ω –≤—Ö–æ–¥–∞
        price_proximity = self._check_price_proximity(
            signal1['entry_price'], 
            signal2['entry_price']
        )
        
        convergent = same_direction and price_proximity
        
        if convergent:
            logger.info(
                f"‚úÖ Convergence detected: {signal1['signal']} | "
                f"Prices: {signal1['entry_price']:.6f} vs {signal2['entry_price']:.6f} | "
                f"Diff: {abs(signal1['entry_price'] - signal2['entry_price']):.6f}"
            )
        else:
            logger.debug(
                f"‚ùå No convergence: Direction match: {same_direction} | "
                f"Price proximity: {price_proximity} | "
                f"Prices: {signal1['entry_price']:.6f} vs {signal2['entry_price']:.6f}"
            )
            
        return convergent

    def _check_price_proximity(self, price1: float, price2: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å –¥–≤—É—Ö —Ü–µ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö threshold
        
        Args:
            price1, price2: –¶–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–∏
        """
        if not price1 or not price2:
            return False
            
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å
        avg_price = (price1 + price2) / 2
        price_diff = abs(price1 - price2)
        relative_diff = price_diff / avg_price
        
        is_close = relative_diff <= self.price_threshold
        
        logger.debug(
            f"Price comparison: {price1:.6f} vs {price2:.6f} | "
            f"Relative diff: {relative_diff:.4f} | "
            f"Threshold: {self.price_threshold} | "
            f"Within range: {is_close}"
        )
            
        return is_close

    def create_signal_data(self, matched_timeframes: Set[str], signals: Mapping[str, Optional[Dict]]) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Args:
            matched_timeframes: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            signals: –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å None)
            
        Returns:
            Dict: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        """
        if not matched_timeframes or len(matched_timeframes) < 2:
            raise ValueError("Need at least 2 matching timeframes")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        valid_matched_signals: Dict[str, Dict] = {}
        for tf in matched_timeframes:
            if tf in signals and signals[tf] is not None:
                valid_matched_signals[tf] = signals[tf]  # type: ignore
        
        if len(valid_matched_signals) < 2:
            raise ValueError("Not enough valid signals in matched timeframes")
            
        logger.info(f"üìã Creating signal data for {self.ticker} with timeframes: {sorted(valid_matched_signals.keys())}")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∫–∞–∫ –±–∞–∑—É - —Ç–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ None
        first_tf = next(iter(valid_matched_signals.keys()))
        base_signal = valid_matched_signals[first_tf]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        for tf, signal in valid_matched_signals.items():
            logger.info(
                f"  üìä {tf}: {signal['signal']} | "
                f"Entry: {signal['entry_price']:.6f} | "
                f"Stop: {signal['stop_loss']:.6f} | "
                f"Target: {signal['take_profit']:.6f} | "
                f"Confidence: {signal['confidence']:.3f}"
            )
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_entry = self._calculate_average([valid_matched_signals[tf]['entry_price'] for tf in valid_matched_signals])
        avg_stop = self._calculate_average([valid_matched_signals[tf]['stop_loss'] for tf in valid_matched_signals])
        avg_take_profit = self._calculate_average([valid_matched_signals[tf]['take_profit'] for tf in valid_matched_signals])
        avg_confidence = self._calculate_average([valid_matched_signals[tf]['confidence'] for tf in valid_matched_signals])
        
        logger.info(
            f"üìà Averaged values for {self.ticker}: "
            f"Entry: {avg_entry:.6f} | Stop: {avg_stop:.6f} | "
            f"Target: {avg_take_profit:.6f} | Confidence: {avg_confidence:.3f}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        consolidated_signal = {
            'ticker': self.ticker,
            'matched_timeframes': sorted(valid_matched_signals.keys()),
            'timeframes_str': ', '.join(sorted(valid_matched_signals.keys())),
            'signal': base_signal['signal'],
            'current_price': base_signal['current_price'],
            'entry_price': avg_entry,
            'stop_loss': avg_stop,
            'take_profit': avg_take_profit,
            'confidence': avg_confidence,
            'dominance_change_percent': self._calculate_average([
                valid_matched_signals[tf].get('dominance_change_percent', 0) for tf in valid_matched_signals
            ]),
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'raw_signals': valid_matched_signals  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
        
        logger.info(
            f"üìà Signal data created for {self.ticker}: "
            f"{consolidated_signal['signal']} at {consolidated_signal['entry_price']:.6f}"
        )
        
        return consolidated_signal

    def _calculate_average(self, values: List[float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è None –∏ 0"""
        valid_values = [v for v in values if v and v != 0]
        return sum(valid_values) / len(valid_values) if valid_values else 0.0

    def _validate_signal_data(self, signal: Dict) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        required_fields = ['signal', 'current_price', 'entry_price', 'stop_loss', 'take_profit']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in signal or signal[field] is None:
                logger.warning(f"Missing required field: {field}")
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        if signal['signal'] not in ['LONG', 'SHORT']:
            logger.warning(f"Invalid signal direction: {signal['signal']}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        price_fields = ['current_price', 'entry_price', 'stop_loss', 'take_profit']
        for field in price_fields:
            if signal[field] <= 0:
                logger.warning(f"Invalid price value for {field}: {signal[field]}")
                return False
                
        return True

    def analyze_ticker(self, stop_event=None) -> Optional[Dict]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ä–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ + –ø–æ–∏—Å–∫ —Å—Ö–æ–∂–¥–µ–Ω–∏–π
        
        Args:
            stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            
        Returns:
            Optional[Dict]: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        logger.info(f"üîç Starting analysis for {self.ticker}")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            signals = self.fetch_all_signals(stop_event)
            
            if not signals:
                logger.info(f"No signals received for {self.ticker}")
                return None
                
            # 2. –ò—â–µ–º —Å—Ö–æ–∂–¥–µ–Ω–∏—è
            matched_timeframes = self.analyze_convergence(signals)
            
            if not matched_timeframes:
                logger.info(f"No convergence found for {self.ticker}")
                return None
                
            # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            signal_data = self.create_signal_data(matched_timeframes, signals)
            
            logger.info(f"‚úÖ Analysis completed successfully for {self.ticker}")
            return signal_data
            
        except Exception as e:
            logger.error(f"Analysis failed for {self.ticker}: {str(e)}", exc_info=True)
            return None


# Utility function for external use
def analyze_ticker_signals(ticker: str, stop_event=None) -> Optional[Dict]:
    """
    Convenience function –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    
    Args:
        ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        
    Returns:
        Optional[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None
    """
    analyzer = SignalAnalyzer(ticker)
    return analyzer.analyze_ticker(stop_event)


if __name__ == "__main__":
    '''
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è LTCUSDT
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ—Ç –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    '''
    import logging
    logging.basicConfig(level=logging.INFO)
    
    test_ticker = "NKNUSDT"
    result = analyze_ticker_signals(test_ticker)
    
    if result:
        print(f"‚úÖ Signal found for {test_ticker}:")
        print(f"Direction: {result['signal']}")
        print(f"Entry: {result['entry_price']}")
        print(f"Timeframes: {result['timeframes_str']}")
    else:
        print(f"‚ùå No signal for {test_ticker}")