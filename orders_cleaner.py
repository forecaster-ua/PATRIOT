#!/usr/bin/env python3
"""
Orders Cleaner - –ú—É—Å–æ—Ä—â–∏–∫ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
==========================================

–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ "—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö" –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ Binance:
- –ù–∞—Ö–æ–¥–∏—Ç –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ SL/TP –±–µ–∑ –ª–∏–º–∏—Ç–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ)
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º
- –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –æ—á–∏—â–∞—Ç—å –º—É—Å–æ—Ä–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python orders_cleaner.py [--auto-confirm] [--dry-run] [--report-only]

--auto-confirm : –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤—Å–µ —É–¥–∞–ª–µ–Ω–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
--dry-run      : –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å
--report-only  : —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è

Author: HEDGER
Version: 1.0 - Orders Cleanup Utility
"""

import sys
import argparse
import json
from datetime import datetime
from typing import Dict, List, Set, Tuple
from pathlib import Path
from collections import defaultdict

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET
from utils import logger

# Binance
try:
    from binance.client import Client
    from binance.exceptions import BinanceAPIException
    BINANCE_AVAILABLE = True
except ImportError:
    logger.error("‚ùå python-binance not installed")
    BINANCE_AVAILABLE = False


class OrdersCleaner:
    """–ú—É—Å–æ—Ä—â–∏–∫ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.client = None
        self.positions = {}
        self.orders = {}
        self.orphaned_analysis = {}
        
        self._init_client()
    
    def _init_client(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        if not BINANCE_AVAILABLE:
            logger.error("‚ùå Binance library not available")
            return
            
        if not BINANCE_API_KEY or not BINANCE_API_SECRET:
            logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        try:
            logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance ({'TESTNET' if BINANCE_TESTNET else 'MAINNET'})...")
            
            self.client = Client(
                api_key=BINANCE_API_KEY,
                api_secret=BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.client.futures_account()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            self.client = None
    
    def analyze_orphaned_orders(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Ä–æ—Ç—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ"""
        if not self.client:
            return {"error": "Binance client not available"}
        
        try:
            logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions_data = self.client.futures_position_information()
            self.positions = {}
            for pos in positions_data:
                if float(pos['positionAmt']) != 0:
                    self.positions[pos['symbol']] = {
                        'amount': float(pos['positionAmt']),
                        'side': 'LONG' if float(pos['positionAmt']) > 0 else 'SHORT',
                        'entry_price': float(pos['entryPrice']) if pos['entryPrice'] else 0.0,
                        'unrealized_pnl': float(pos.get('unrealizedPnl', 0) or 0)
                    }
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            orders_data = self.client.futures_get_open_orders()
            self.orders = {}
            for order in orders_data:
                symbol = order['symbol']
                if symbol not in self.orders:
                    self.orders[symbol] = []
                
                self.orders[symbol].append({
                    'order_id': order['orderId'],
                    'type': order['type'],
                    'side': order['side'],
                    'quantity': float(order['origQty']),
                    'price': float(order['price']) if order['price'] else None,
                    'stop_price': float(order['stopPrice']) if order['stopPrice'] else None,
                    'status': order['status']
                })
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(self.positions)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤ –ø–æ {len(self.orders)} —Å–∏–º–≤–æ–ª–∞–º")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            self.orphaned_analysis = self._analyze_symbols()
            
            return {
                "timestamp": datetime.now().isoformat(),
                "total_positions": len(self.positions),
                "total_symbols_with_orders": len(self.orders),
                "orphaned_symbols": len([s for s in self.orphaned_analysis.values() if s['is_orphaned']]),
                "analysis": self.orphaned_analysis
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {"error": str(e)}
    
    def _analyze_symbols(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        analysis = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å –æ—Ä–¥–µ—Ä–∞–º–∏
        for symbol, orders in self.orders.items():
            has_position = symbol in self.positions
            position_info = self.positions.get(symbol, {})
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞
            entry_orders = []  # –û—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            exit_orders = []   # –û—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ (SL/TP)
            
            for order in orders:
                order_type = order['type']
                if order_type in ['LIMIT', 'MARKET']:
                    entry_orders.append(order)
                elif order_type in ['STOP_MARKET', 'TAKE_PROFIT_MARKET', 'STOP', 'TAKE_PROFIT']:
                    exit_orders.append(order)
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ entry –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    entry_orders.append(order)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–º–≤–æ–ª–∞
            is_orphaned = (
                not has_position and           # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                len(entry_orders) == 0 and    # –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ
                len(exit_orders) > 0           # –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ SL/TP –æ—Ä–¥–µ—Ä–∞
            )
            
            analysis[symbol] = {
                'has_position': has_position,
                'position_info': position_info,
                'total_orders': len(orders),
                'entry_orders': len(entry_orders),
                'exit_orders': len(exit_orders),
                'is_orphaned': is_orphaned,
                'orders_detail': {
                    'entry': entry_orders,
                    'exit': exit_orders
                }
            }
        
        return analysis
    
    def print_analysis_report(self, analysis_data: Dict) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
        if "error" in analysis_data:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_data['error']}")
            return
        
        print("=" * 80)
        print("üßπ –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –°–ò–†–û–¢–°–ö–ò–• –û–†–î–ï–†–û–í")
        print("=" * 80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"üïê –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_data['timestamp']}")
        print(f"üìç –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {analysis_data['total_positions']}")
        print(f"üìã –°–∏–º–≤–æ–ª–æ–≤ —Å –æ—Ä–¥–µ—Ä–∞–º–∏: {analysis_data['total_symbols_with_orders']}")
        print(f"üßπ –°–∞–π—Ä–æ—Ç—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {analysis_data['orphaned_symbols']}")
        
        analysis = analysis_data['analysis']
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
        orphaned_symbols = []
        clean_symbols = []
        
        for symbol, data in analysis.items():
            if data['is_orphaned']:
                orphaned_symbols.append(symbol)
            else:
                clean_symbols.append(symbol)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Ä–æ—Ç—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        if orphaned_symbols:
            print(f"\nüßπ –°–ò–†–û–¢–°–ö–ò–ï –°–ò–ú–í–û–õ–´ ({len(orphaned_symbols)}):")
            print("-" * 60)
            
            for symbol in sorted(orphaned_symbols):
                data = analysis[symbol]
                print(f"\nüìä {symbol}:")
                print(f"  ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: ‚ùå –ù–ï–¢")
                print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {data['total_orders']}")
                print(f"  ‚Ä¢ –û—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ: {data['entry_orders']}")
                print(f"  ‚Ä¢ –û—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: {data['exit_orders']}")
                
                # –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
                exit_orders = data['orders_detail']['exit']
                for order in exit_orders:
                    order_type = order['type']
                    side = order['side']
                    price_info = ""
                    if order['price']:
                        price_info = f" @ {order['price']:.6f}"
                    elif order['stop_price']:
                        price_info = f" @ {order['stop_price']:.6f}"
                    
                    print(f"    - {order_type} {side} {order['quantity']}{price_info} (#{order['order_id']})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–∞—Ç–∫–æ)
        if clean_symbols:
            print(f"\n‚úÖ –ß–ò–°–¢–´–ï –°–ò–ú–í–û–õ–´ ({len(clean_symbols)}):")
            print("-" * 60)
            
            for symbol in sorted(clean_symbols):
                data = analysis[symbol]
                pos_status = "‚úÖ –ï–°–¢–¨" if data['has_position'] else "‚ùå –ù–ï–¢"
                entry_count = data['entry_orders']
                exit_count = data['exit_orders']
                
                if data['has_position']:
                    pos_info = data['position_info']
                    side = pos_info['side']
                    amount = abs(pos_info['amount'])
                    pnl = pos_info['unrealized_pnl']
                    pnl_str = f"(PnL: {pnl:+.2f})" if pnl != 0 else ""
                    print(f"‚Ä¢ {symbol}: {pos_status} {side} {amount} {pnl_str}, –û—Ä–¥–µ—Ä–æ–≤: {entry_count + exit_count}")
                else:
                    print(f"‚Ä¢ {symbol}: {pos_status}, –û—Ä–¥–µ—Ä–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∏—è: {entry_count}, –ó–∞–∫—Ä—ã—Ç–∏—è: {exit_count}")
        
        print("=" * 80)
    
    def cleanup_orphaned_orders(self, analysis_data: Dict, auto_confirm: bool = False, dry_run: bool = False) -> Dict:
        """–û—á–∏—â–∞–µ—Ç —Å–∏—Ä–æ—Ç—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        if "error" in analysis_data:
            return analysis_data
        
        analysis = analysis_data['analysis']
        orphaned_symbols = [s for s, data in analysis.items() if data['is_orphaned']]
        
        if not orphaned_symbols:
            print("\n‚úÖ –°–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return {"cleaned": 0, "skipped": 0, "errors": []}
        
        print(f"\nüßπ –ù–∞–π–¥–µ–Ω–æ {len(orphaned_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —Å–∏—Ä–æ—Ç—Å–∫–∏–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏")
        
        cleaned_count = 0
        skipped_count = 0
        errors = []
        
        for symbol in orphaned_symbols:
            data = analysis[symbol]
            exit_orders = data['orders_detail']['exit']
            
            print(f"\nüìä {symbol} - {len(exit_orders)} —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
            for order in exit_orders:
                order_type = order['type']
                side = order['side']
                price_info = ""
                if order['price']:
                    price_info = f" @ {order['price']:.6f}"
                elif order['stop_price']:
                    price_info = f" @ {order['stop_price']:.6f}"
                
                print(f"  ‚Ä¢ {order_type} {side} {order['quantity']}{price_info} (#{order['order_id']})")
            
            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if not auto_confirm:
                response = input(f"\nüóëÔ∏è –£–¥–∞–ª–∏—Ç—å {len(exit_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}? (y/n/q): ").lower().strip()
                
                if response == 'q':
                    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                elif response != 'y':
                    print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {symbol}")
                    skipped_count += 1
                    continue
            
            # –£–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä–∞
            if dry_run:
                print(f"üîç [DRY RUN] –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(exit_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
                cleaned_count += len(exit_orders)
            else:
                symbol_errors = self._cancel_orders(symbol, exit_orders)
                if symbol_errors:
                    errors.extend(symbol_errors)
                else:
                    cleaned_count += len(exit_orders)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(exit_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
        
        return {
            "cleaned": cleaned_count,
            "skipped": skipped_count,
            "errors": errors
        }
    
    def _cancel_orders(self, symbol: str, orders: List[Dict]) -> List[str]:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        errors = []
        
        for order in orders:
            try:
                self.client.futures_cancel_order(
                    symbol=symbol,
                    orderId=order['order_id']
                )
                logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä {order['order_id']} –¥–ª—è {symbol}")
                
            except BinanceAPIException as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order['order_id']} –¥–ª—è {symbol}: {e}"
                logger.error(error_msg)
                errors.append(error_msg)
            except Exception as e:
                error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order['order_id']} –¥–ª—è {symbol}: {e}"
                logger.error(error_msg)
                errors.append(error_msg)
        
        return errors
    
    def save_analysis_report(self, analysis_data: Dict, filename: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(analysis_data, f, indent=2, ensure_ascii=False)
            logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    parser = argparse.ArgumentParser(description='–û—á–∏—Å—Ç–∫–∞ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Binance')
    parser.add_argument('--auto-confirm', '-y', action='store_true',
                       help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤—Å–µ —É–¥–∞–ª–µ–Ω–∏—è (–û–°–¢–û–†–û–ñ–ù–û!)')
    parser.add_argument('--dry-run', '-d', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å')
    parser.add_argument('--report-only', '-r', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è')
    parser.add_argument('--save', '-s', type=str,
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    try:
        logger.info("üßπ –ó–∞–ø—É—Å–∫ Orders Cleaner...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä cleaner
        cleaner = OrdersCleaner()
        
        if not cleaner.client:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance API")
            sys.exit(1)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞
        analysis_data = cleaner.analyze_orphaned_orders()
        
        if "error" in analysis_data:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_data['error']}")
            sys.exit(1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
        cleaner.print_analysis_report(analysis_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.save:
            cleaner.save_analysis_report(analysis_data, args.save)
        
        # –¢–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç - –≤—ã—Ö–æ–¥–∏–º
        if args.report_only:
            logger.info("üìã –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç–∞ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            sys.exit(0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ —á–∏—Å—Ç–∏—Ç—å
        orphaned_count = analysis_data['orphaned_symbols']
        if orphaned_count == 0:
            logger.info("‚úÖ –°–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            sys.exit(0)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if args.auto_confirm and not args.dry_run:
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
            print("‚ö†Ô∏è –í—Å–µ —Å–∏—Ä–æ—Ç—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!")
            response = input("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").lower().strip()
            if response != 'yes':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                sys.exit(0)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_result = cleaner.cleanup_orphaned_orders(
            analysis_data, 
            auto_confirm=args.auto_confirm,
            dry_run=args.dry_run
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò")
        print("=" * 60)
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {cleanup_result['cleaned']}")
        print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {cleanup_result['skipped']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(cleanup_result['errors'])}")
        
        if cleanup_result['errors']:
            print("\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in cleanup_result['errors']:
                print(f"  ‚Ä¢ {error}")
        
        if args.dry_run:
            print("\nüîç –≠—Ç–æ –±—ã–ª –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ - –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
        
        print("=" * 60)
        
        # –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
        if cleanup_result['errors']:
            sys.exit(1)
        else:
            sys.exit(0)
            
    except KeyboardInterrupt:
        logger.info("üëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
