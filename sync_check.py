#!/usr/bin/env python3
"""
Orders Watchdog Sync Check
==========================

–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Orders Watchdog —Å –±–∏—Ä–∂–µ–π Binance.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–µ—Ä–∫—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python sync_check.py [--report] [--fix]

--report  : –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
--fix     : –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º (–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û)

Author: HEDGER
"""

import sys
import argparse
import json
from pathlib import Path
from typing import Dict

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from orders_watchdog import OrdersWatchdog
from utils import logger


def main():
    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Orders Watchdog —Å –±–∏—Ä–∂–µ–π')
    parser.add_argument('--report', '-r', action='store_true', 
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç')
    parser.add_argument('--json', '-j', action='store_true',
                       help='–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ')
    parser.add_argument('--save', '-s', type=str,
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    try:
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä watchdog (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
        watchdog = OrdersWatchdog()
        
        if not watchdog.client:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance API")
            sys.exit(1)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏  
        sync_report = watchdog.check_exchange_sync()
        
        if args.json:
            # –í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            print(json.dumps(sync_report, indent=2, ensure_ascii=False))
        elif args.report:
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            watchdog.print_sync_report(sync_report)
        else:
            # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
            print_brief_report(sync_report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        if args.save:
            with open(args.save, 'w', encoding='utf-8') as f:
                json.dump(sync_report, f, indent=2, ensure_ascii=False)
            logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {args.save}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        if sync_report.get('discrepancies'):
            sys.exit(1)
        else:
            logger.info("‚úÖ –í—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
            sys.exit(0)
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)


def print_brief_report(sync_report: Dict) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    if "error" in sync_report:
        print(f"‚ùå –û—à–∏–±–∫–∞: {sync_report['error']}")
        return
    
    print("=" * 50)
    print("üìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print(f"üìã –û—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ: {len(sync_report['exchange_orders'])}")
    print(f"üìç –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(sync_report['exchange_positions'])}")
    print(f"üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {sync_report['local_state']['total_orders']}")
    
    # –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    discrepancies = sync_report.get('discrepancies', [])
    if discrepancies:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: {len(discrepancies)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        by_type = {}
        for disc in discrepancies:
            disc_type = disc['type']
            by_type[disc_type] = by_type.get(disc_type, 0) + 1
        
        for disc_type, count in by_type.items():
            print(f"  ‚Ä¢ {disc_type}: {count}")
    else:
        print("‚úÖ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("=" * 50)


if __name__ == "__main__":
    main()
