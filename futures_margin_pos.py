"""
Futures Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–∏—Ü–∏–π
==============================================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. –î–æ—Å—Ç—É–ø–Ω–æ–π –º–∞—Ä–∂–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö
2. –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
3. –û–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞

–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π PATRIOT:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç config.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ API
- –õ–æ–≥–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ utils.logger
- –°–æ–≤–º–µ—Å—Ç–∏–º —Å testnet/mainnet —Ä–µ–∂–∏–º–∞–º–∏

Author: HEDGER  
Version: 1.0 - Production Ready
"""

import sys
from typing import Dict, List, Optional, Any
from decimal import Decimal
from datetime import datetime
import json
from tabulate import tabulate

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import (
    BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET, 
    NETWORK_MODE, FUTURES_LEVERAGE, RISK_PERCENT
)
from utils import logger

# Binance
try:
    from binance.client import Client
    from binance.exceptions import BinanceAPIException
    BINANCE_AVAILABLE = True
except ImportError:
    logger.error("‚ùå python-binance not installed. Install with: pip install python-binance")
    BINANCE_AVAILABLE = False
    # Define dummy Client for type hints when import fails
    Client = None


class FuturesMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    def __init__(self):
        self.client: Optional[Client] = None
        self.account_info: Optional[Dict] = None
        self._init_client()
    
    def _init_client(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        if not BINANCE_AVAILABLE:
            logger.error("‚ùå Binance library not available")
            return
            
        if not BINANCE_API_KEY or not BINANCE_API_SECRET:
            logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            if BINANCE_TESTNET:
                logger.error("- BINANCE_TESTNET_API_KEY")
                logger.error("- BINANCE_TESTNET_API_SECRET") 
            else:
                logger.error("- BINANCE_MAINNET_API_KEY")
                logger.error("- BINANCE_MAINNET_API_SECRET")
            return
        
        try:
            if Client is None:
                logger.error("‚ùå Binance Client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
                
            logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance {NETWORK_MODE}...")
            
            self.client = Client(
                api_key=BINANCE_API_KEY,
                api_secret=BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.client.futures_account()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance {NETWORK_MODE} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Binance API: {e}")
            self.client = None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.client = None
    
    def get_account_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        if not self.client:
            logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            self.account_info = self.client.futures_account()
            return self.account_info
        except BinanceAPIException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def get_balance_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
        if not self.account_info:
            self.get_account_info()
        
        if not self.account_info:
            return None
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            total_wallet_balance = float(self.account_info.get('totalWalletBalance', 0))
            total_unrealized_pnl = float(self.account_info.get('totalUnrealizedProfit', 0))
            total_margin_balance = float(self.account_info.get('totalMarginBalance', 0))
            available_balance = float(self.account_info.get('availableBalance', 0))
            total_position_initial_margin = float(self.account_info.get('totalPositionInitialMargin', 0))
            total_open_order_initial_margin = float(self.account_info.get('totalOpenOrderInitialMargin', 0))
            max_withdraw_amount = float(self.account_info.get('maxWithdrawAmount', 0))
            
            return {
                'total_wallet_balance': total_wallet_balance,
                'total_unrealized_pnl': total_unrealized_pnl,
                'total_margin_balance': total_margin_balance,
                'available_balance': available_balance,
                'total_position_initial_margin': total_position_initial_margin,
                'total_open_order_initial_margin': total_open_order_initial_margin,
                'max_withdraw_amount': max_withdraw_amount,
                'margin_ratio': float(self.account_info.get('totalMaintenanceMargin', 0)) / total_margin_balance * 100 if total_margin_balance > 0 else 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    def get_open_positions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.client:
            logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        try:
            positions = self.client.futures_position_information()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            open_positions = []
            for position in positions:
                position_amt = float(position.get('positionAmt', 0))
                if position_amt != 0:
                    unrealized_pnl = float(position.get('unRealizedProfit', 0))
                    entry_price = float(position.get('entryPrice', 0))
                    mark_price = float(position.get('markPrice', 0))
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROE (Return on Equity)
                    roe_percent = 0
                    if entry_price > 0:
                        if position_amt > 0:  # Long position
                            roe_percent = (mark_price - entry_price) / entry_price * 100
                        else:  # Short position
                            roe_percent = (entry_price - mark_price) / entry_price * 100
                    
                    open_positions.append({
                        'symbol': position.get('symbol'),
                        'side': 'LONG' if position_amt > 0 else 'SHORT',
                        'size': abs(position_amt),
                        'entry_price': entry_price,
                        'mark_price': mark_price,
                        'unrealized_pnl': unrealized_pnl,
                        'roe_percent': roe_percent,
                        'leverage': int(float(position.get('leverage', 1))),
                        'margin_type': position.get('marginType', 'UNKNOWN')
                    })
            
            return sorted(open_positions, key=lambda x: abs(x['unrealized_pnl']), reverse=True)
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def get_open_orders(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        if not self.client:
            logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        try:
            orders = self.client.futures_get_open_orders()
            
            processed_orders = []
            for order in orders:
                processed_orders.append({
                    'symbol': order.get('symbol'),
                    'side': order.get('side'),
                    'type': order.get('type'),
                    'quantity': float(order.get('origQty', 0)),
                    'price': float(order.get('price', 0)),
                    'stop_price': float(order.get('stopPrice', 0)),
                    'time_in_force': order.get('timeInForce'),
                    'order_id': order.get('orderId'),
                    'client_order_id': order.get('clientOrderId'),
                    'time': datetime.fromtimestamp(int(order.get('time', 0)) / 1000).strftime('%H:%M:%S')
                })
            
            return processed_orders
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def print_balance_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –±–∞–ª–∞–Ω—Å—É"""
        balance = self.get_balance_info()
        if not balance:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
            return
        
        print("=" * 60)
        print(f"üí∞ –ë–ê–õ–ê–ù–° –§–¨–Æ–ß–ï–†–°–û–í ({NETWORK_MODE})")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        print(f"üíº –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:     {balance['total_wallet_balance']:.4f} USDT")
        print(f"üìä –ë–∞–ª–∞–Ω—Å —Å —É—á–µ—Ç–æ–º –ø–æ–∑–∏—Ü–∏–π:   {balance['total_margin_balance']:.4f} USDT")
        print(f"üíö –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å:          {balance['available_balance']:.4f} USDT")
        print(f"üìà –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è P&L:       {balance['total_unrealized_pnl']:.4f} USDT")
        
        # –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        print(f"üîí –ú–∞—Ä–∂–∞ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö:          {balance['total_position_initial_margin']:.4f} USDT")
        print(f"üìã –ú–∞—Ä–∂–∞ –≤ –æ—Ä–¥–µ—Ä–∞—Ö:           {balance['total_open_order_initial_margin']:.4f} USDT")
        print(f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥:        {balance['max_withdraw_amount']:.4f} USDT")
        print(f"‚ö° –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Ä–∂–∏:         {balance['margin_ratio']:.2f}%")
        
        # –†–∞—Å—á–µ—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        risk_amount = balance['available_balance'] * (RISK_PERCENT / 100)
        print(f"\nüéØ –¢–û–†–ì–û–í–´–ï –†–ê–°–ß–ï–¢–´ (Risk: {RISK_PERCENT}%)")
        print(f"üí∞ –°—É–º–º–∞ –Ω–∞ —Å–¥–µ–ª–∫—É:           {risk_amount:.4f} USDT")
        print(f"‚ö° –ü–ª–µ—á–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:        {FUTURES_LEVERAGE}x")
        
        print("=" * 60)
    
    def print_positions_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–∑–∏—Ü–∏—è–º"""
        positions = self.get_open_positions()
        
        print(f"\nüìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ({len(positions)})")
        print("=" * 80)
        
        if not positions:
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        total_pnl = 0
        
        for pos in positions:
            total_pnl += pos['unrealized_pnl']
            
            # –¶–≤–µ—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è PnL
            pnl_indicator = "üìà" if pos['unrealized_pnl'] > 0 else "üìâ" if pos['unrealized_pnl'] < 0 else "‚ûñ"
            side_indicator = "üü¢" if pos['side'] == 'LONG' else "üî¥"
            
            table_data.append([
                f"{side_indicator} {pos['symbol']}",
                pos['side'],
                f"{pos['size']:.4f}",
                f"{pos['entry_price']:.4f}",
                f"{pos['mark_price']:.4f}",
                f"{pnl_indicator} {pos['unrealized_pnl']:.4f}",
                f"{pos['roe_percent']:.2f}%",
                f"{pos['leverage']}x",
                pos['margin_type']
            ])
        
        headers = ['–°–∏–º–≤–æ–ª', '–°—Ç–æ—Ä–æ–Ω–∞', '–†–∞–∑–º–µ—Ä', '–í—Ö–æ–¥', '–¢–µ–∫—É—â–∞—è', 'PnL', 'ROE%', '–ü–ª–µ—á–æ', '–¢–∏–ø']
        print(tabulate(table_data, headers=headers, tablefmt='grid', floatfmt='.4f'))
        
        # –ò—Ç–æ–≥–æ–≤–∞—è PnL
        pnl_color = "üìà –ü—Ä–∏–±—ã–ª—å" if total_pnl > 0 else "üìâ –£–±—ã—Ç–æ–∫" if total_pnl < 0 else "‚ûñ –ù–æ–ª—å"
        print(f"\nüí∞ –û–±—â–∞—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è PnL: {pnl_color}: {total_pnl:.4f} USDT")
    
    def print_orders_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ä–¥–µ—Ä–∞–º"""
        orders = self.get_open_orders()
        
        print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê ({len(orders)})")
        print("=" * 80)
        
        if not orders:
            print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        
        for order in orders:
            side_indicator = "üü¢" if order['side'] == 'BUY' else "üî¥"
            type_indicator = "üí∞" if order['type'] == 'LIMIT' else "‚ö°" if order['type'] == 'MARKET' else "üõë"
            
            price_display = f"{order['price']:.4f}" if order['price'] > 0 else "MARKET"
            stop_display = f"{order['stop_price']:.4f}" if order['stop_price'] > 0 else "-"
            
            table_data.append([
                f"{side_indicator} {order['symbol']}",
                f"{type_indicator} {order['type']}",
                order['side'],
                f"{order['quantity']:.4f}",
                price_display,
                stop_display,
                order['time_in_force'],
                order['time'],
                str(order['order_id'])[-6:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä ID
            ])
        
        headers = ['–°–∏–º–≤–æ–ª', '–¢–∏–ø', '–°—Ç–æ—Ä–æ–Ω–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–¶–µ–Ω–∞', '–°—Ç–æ–ø', 'TIF', '–í—Ä–µ–º—è', 'ID']
        print(tabulate(table_data, headers=headers, tablefmt='grid'))
    
    def export_to_json(self, filename: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"futures_report_{timestamp}.json"
        
        try:
            data = {
                'timestamp': datetime.now().isoformat(),
                'network': NETWORK_MODE,
                'balance': self.get_balance_info(),
                'positions': self.get_open_positions(),
                'orders': self.get_open_orders()
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return ""
    
    def run_full_report(self, save_json: bool = False) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤...")
        
        if not self.client:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance API")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            self.get_account_info()
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç—ã
            self.print_balance_summary()
            self.print_positions_summary()
            self.print_orders_summary()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if save_json:
                filename = self.export_to_json()
                if filename:
                    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            
            print(f"\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Binance')
    parser.add_argument('--json', action='store_true', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª')
    parser.add_argument('--balance-only', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å')
    parser.add_argument('--positions-only', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏')
    parser.add_argument('--orders-only', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ä–¥–µ—Ä–∞')
    
    args = parser.parse_args()
    
    monitor = FuturesMonitor()
    
    if not monitor.client:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä")
        sys.exit(1)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        monitor.get_account_info()
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        if args.balance_only:
            monitor.print_balance_summary()
        elif args.positions_only:
            monitor.print_positions_summary()
        elif args.orders_only:
            monitor.print_orders_summary()
        else:
            # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            monitor.run_full_report(save_json=args.json)
    
    except KeyboardInterrupt:
        print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
