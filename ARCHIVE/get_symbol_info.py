#!/usr/bin/env python3
"""
Get Symbol Info - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
======================================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–∞—Ö –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç
–µ—ë –Ω–∞–ø—Ä—è–º—É—é —Å Binance API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

Author: HEDGER
Version: 2.0 - Updated to use Symbol Cache
"""

from binance.client import Client
from symbol_cache import get_symbol_cache
from utils import logger
import config

def get_symbol_info_from_api(symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –Ω–∞–ø—Ä—è–º—É—é —Å Binance API"""
    try:
        client = Client(
            api_key=config.BINANCE_API_KEY,
            api_secret=config.BINANCE_API_SECRET,
            testnet=config.BINANCE_TESTNET
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        exchange_info = client.futures_exchange_info()
        
        for symbol_info in exchange_info['symbols']:
            if symbol_info['symbol'] == symbol:
                print(f"üìä === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–ú–í–û–õ–ï {symbol} (API) ===")
                print(f"   Status: {symbol_info['status']}")
                print(f"   Base Asset: {symbol_info['baseAsset']}")
                print(f"   Quote Asset: {symbol_info['quoteAsset']}")
                
                print(f"\nüîß === –§–ò–õ–¨–¢–†–´ ===")
                for filter_info in symbol_info['filters']:
                    if filter_info['filterType'] == 'PRICE_FILTER':
                        print(f"   PRICE_FILTER:")
                        print(f"     Min Price: {filter_info['minPrice']}")
                        print(f"     Max Price: {filter_info['maxPrice']}")
                        print(f"     Tick Size: {filter_info['tickSize']}")
                    elif filter_info['filterType'] == 'LOT_SIZE':
                        print(f"   LOT_SIZE:")
                        print(f"     Min Qty: {filter_info['minQty']}")
                        print(f"     Max Qty: {filter_info['maxQty']}")
                        print(f"     Step Size: {filter_info['stepSize']}")
                break
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

def get_symbol_info_from_cache(symbol: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –∏–∑ –∫—ç—à–∞"""
    try:
        cache = get_symbol_cache()
        info = cache.get_symbol_info(symbol)
        
        if info:
            print(f"üíæ === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–ú–í–û–õ–ï {symbol} (CACHE) ===")
            print(f"   Status: {info['status']}")
            print(f"   Tick Size: {info['tick_size']}")
            print(f"   Step Size: {info['step_size']}")
            print(f"   Min Price: {info['min_price']}")
            print(f"   Max Price: {info['max_price']}")
            print(f"   Min Qty: {info['min_qty']}")
            print(f"   Max Qty: {info['max_qty']}")
            print(f"   Price Precision: {info['precision_price']}")
            print(f"   Qty Precision: {info['precision_qty']}")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            test_price = 50000.123456789
            test_qty = 0.123456789
            
            rounded_price = cache.round_price(symbol, test_price)
            rounded_qty = cache.round_quantity(symbol, test_qty)
            
            print(f"\nüß™ === –¢–ï–°–¢ –û–ö–†–£–ì–õ–ï–ù–ò–Ø ===")
            print(f"   –¶–µ–Ω–∞: {test_price:.9f} ‚Üí {rounded_price:.9f}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {test_qty:.9f} ‚Üí {rounded_qty:.9f}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞
            valid_price, valid_qty, is_valid = cache.validate_order_params(symbol, test_price, test_qty)
            print(f"\n‚úÖ === –í–ê–õ–ò–î–ê–¶–ò–Ø –û–†–î–ï–†–ê ===")
            print(f"   –í–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞: {valid_price:.9f}")
            print(f"   –í–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {valid_qty:.9f}")
            print(f"   –û—Ä–¥–µ—Ä –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
            
        else:
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å init_symbol_cache.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∞: {e}")

def compare_symbols(symbols: list):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫—ç—à–∞"""
    print(f"üìä === –°–†–ê–í–ù–ï–ù–ò–ï –°–ò–ú–í–û–õ–û–í ===")
    cache = get_symbol_cache()
    
    print(f"{'Symbol':<12} {'Tick Size':<15} {'Step Size':<15} {'Status':<10}")
    print("-" * 65)
    
    for symbol in symbols:
        info = cache.get_symbol_info(symbol)
        if info:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å –±–∏—Ä–∂–∏ (—Å—Ç—Ä–æ–∫–∏)
            tick_size = str(info['tick_size'])
            step_size = str(info['step_size'])
            print(f"{symbol:<12} {tick_size:<15} {step_size:<15} {info['status']:<10}")
        else:
            print(f"{symbol:<12} {'N/A':<15} {'N/A':<15} {'N/A':<10}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    symbols_to_test = ['BTCUSDT', 'ETHUSDT', 'NKNUSDT', 'SOLUSDT', 'DOGEUSDT']
    
    print("üöÄ === GET SYMBOL INFO V2.0 ===")
    print(f"üåê –†–µ–∂–∏–º: {'TESTNET' if config.BINANCE_TESTNET else 'MAINNET'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
    cache = get_symbol_cache()
    stats = cache.get_cache_stats()
    print(f"\nüíæ === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê ===")
    print(f"   –°–∏–º–≤–æ–ª–æ–≤ –≤ –∫—ç—à–µ: {stats['cached_symbols']}")
    print(f"   –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω: {stats['cache_valid']}")
    print(f"   –í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞: {stats['cache_age']}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã
    print()
    compare_symbols(symbols_to_test)
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    test_symbol = 'NKNUSDT'
    print(f"\nüìã === –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
    get_symbol_info_from_cache(test_symbol)
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)
    print(f"\nüîç –•–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ API? (–º–µ–¥–ª–µ–Ω–Ω–æ)")
    print(f"–†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–¥–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é —Å API")
    get_symbol_info_from_api(test_symbol)

if __name__ == "__main__":
    main()
