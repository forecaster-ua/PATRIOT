"""
Signal Analyzer - –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (Fixed Version)
=========================================================

–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤.
–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Ü–µ–Ω–µ.

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v2.0:
- –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è retry –ª–æ–≥–∏–∫–∏
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤

Author: HEDGER
Version: 2.0 - Fixed
"""

import time
import threading
from typing import Dict, List, Set, Optional, Tuple, Mapping
from datetime import datetime, timezone
from contextlib import contextmanager

# Local imports
from api_client import api_client
from config import TIMEFRAMES, MAX_API_RETRIES, RETRY_DELAY_SEC
from utils import logger

# –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
MAX_TICKER_PROCESSING_TIME = 120  # –ú–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ç–∏–∫–µ—Ä
MAX_TIMEFRAME_PROCESSING_TIME = 45  # –ú–∞–∫—Å–∏–º—É–º 45 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º
API_TIMEOUT_SEC = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
MIN_RETRY_DELAY = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É retry
MAX_RETRY_DELAY = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É retry


class TimeoutError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    pass


class ProcessingInterrupted(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    pass


class TimeoutManager:
    """–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    
    def __init__(self, seconds: int, operation_name: str):
        self.seconds = seconds
        self.operation_name = operation_name
        self.timer = None
        self.timed_out = False
        
    def _timeout_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
        self.timed_out = True
        logger.warning(f"‚è∞ Timeout triggered for {self.operation_name} after {self.seconds}s")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞"""
        self.timer = threading.Timer(self.seconds, self._timeout_handler)
        self.timer.start()
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞"""
        if self.timer:
            self.timer.cancel()
            
    def check_timeout(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∏ –≤—ã–±—Ä–æ—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        if self.timed_out:
            raise TimeoutError(f"Timeout after {self.seconds}s during {self.operation_name}")


@contextmanager
def timeout_context(seconds: int, operation_name: str):
    """
    –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
    
    Args:
        seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
        operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    timeout_manager = TimeoutManager(seconds, operation_name)
    timeout_manager.start()
    
    try:
        yield timeout_manager
    finally:
        timeout_manager.stop()


class SignalAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–æ–≤
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    2. –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏ —Ü–µ–Ω–µ
    3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    4. –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è –∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
    """
    
    def __init__(self, ticker: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        
        Args:
            ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTCUSDT")
        """
        self.ticker = ticker
        self.timeframes = TIMEFRAMES
        self.price_threshold = 0.005  # 0.5% - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–∞—Ö –≤—Ö–æ–¥–∞
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏
        self.start_time = None
        self.processing_interrupted = False
        
        logger.debug(f"Initialized SignalAnalyzer for {ticker}")

    def fetch_all_signals(self, stop_event=None) -> Dict[str, Optional[Dict]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            
        Returns:
            Dict[str, Optional[Dict]]: –°–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        """
        logger.info(f"üîç Starting signal fetch for {self.ticker}")
        self.start_time = time.time()
        signals = {}
        
        try:
            with timeout_context(MAX_TICKER_PROCESSING_TIME, f"fetching signals for {self.ticker}") as timeout_mgr:
                for i, timeframe in enumerate(self.timeframes):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                    timeout_mgr.check_timeout()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                    if stop_event and stop_event.is_set():
                        logger.info(f"üõë Signal fetching interrupted for {self.ticker}")
                        self.processing_interrupted = True
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    elapsed = time.time() - self.start_time
                    if elapsed > MAX_TICKER_PROCESSING_TIME:
                        logger.warning(f"‚è∞ Ticker processing timeout for {self.ticker} after {elapsed:.1f}s")
                        break
                    
                    logger.info(f"üì° Fetching signal: {self.ticker} {timeframe} ({i+1}/{len(self.timeframes)})")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    signal = self._fetch_single_signal_with_timeout(timeframe, stop_event)
                    
                    if signal:
                        signals[timeframe] = signal
                        logger.info(f"‚úÖ Signal received: {self.ticker} {timeframe}")
                    else:
                        logger.warning(f"‚ùå No signal: {self.ticker} {timeframe}")
                        signals[timeframe] = None
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
                    if not stop_event or not stop_event.is_set():
                        time.sleep(0.5)
                        
        except TimeoutError as e:
            logger.error(f"‚è∞ Timeout during signal fetching for {self.ticker}: {e}")
            self.processing_interrupted = True
        except Exception as e:
            logger.error(f"‚ùå Unexpected error during signal fetching for {self.ticker}: {e}")
            self.processing_interrupted = True
        
        finally:
            total_elapsed = time.time() - self.start_time if self.start_time else 0
            logger.info(
                f"üìä Signals summary for {self.ticker}: "
                f"{len([s for s in signals.values() if s])}/{len(self.timeframes)} received "
                f"in {total_elapsed:.1f}s"
            )
        
        return signals

    def _fetch_single_signal_with_timeout(self, timeframe: str, stop_event=None) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ç–∞–π–º–∞—É—Ç–æ–≤
        
        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ None
        """
        try:
            with timeout_context(MAX_TIMEFRAME_PROCESSING_TIME, f"{self.ticker} {timeframe}") as timeout_mgr:
                return self._fetch_single_signal(timeframe, stop_event, timeout_mgr)
        except TimeoutError as e:
            logger.error(f"‚è∞ Timeframe timeout: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error in timeframe processing: {e}")
            return None

    def _fetch_single_signal(self, timeframe: str, stop_event=None, timeout_mgr=None) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π retry –ª–æ–≥–∏–∫–æ–π
        
        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            timeout_mgr: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–∞—É—Ç–æ–≤
            
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ None
        """
        retry_delay = MIN_RETRY_DELAY
        
        for attempt in range(1, MAX_API_RETRIES + 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if timeout_mgr:
                timeout_mgr.check_timeout()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ
            if stop_event and stop_event.is_set():
                logger.info(f"üõë Retry interrupted for {self.ticker} {timeframe}")
                break
                
            try:
                logger.debug(f"üîÑ Attempt {attempt}/{MAX_API_RETRIES}: {self.ticker} {timeframe}")
                
                # –ó–∞–ø—Ä–æ—Å –∫ API —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                signal = self._api_call_with_timeout(timeframe, timeout_mgr)
                
                if signal and self._validate_signal_data(signal):
                    logger.debug(f"‚úÖ Valid signal received on attempt {attempt}")
                    return signal
                else:
                    logger.warning(f"‚ö†Ô∏è Invalid/empty signal data: {self.ticker} {timeframe} (attempt {attempt})")
                    
            except TimeoutError as e:
                logger.error(f"‚è∞ API timeout on attempt {attempt}: {self.ticker} {timeframe}")
            except Exception as e:
                logger.error(f"‚ùå API error attempt {attempt}: {self.ticker} {timeframe} - {str(e)}")
                
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if attempt < MAX_API_RETRIES:
                if stop_event and stop_event.is_set():
                    break
                    
                logger.debug(f"‚è≥ Waiting {retry_delay}s before retry...")
                time.sleep(retry_delay)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (exponential backoff)
                retry_delay = min(retry_delay * 1.5, MAX_RETRY_DELAY)
            else:
                logger.error(f"‚ùå All {MAX_API_RETRIES} attempts failed for {self.ticker} {timeframe}")
                    
        return None

    def _api_call_with_timeout(self, timeframe: str, timeout_mgr=None) -> Optional[Dict]:
        """
        –í—ã–∑–æ–≤ API —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        
        Args:
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            timeout_mgr: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–∞—É—Ç–æ–≤
            
        Returns:
            Optional[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç API –∏–ª–∏ None
        """
        try:
            with timeout_context(API_TIMEOUT_SEC, f"API call {self.ticker} {timeframe}") as api_timeout_mgr:
                start_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
                if timeout_mgr:
                    timeout_mgr.check_timeout()
                    
                result = api_client.get_signal(self.ticker, timeframe)
                
                elapsed = time.time() - start_time
                logger.debug(f"üì° API call completed in {elapsed:.2f}s for {self.ticker} {timeframe}")
                
                return result
                
        except TimeoutError:
            logger.error(f"‚è∞ API call timeout for {self.ticker} {timeframe}")
            raise
        except Exception as e:
            logger.error(f"‚ùå API call error for {self.ticker} {timeframe}: {e}")
            raise

    def analyze_convergence(self, signals: Mapping[str, Optional[Dict]]) -> Optional[Set[str]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            signals: –°–ª–æ–≤–∞—Ä—å —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            
        Returns:
            Optional[Set[str]]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –∏–ª–∏ None
        """
        try:
            with timeout_context(10, f"convergence analysis for {self.ticker}") as timeout_mgr:
                return self._analyze_convergence_internal(signals, timeout_mgr)
        except TimeoutError as e:
            logger.error(f"‚è∞ Convergence analysis timeout: {e}")
            return None

    def _analyze_convergence_internal(self, signals: Mapping[str, Optional[Dict]], timeout_mgr=None) -> Optional[Set[str]]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–æ–∂–¥–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if timeout_mgr:
            timeout_mgr.check_timeout()
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        valid_signals = {tf: signal for tf, signal in signals.items() if signal is not None}
        
        if not valid_signals or len(valid_signals) < 2:
            logger.debug(f"üìä Not enough valid signals for convergence analysis: {len(valid_signals)}")
            return None
            
        matched_timeframes = set()
        timeframe_list = list(valid_signals.keys())
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        for i, tf1 in enumerate(timeframe_list):
            for tf2 in timeframe_list[i+1:]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                if timeout_mgr:
                    timeout_mgr.check_timeout()
                
                if self._check_convergence(valid_signals[tf1], valid_signals[tf2]):
                    matched_timeframes.update([tf1, tf2])
                    logger.debug(f"üéØ Convergence found: {tf1} + {tf2} for {self.ticker}")
        
        if matched_timeframes and len(matched_timeframes) >= 2:
            logger.info(f"üéØ Convergence detected for {self.ticker}: {sorted(matched_timeframes)}")
            return matched_timeframes
        else:
            logger.info(f"üìä No convergence found for {self.ticker}")
            return None

    def _check_convergence(self, signal1: Dict, signal2: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–∏–≥–Ω–∞–ª–∞–º–∏
        
        Args:
            signal1, signal2: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª—ã —Å—Ö–æ–∂–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            same_direction = signal1['signal'] == signal2['signal']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å —Ü–µ–Ω –≤—Ö–æ–¥–∞
            price_proximity = self._check_price_proximity(
                signal1['entry_price'], 
                signal2['entry_price']
            )
            
            convergent = same_direction and price_proximity
            
            if convergent:
                logger.debug(
                    f"‚úÖ Convergence detected: {signal1['signal']} | "
                    f"Prices: {signal1['entry_price']:.6f} vs {signal2['entry_price']:.6f} | "
                    f"Diff: {abs(signal1['entry_price'] - signal2['entry_price']):.6f}"
                )
            else:
                logger.debug(
                    f"‚ùå No convergence: Direction match: {same_direction} | "
                    f"Price proximity: {price_proximity} | "
                    f"Prices: {signal1['entry_price']:.6f} vs {signal2['entry_price']:.6f}"
                )
                
            return convergent
            
        except Exception as e:
            logger.error(f"‚ùå Error checking convergence: {e}")
            return False

    def _check_price_proximity(self, price1: float, price2: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å –¥–≤—É—Ö —Ü–µ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö threshold
        
        Args:
            price1, price2: –¶–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–∏
        """
        try:
            if not price1 or not price2 or price1 <= 0 or price2 <= 0:
                return False
                
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å
            avg_price = (price1 + price2) / 2
            price_diff = abs(price1 - price2)
            relative_diff = price_diff / avg_price
            
            is_close = relative_diff <= self.price_threshold
            
            logger.debug(
                f"üí∞ Price comparison: {price1:.6f} vs {price2:.6f} | "
                f"Relative diff: {relative_diff:.4f} | "
                f"Threshold: {self.price_threshold} | "
                f"Within range: {is_close}"
            )
                
            return is_close
            
        except Exception as e:
            logger.error(f"‚ùå Error in price proximity check: {e}")
            return False

    def create_signal_data(self, matched_timeframes: Set[str], signals: Mapping[str, Optional[Dict]]) -> Optional[Dict]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            matched_timeframes: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            signals: –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            
        Returns:
            Optional[Dict]: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        try:
            with timeout_context(15, f"signal data creation for {self.ticker}") as timeout_mgr:
                return self._create_signal_data_internal(matched_timeframes, signals, timeout_mgr)
        except TimeoutError as e:
            logger.error(f"‚è∞ Signal data creation timeout: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Error creating signal data: {e}")
            return None

    def _create_signal_data_internal(self, matched_timeframes: Set[str], signals: Mapping[str, Optional[Dict]], timeout_mgr=None) -> Dict:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if timeout_mgr:
            timeout_mgr.check_timeout()
            
        if not matched_timeframes or len(matched_timeframes) < 2:
            raise ValueError("Need at least 2 matching timeframes")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        valid_matched_signals: Dict[str, Dict] = {}
        for tf in matched_timeframes:
            if tf in signals and signals[tf] is not None:
                valid_matched_signals[tf] = signals[tf]  # type: ignore
        
        if len(valid_matched_signals) < 2:
            raise ValueError("Not enough valid signals in matched timeframes")
            
        logger.info(f"üìã Creating signal data for {self.ticker} with timeframes: {sorted(valid_matched_signals.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        if timeout_mgr:
            timeout_mgr.check_timeout()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∫–∞–∫ –±–∞–∑—É
        first_tf = next(iter(valid_matched_signals.keys()))
        base_signal = valid_matched_signals[first_tf]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        for tf, signal in valid_matched_signals.items():
            logger.info(
                f"  üìä {tf}: {signal['signal']} | "
                f"Entry: {signal['entry_price']:.6f} | "
                f"Stop: {signal['stop_loss']:.6f} | "
                f"Target: {signal['take_profit']:.6f} | "
                f"Confidence: {signal['confidence']:.3f}"
            )
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        avg_entry = self._safe_calculate_average([valid_matched_signals[tf]['entry_price'] for tf in valid_matched_signals])
        avg_stop = self._safe_calculate_average([valid_matched_signals[tf]['stop_loss'] for tf in valid_matched_signals])
        avg_take_profit = self._safe_calculate_average([valid_matched_signals[tf]['take_profit'] for tf in valid_matched_signals])
        avg_confidence = self._safe_calculate_average([valid_matched_signals[tf]['confidence'] for tf in valid_matched_signals])
        
        logger.info(
            f"üìà Averaged values for {self.ticker}: "
            f"Entry: {avg_entry:.6f} | Stop: {avg_stop:.6f} | "
            f"Target: {avg_take_profit:.6f} | Confidence: {avg_confidence:.3f}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        consolidated_signal = {
            'ticker': self.ticker,
            'matched_timeframes': sorted(valid_matched_signals.keys()),
            'timeframes_str': ', '.join(sorted(valid_matched_signals.keys())),
            'signal': base_signal['signal'],
            'current_price': base_signal['current_price'],
            'entry_price': avg_entry,
            'stop_loss': avg_stop,
            'take_profit': avg_take_profit,
            'confidence': avg_confidence,
            'dominance_change_percent': self._safe_calculate_average([
                valid_matched_signals[tf].get('dominance_change_percent', 0) for tf in valid_matched_signals
            ]),
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'raw_signals': valid_matched_signals,
            'processing_time': time.time() - self.start_time if self.start_time else 0,
            'was_interrupted': self.processing_interrupted
        }
        
        logger.info(
            f"üìà Signal data created for {self.ticker}: "
            f"{consolidated_signal['signal']} at {consolidated_signal['entry_price']:.6f} "
            f"(processed in {consolidated_signal['processing_time']:.1f}s)"
        )
        
        return consolidated_signal

    def _safe_calculate_average(self, values: List[float]) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        try:
            valid_values = [v for v in values if v and v != 0 and not (isinstance(v, float) and (v != v))]  # –∏—Å–∫–ª—é—á–∞–µ–º NaN
            return sum(valid_values) / len(valid_values) if valid_values else 0.0
        except Exception as e:
            logger.error(f"‚ùå Error calculating average: {e}")
            return 0.0

    def _validate_signal_data(self, signal: Dict) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
        Args:
            signal: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        try:
            if not signal or not isinstance(signal, dict):
                logger.warning("‚ùå Signal is not a valid dictionary")
                return False
            
            required_fields = ['signal', 'current_price', 'entry_price', 'stop_loss', 'take_profit']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            for field in required_fields:
                if field not in signal:
                    logger.warning(f"‚ùå Missing required field: {field}")
                    return False
                    
                if signal[field] is None:
                    logger.warning(f"‚ùå Field {field} is None")
                    return False
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
            if signal['signal'] not in ['LONG', 'SHORT']:
                logger.warning(f"‚ùå Invalid signal direction: {signal['signal']}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –Ω–µ NaN
            price_fields = ['current_price', 'entry_price', 'stop_loss', 'take_profit']
            for field in price_fields:
                try:
                    value = float(signal[field])
                    if value <= 0 or value != value:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN
                        logger.warning(f"‚ùå Invalid price value for {field}: {value}")
                        return False
                except (ValueError, TypeError):
                    logger.warning(f"‚ùå Price field {field} is not a valid number: {signal[field]}")
                    return False
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error validating signal data: {e}")
            return False

    def analyze_ticker(self, stop_event=None) -> Optional[Dict]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        
        Args:
            stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            
        Returns:
            Optional[Dict]: –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ None
        """
        logger.info(f"üîç Starting comprehensive analysis for {self.ticker}")
        analysis_start = time.time()
        
        try:
            with timeout_context(MAX_TICKER_PROCESSING_TIME, f"full analysis of {self.ticker}"):
                # 1. –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ –≤—Å–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
                signals = self.fetch_all_signals(stop_event)
                
                if not signals or self.processing_interrupted:
                    logger.info(f"‚ùå No signals received or processing interrupted for {self.ticker}")
                    return None
                    
                # 2. –ò—â–µ–º —Å—Ö–æ–∂–¥–µ–Ω–∏—è
                matched_timeframes = self.analyze_convergence(signals)
                
                if not matched_timeframes:
                    logger.info(f"üìä No convergence found for {self.ticker}")
                    return None
                    
                # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                signal_data = self.create_signal_data(matched_timeframes, signals)
                
                if signal_data:
                    analysis_time = time.time() - analysis_start
                    logger.info(f"‚úÖ Analysis completed successfully for {self.ticker} in {analysis_time:.1f}s")
                    return signal_data
                else:
                    logger.error(f"‚ùå Failed to create signal data for {self.ticker}")
                    return None
                
        except TimeoutError as e:
            logger.error(f"‚è∞ Analysis timeout for {self.ticker}: {e}")
            return None
        except ProcessingInterrupted:
            logger.info(f"üõë Analysis interrupted for {self.ticker}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Analysis failed for {self.ticker}: {str(e)}", exc_info=True)
            return None
        finally:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            self._cleanup_resources()

    def _cleanup_resources(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.processing_interrupted = False
            self.start_time = None
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            import gc
            gc.collect()
            
        except Exception as e:
            logger.debug(f"‚ö†Ô∏è Warning during resource cleanup: {e}")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        try:
            self._cleanup_resources()
        except:
            pass


# Utility function for external use
def analyze_ticker_signals(ticker: str, stop_event=None) -> Optional[Dict]:
    """
    Convenience function –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    
    Args:
        ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        stop_event: Event –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        
    Returns:
        Optional[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None
    """
    analyzer = None
    try:
        analyzer = SignalAnalyzer(ticker)
        return analyzer.analyze_ticker(stop_event)
    except Exception as e:
        logger.error(f"‚ùå Error in analyze_ticker_signals for {ticker}: {e}")
        return None
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        if analyzer:
            try:
                analyzer._cleanup_resources()
            except:
                pass
        del analyzer


if __name__ == "__main__":
    '''
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ - –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è LTCUSDT
    '''
    import logging
    logging.basicConfig(level=logging.INFO)
    
    test_ticker = "LTCUSDT"
    logger.info(f"üß™ Testing signal analysis for {test_ticker}")
    
    result = analyze_ticker_signals(test_ticker)
    
    if result:
        print(f"‚úÖ Signal found for {test_ticker}:")
        print(f"Direction: {result['signal']}")
        print(f"Entry: {result['entry_price']}")
        print(f"Timeframes: {result['timeframes_str']}")
        print(f"Processing time: {result.get('processing_time', 0):.1f}s")
        print(f"Was interrupted: {result.get('was_interrupted', False)}")
    else:
        print(f"‚ùå No signal for {test_ticker}")