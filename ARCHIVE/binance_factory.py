import asyncio
import logging
import logging.config
from binance.client import Client
from binance.exceptions import BinanceAPIException
from datetime import datetime
import config

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å UTF-8
logging.config.dictConfig(config.LOGGING_CONFIG)
logger = logging.getLogger(__name__)

class BinanceFactory:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance Factory —Å API –∫–ª—é—á–∞–º–∏ –∏–∑ config –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        try:
            self.api_key = config.BINANCE_API_KEY
            self.api_secret = config.BINANCE_API_SECRET
            self.testnet = config.BINANCE_TESTNET
            self.network_mode = config.NETWORK_MODE
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if not self.api_key or not self.api_secret:
                error_msg = f"‚ùå –û–®–ò–ë–ö–ê: API –∫–ª—é—á–∏ Binance {self.network_mode} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
                print(error_msg)
                print(f"–¢—Ä–µ–±—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
                if self.testnet:
                    print("- BINANCE_TESTNET_API_KEY")
                    print("- BINANCE_TESTNET_API_SECRET")
                else:
                    print("- BINANCE_MAINNET_API_KEY")
                    print("- BINANCE_MAINNET_API_SECRET")
                logger.error(error_msg)
                raise ValueError(f"Binance {self.network_mode} API keys are not configured")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            print(f"üîß [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance Factory –≤ —Ä–µ–∂–∏–º–µ: {self.network_mode}")
            logger.info(f"Initializing Binance Factory in {self.network_mode} mode")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º testnet
            try:
                if self.testnet:
                    self.client = Client(self.api_key, self.api_secret, testnet=True)
                    print(f"üß™ [INIT] Using TESTNET mode")
                else:
                    self.client = Client(self.api_key, self.api_secret)
                    print(f"‚ö° [INIT] Using MAINNET mode (PRODUCTION)")
            except Exception as e:
                error_msg = f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BINANCE API ({self.network_mode}): {e}"
                print(error_msg)
                logger.error(error_msg)
                raise ConnectionError(f"Failed to connect to Binance API: {e}")
            
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
            try:
                print(f"[INIT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance Futures API ({self.network_mode})...")
                account_info = self.client.futures_account()
                print(f"‚úÖ [INIT] Futures account accessible on {self.network_mode}")
                logger.info(f"Futures account verified on {self.network_mode}")
            except BinanceAPIException as e:
                error_msg = f"‚ùå –û–®–ò–ë–ö–ê BINANCE API ({self.network_mode}): {e.message} (–∫–æ–¥: {e.code})"
                print(error_msg)
                logger.error(error_msg)
                raise ConnectionError(f"Binance API error: {e.message} (code: {e.code})")
            except Exception as e:
                error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BINANCE ({self.network_mode}): {e}"
                print(error_msg)
                logger.error(error_msg)
                raise ConnectionError(f"Critical Binance connection error: {e}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config
            self.capital_percentage = getattr(config, 'CAPITAL_PERCENTAGE', 0.1)  # 10% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.order_queue = []  # –û—á–µ—Ä–µ–¥—å –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç ticker_monitor
            self.stop_event = asyncio.Event()  # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
            print(f"‚úÖ [INIT] Binance Factory (FUTURES) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.network_mode}")
            print(f"üí∞ [INIT] –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤: {self.capital_percentage * 100}%")
            logger.info(f"Binance Factory (FUTURES) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.network_mode}")
            
        except Exception as e:
            error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò BINANCE FACTORY: {e}"
            print(error_msg)
            logger.error(error_msg)
            raise

    async def check_account_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞"""
        try:
            print("\n[FUTURES ACCOUNT] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = self.client.futures_account()
            
            # –ë–∞–ª–∞–Ω—Å —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
            assets = [a for a in account_info['assets'] if float(a['walletBalance']) > 0]
            positions = [p for p in account_info['positions'] if float(p['positionAmt']) != 0]
            
            print(f"[FUTURES ACCOUNT] –ú–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å: {account_info['canTrade']}")
            print(f"[FUTURES ACCOUNT] –ú–æ–∂–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–∏—Ä–æ–≤–∞—Ç—å: {account_info['canDeposit']}")
            print(f"[FUTURES ACCOUNT] –ú–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å: {account_info['canWithdraw']}")
            print(f"[FUTURES ACCOUNT] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {account_info['totalWalletBalance']} USDT")
            print(f"[FUTURES ACCOUNT] –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {account_info['availableBalance']} USDT")
            
            print(f"\n[FUTURES BALANCE] –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:")
            for asset in assets:
                wallet_balance = float(asset['walletBalance'])
                available_balance = float(asset['availableBalance'])
                print(f"  {asset['asset']}: {wallet_balance:.8f} (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_balance:.8f})")
            
            print(f"\n[FUTURES POSITIONS] –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
            if positions:
                for pos in positions:
                    side = "LONG" if float(pos['positionAmt']) > 0 else "SHORT"
                    print(f"  {pos['symbol']}: {side} {abs(float(pos['positionAmt']))} @ {pos['entryPrice']}")
                    print(f"    PnL: {pos['unrealizedProfit']} USDT, –ú–∞—Ä–∂–∞: {pos['initialMargin']} USDT")
            else:
                print("  –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: {len(assets)}, –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            return account_info
            
        except BinanceAPIException as e:
            print(f"[ERROR] API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞: {e}")
            logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞: {e}")
            return None
        except Exception as e:
            print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞: {e}")
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞: {e}")
            return None

    async def check_open_positions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Å—á–µ—Ç–µ"""
        try:
            print("\n[FUTURES POSITIONS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.client.futures_position_information()
            open_positions = [p for p in positions if float(p['positionAmt']) != 0]
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            open_orders = self.client.futures_get_open_orders()
            
            print(f"[FUTURES POSITIONS] –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
            print(f"[FUTURES POSITIONS] –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            if open_positions:
                print("\n[OPEN POSITIONS]:")
                for pos in open_positions:
                    side = "LONG" if float(pos['positionAmt']) > 0 else "SHORT"
                    pnl = float(pos['unrealizedProfit'])
                    pnl_pct = float(pos['percentage'])
                    print(f"  {pos['symbol']}: {side} {abs(float(pos['positionAmt']))}")
                    print(f"    –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entryPrice']}")
                    print(f"    –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {pos['markPrice']}")
                    print(f"    PnL: {pnl:.4f} USDT ({pnl_pct:.2f}%)")
                    print(f"    –ú–∞—Ä–∂–∞: {pos['initialMargin']} USDT")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ä–¥–µ—Ä–∞—Ö
            if open_orders:
                print("\n[OPEN ORDERS]:")
                for order in open_orders:
                    print(f"  –û—Ä–¥–µ—Ä {order['orderId']}: {order['symbol']} {order['side']} {order['type']}")
                    print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['origQty']}, –¶–µ–Ω–∞: {order['price']}")
                    print(f"    –°—Ç–∞—Ç—É—Å: {order['status']}, –í—Ä–µ–º—è: {order['time']}")
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}, –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
            return {'positions': open_positions, 'orders': open_orders}
            
        except BinanceAPIException as e:
            print(f"[ERROR] API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}")
            logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {'positions': [], 'orders': []}
        except Exception as e:
            print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}")
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {'positions': [], 'orders': []}

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞"""
        print("\n" + "="*50)
        print("–û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –§–¨–Æ–ß–ï–†–°–ù–û–ì–û –°–ß–ï–¢–ê")
        print("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        account_info = await self.check_account_status()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
        positions_info = await self.check_open_positions()
        
        # –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞
        print(f"\n[REPORT] –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if account_info:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É BTC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                btc_price = float(self.client.futures_symbol_ticker(symbol="BTCUSDT")['price'])
                total_balance = float(account_info['totalWalletBalance'])
                available_balance = float(account_info['availableBalance'])
                
                total_btc_value = total_balance / btc_price
                print(f"[REPORT] –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} USDT (~{total_btc_value:.6f} BTC)")
                print(f"[REPORT] –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {available_balance:.2f} USDT")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö
                open_positions = positions_info.get('positions', [])
                open_orders = positions_info.get('orders', [])
                
                if open_positions:
                    total_pnl = sum(float(pos['unrealizedProfit']) for pos in open_positions)
                    print(f"[REPORT] –û–±—â–∏–π PnL: {total_pnl:.2f} USDT")
                
                print(f"[REPORT] –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_positions)}")
                print(f"[REPORT] –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(open_orders)}")
                
            except Exception as e:
                print(f"[REPORT] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")
        
        print("="*50)
        logger.info("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

    async def place_order(self, symbol, side, quantity, order_type='MARKET', price=None, stop_loss=None, take_profit=None):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            print(f"\n[FUTURES ORDER] –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {symbol} {side} {quantity}")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            order_params = {
                'symbol': symbol,
                'side': side,
                'type': order_type,
                'quantity': quantity,
            }
            
            if order_type == 'LIMIT' and price:
                order_params['price'] = price
                order_params['timeInForce'] = 'GTC'
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            result = self.client.futures_create_order(**order_params)
            
            print(f"[FUTURES ORDER] –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
            print(f"  ID: {result['orderId']}")
            print(f"  –°–∏–º–≤–æ–ª: {result['symbol']}")
            print(f"  –°—Ç–æ—Ä–æ–Ω–∞: {result['side']}")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result['origQty']}")
            print(f"  –°—Ç–∞—Ç—É—Å: {result['status']}")
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ Stop Loss –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if stop_loss and result['status'] == 'FILLED':
                try:
                    stop_side = 'SELL' if side == 'BUY' else 'BUY'
                    stop_params = {
                        'symbol': symbol,
                        'side': stop_side,
                        'type': 'STOP_MARKET',
                        'quantity': quantity,
                        'stopPrice': stop_loss,
                    }
                    
                    stop_result = self.client.futures_create_order(**stop_params)
                    print(f"[STOP LOSS] Stop Loss –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {stop_result['orderId']} @ {stop_loss}")
                    
                except Exception as e:
                    print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å Stop Loss: {e}")
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ Take Profit –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if take_profit and result['status'] == 'FILLED':
                try:
                    tp_side = 'SELL' if side == 'BUY' else 'BUY'
                    tp_params = {
                        'symbol': symbol,
                        'side': tp_side,
                        'type': 'TAKE_PROFIT_MARKET',
                        'quantity': quantity,
                        'stopPrice': take_profit,
                    }
                    
                    tp_result = self.client.futures_create_order(**tp_params)
                    print(f"[TAKE PROFIT] Take Profit –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {tp_result['orderId']} @ {take_profit}")
                    
                except Exception as e:
                    print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å Take Profit: {e}")
            
            logger.info(f"–§—å—é—á–µ—Ä—Å–Ω—ã–π –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {result['orderId']} {symbol} {side} {quantity}")
            return result
            
        except BinanceAPIException as e:
            print(f"[ERROR] API –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
        except Exception as e:
            print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return None

    def get_current_price(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Ä—ã–Ω–∫–µ"""
        try:
            ticker = self.client.futures_symbol_ticker(symbol=symbol)
            current_price = float(ticker['price'])
            print(f"[FUTURES PRICE] –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price:.8f}")
            return current_price
        except BinanceAPIException as e:
            print(f"[ERROR] API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")
            logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")
            return None
        except Exception as e:
            print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {e}")
            return None

    def validate_price(self, symbol, entry_price, tolerance_percent=1.0):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã (current_price vs entry_price)"""
        try:
            current_price = self.get_current_price(symbol)
            
            if current_price is None:
                print(f"[VALIDATION] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
                return False
            
            # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            price_diff_percent = abs((current_price - entry_price) / entry_price * 100)
            
            is_valid = price_diff_percent <= tolerance_percent
            
            print(f"[VALIDATION] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –¥–ª—è {symbol}:")
            print(f"  –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.8f}")
            print(f"  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}")
            print(f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {price_diff_percent:.2f}%")
            print(f"  –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {tolerance_percent}%")
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–í–ê–õ–ò–î–ù–ê' if is_valid else '–ù–ï –í–ê–õ–ò–î–ù–ê'}")
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã {symbol}: entry={entry_price:.8f}, current={current_price:.8f}, diff={price_diff_percent:.2f}%, valid={is_valid}")
            
            return is_valid
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã: {e}")
            return False

    def calculate_order_quantity(self, symbol, side, current_price):
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
            account_info = self.client.futures_account()
            available_balance = float(account_info['availableBalance'])
            
            # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –¥–ª—è –æ—Ä–¥–µ—Ä–∞
            order_amount = available_balance * self.capital_percentage
            
            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            quantity = order_amount / current_price
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
            exchange_info = self.client.futures_exchange_info()
            step_size = None
            
            for symbol_info in exchange_info['symbols']:
                if symbol_info['symbol'] == symbol:
                    for filter in symbol_info['filters']:
                        if filter['filterType'] == 'LOT_SIZE':
                            step_size = float(filter['stepSize'])
                            break
                    break
            
            if step_size:
                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —à–∞–≥–∞
                quantity = round(quantity / step_size) * step_size
            
            print(f"[FUTURES CALC] –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è {symbol}:")
            print(f"  –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {available_balance:.2f} USDT")
            print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞–ø–∏—Ç–∞–ª–∞: {self.capital_percentage * 100}%")
            print(f"  –°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞: {order_amount:.2f} USDT")
            print(f"  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.8f}")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.8f}")
            
            return quantity
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            return 0

    async def process_order_from_monitor(self, order_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–∞ –æ—Ç ticker_monitor"""
        try:
            print(f"\n[MONITOR] –ü–æ–ª—É—á–µ–Ω –æ—Ä–¥–µ—Ä –æ—Ç ticker_monitor: {order_data}")
            
            symbol = order_data.get('symbol')
            side = order_data.get('side')
            entry_price = float(order_data.get('price', 0))
            tolerance_percent = float(order_data.get('tolerance_percent', 1.0))
            
            if not symbol or not side or entry_price <= 0:
                print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {order_data}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã
            if not self.validate_price(symbol, entry_price, tolerance_percent):
                print(f"[ERROR] –¶–µ–Ω–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è {symbol}")
                return None
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            current_price = self.get_current_price(symbol)
            if current_price is None:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
                return None
            
            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            quantity = self.calculate_order_quantity(symbol, side, current_price)
            
            if quantity <= 0:
                print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ä–¥–µ—Ä–∞: {quantity}")
                return None
            
            # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            result = await self.place_order(
                symbol=symbol, 
                side=side, 
                quantity=quantity,
                stop_loss=order_data.get('stop_loss'),
                take_profit=order_data.get('take_profit')
            )
            
            return result
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
            return None

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        print(f"\n[START] –ó–∞–ø—É—Å–∫ Binance Factory...")
        logger.info("–ó–∞–ø—É—Å–∫ Binance Factory")
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            await self.generate_report()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while not self.stop_event.is_set():
                print(f"\n[MAIN] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Ä–¥–µ—Ä–æ–≤...")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                while self.order_queue:
                    order_data = self.order_queue.pop(0)
                    await self.process_order_from_monitor(order_data)
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥)
                try:
                    await asyncio.wait_for(self.stop_event.wait(), timeout=60.0)
                    break  # –ï—Å–ª–∏ stop_event —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
                except asyncio.TimeoutError:
                    # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                    await self.generate_report()
                
        except KeyboardInterrupt:
            print(f"\n[STOP] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Binance Factory...")
            logger.info("Binance Factory –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            print(f"[SHUTDOWN] Binance Factory –∑–∞–≤–µ—Ä—à–µ–Ω")
            logger.info("Binance Factory shutdown complete")

    def add_order_to_queue(self, order_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ ticker_monitor)"""
        self.order_queue.append(order_data)
        print(f"[QUEUE] –û—Ä–¥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {order_data}")
        logger.info(f"–û—Ä–¥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {order_data}")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Binance Factory"""
        self.stop_event.set()
        print(f"[STOP] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        logger.info("Binance Factory stop signal received")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    factory = BinanceFactory()
    
    # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ü–µ–Ω—ã
    # factory.add_order_to_queue({
    #     'symbol': 'BTCUSDT',
    #     'side': 'BUY',
    #     'price': 50000,  # entry_price –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    #     'tolerance_percent': 1.0  # –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ %
    # })
    
    asyncio.run(factory.run())