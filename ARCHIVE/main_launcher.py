"""
Main Launcher - –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã PATRIOT
=====================================================

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã:
- ticker_monitor (–∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤)
- order_generator (—Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
- binance_factory (—Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞)

Author: HEDGER
Version: 1.0
"""

import asyncio
import logging
import logging.config
import sys
import threading
import time
from datetime import datetime
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from ticker_monitor import TickerMonitor
from binance_factory import BinanceFactory
from order_generator import set_binance_factory
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å UTF-8
logging.config.dictConfig(config.LOGGING_CONFIG)
logger = logging.getLogger(__name__)

class PatriotLauncher:
    """–ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.ticker_monitor = None
        self.binance_factory = None
        self.binance_thread = None
        self.stop_event = threading.Event()
        
        logger.info("Starting PATRIOT Trading System...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._initialize_components()
        
    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance Factory —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            logger.info("Initializing Binance Factory...")
            print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API...")
            
            try:
                self.binance_factory = BinanceFactory()
                print("‚úÖ Binance Factory —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except ConnectionError as e:
                error_msg = f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BINANCE: {e}"
                print(error_msg)
                logger.error(error_msg)
                print("\nüõë –ü–†–û–ì–†–ê–ú–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API")
                print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π –≤ .env —Ñ–∞–π–ª–µ")
                print("2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                print("3. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Binance")
                sys.exit(1)
            except ValueError as e:
                error_msg = f"‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò: {e}"
                print(error_msg)
                logger.error(error_msg)
                print("\nüõë –ü–†–û–ì–†–ê–ú–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –≤ .env —Ñ–∞–π–ª–µ")
                sys.exit(1)
            except Exception as e:
                error_msg = f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê BINANCE: {e}"
                print(error_msg)
                logger.error(error_msg)
                print("\nüõë –ü–†–û–ì–†–ê–ú–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏")
                sys.exit(1)
            
            # 2. –°–≤—è–∑—ã–≤–∞–µ–º order_generator —Å binance_factory
            logger.info("Connecting Order Generator with Binance Factory...")
            set_binance_factory(self.binance_factory)
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Ticker Monitor
            logger.info("Initializing Ticker Monitor...")
            self.ticker_monitor = TickerMonitor(
                tickers_file=config.DEFAULT_TICKERS_FILE,
                max_workers=config.MAX_WORKERS,
                ticker_delay=config.TICKER_DELAY
            )
            
            logger.info("All components initialized successfully")
            print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            error_msg = f"Failed to initialize components: {e}"
            logger.error(error_msg)
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
            raise
    
    def start_binance_factory(self):
        """–ó–∞–ø—É—Å–∫ Binance Factory –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_binance_factory():
            try:
                logger.info("Starting Binance Factory...")
                if self.binance_factory is not None:
                    asyncio.run(self.binance_factory.run())
                else:
                    logger.error("Binance Factory is not initialized")
            except Exception as e:
                logger.error(f"Binance Factory error: {e}")
        
        self.binance_thread = threading.Thread(
            target=run_binance_factory,
            name="BinanceFactory",
            daemon=True
        )
        self.binance_thread.start()
        logger.info("Binance Factory started in background")
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("Starting PATRIOT Trading Orchestra...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Binance Factory –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            self.start_binance_factory()
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Binance Factory
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Ticker Monitor –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            logger.info("Starting Ticker Monitor...")
            if self.ticker_monitor is not None:
                self.ticker_monitor.run()
            else:
                logger.error("Ticker Monitor is not initialized")
            
        except KeyboardInterrupt:
            logger.info("Graceful shutdown requested...")
            self.shutdown()
        except Exception as e:
            logger.error(f"Critical error in main launcher: {e}")
            self.shutdown()
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("Shutting down PATRIOT Trading System...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Ticker Monitor
        if self.ticker_monitor:
            self.ticker_monitor.shutdown()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Binance Factory
        if self.binance_factory:
            self.binance_factory.stop()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ Binance Factory
        if self.binance_thread and self.binance_thread.is_alive():
            self.binance_thread.join(timeout=5)
        
        logger.info("PATRIOT Trading System shutdown complete")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã PATRIOT...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not hasattr(config, 'BINANCE_API_KEY') or not config.BINANCE_API_KEY:
            error_msg = f"‚ùå Binance API –∫–ª—é—á–∏ –¥–ª—è {config.NETWORK_MODE} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
            logger.error(error_msg)
            print(error_msg)
            print(f"\nüîß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è {config.NETWORK_MODE}:")
            if config.BINANCE_TESTNET:
                print("set BINANCE_TESTNET_API_KEY=your_testnet_api_key")
                print("set BINANCE_TESTNET_API_SECRET=your_testnet_api_secret")
                print("set BINANCE_TESTNET=true")
            else:
                print("set BINANCE_MAINNET_API_KEY=your_production_api_key")
                print("set BINANCE_MAINNET_API_SECRET=your_production_api_secret")
                print("set BINANCE_TESTNET=false")
            print("\n–ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Ç–∏–∫–µ—Ä–æ–≤
        tickers_file = Path(config.DEFAULT_TICKERS_FILE)
        if not tickers_file.exists():
            error_msg = f"‚ùå –§–∞–π–ª —Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {tickers_file}"
            logger.error(error_msg)
            print(error_msg)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        try:
            launcher = PatriotLauncher()
            launcher.run()
        except SystemExit:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            pass
        except Exception as e:
            error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: {e}"
            print(error_msg)
            logger.error(error_msg)
            return
        
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        logger.info("Shutdown requested by user")
    except Exception as e:
        error_msg = f"üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}"
        print(error_msg)
        logger.error(error_msg)
        import traceback
        logger.debug(traceback.format_exc())

if __name__ == "__main__":
    main()
