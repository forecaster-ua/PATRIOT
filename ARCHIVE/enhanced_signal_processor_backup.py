"""
Enhanced Signal Processor - –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
=========================================================

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π PATRIOT:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç signal_analyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç order_generator –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
- –î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫—É —Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
- MVP: –†–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Binance Testnet

Author: HEDGER
Version: 2.1 - MVP with Real Orders
"""

from typing import Dict, List, Set, Optional
from statistics import mean
import logging
import time
import threading
from binance.client import Client
from binance.exceptions import BinanceAPIException
from decimal import Decimal, ROUND_DOWN
import json
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from signal_analyzer import SignalAnalyzer
from order_generator import process_trading_signal
from telegram_bot import telegram_bot
from utils import logger
import config

class OrderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    
    def __init__(self, binance_client: Client, telegram_bot):
        self.client = binance_client
        self.telegram = telegram_bot
        self.active_orders: Dict[str, Dict] = {}  # {order_id: order_info}
        self.monitoring = False
        self.monitor_thread = None
        
    def add_order_group(self, entry_order: Dict, stop_order: Dict, take_order: Dict, signal_data: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        group_id = f"group_{entry_order['orderId']}"
        
        order_group = {
            'group_id': group_id,
            'entry_order': entry_order,
            'stop_order': stop_order,
            'take_order': take_order,
            'signal_data': signal_data,
            'status': 'ACTIVE',
            'created_at': datetime.now().isoformat()
        }
        
        self.active_orders[group_id] = order_group
        logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –æ—Ä–¥–µ—Ä–æ–≤ {group_id} –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
        self._send_order_created_notification(order_group)
        
    def _send_order_created_notification(self, order_group: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –æ—Ä–¥–µ—Ä–æ–≤"""
        signal = order_group['signal_data']
        entry = order_group['entry_order']
        stop = order_group['stop_order']
        take = order_group['take_order']
        
        message = f"""
üöÄ <b>–û–†–î–ï–†–ê –í–´–°–¢–ê–í–õ–ï–ù–´</b>
        
üìä <b>–ü–∞—Ä–∞:</b> {signal['ticker']}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal['signal']}
üí∞ <b>–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</b> {entry.get('executedQty', entry.get('origQty', 'N/A'))}

üìã <b>–û–†–î–ï–†–ê:</b>
üéØ Entry (Market): #{entry['orderId']} - {entry['status']}
üõë Stop Loss: #{stop['orderId']} - {stop['price']}
üéØ Take Profit: #{take['orderId']} - {take['price']}

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
üîç <b>–¢–∞–π–º—Ñ—Ä–µ–π–º—ã:</b> {signal.get('timeframes_str', 'N/A')}
"""
        
        try:
            self.telegram.send_message(message)
            logger.info("üì± ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ä–¥–µ—Ä–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        except Exception as e:
            logger.error(f"üì± ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.monitoring:
            return
            
        self.monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_orders, daemon=True)
        self.monitor_thread.start()
        logger.info("üëÅÔ∏è –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤"""
        self.monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_orders(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        while self.monitoring:
            try:
                if not self.active_orders:
                    time.sleep(5)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –æ—Ä–¥–µ—Ä–æ–≤
                groups_to_remove = []
                
                for group_id, order_group in self.active_orders.items():
                    if order_group['status'] != 'ACTIVE':
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤
                    updated = self._check_order_group_status(order_group)
                    
                    if updated:
                        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        if order_group['status'] in ['COMPLETED', 'CANCELLED']:
                            groups_to_remove.append(group_id)
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                for group_id in groups_to_remove:
                    del self.active_orders[group_id]
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –æ—Ä–¥–µ—Ä–æ–≤ {group_id}")
                
                time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
                time.sleep(5)
    
    def _check_order_group_status(self, order_group: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥—Ä—É–ø–ø—ã –æ—Ä–¥–µ—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö"""
        try:
            symbol = order_group['signal_data']['ticker']
            stop_order = order_group['stop_order']
            take_order = order_group['take_order']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤
            if config.BINANCE_TESTNET:
                stop_status = self.client.futures_get_order(symbol=symbol, orderId=stop_order['orderId'])
                take_status = self.client.futures_get_order(symbol=symbol, orderId=take_order['orderId'])
            else:
                stop_status = self.client.get_order(symbol=symbol, orderId=stop_order['orderId'])
                take_status = self.client.get_order(symbol=symbol, orderId=take_order['orderId'])
            
            updated = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Stop Loss
            if stop_order['status'] != stop_status['status']:
                old_status = stop_order['status']
                stop_order['status'] = stop_status['status']
                logger.info(f"üõë Stop Loss –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å: {old_status} ‚Üí {stop_status['status']}")
                
                if stop_status['status'] == 'FILLED':
                    # Stop Loss –∏—Å–ø–æ–ª–Ω–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º Take Profit
                    self._cancel_order(symbol, take_order['orderId'])
                    order_group['status'] = 'COMPLETED'
                    self._send_stop_filled_notification(order_group)
                    updated = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Take Profit
            if take_order['status'] != take_status['status']:
                old_status = take_order['status']
                take_order['status'] = take_status['status']
                logger.info(f"üéØ Take Profit –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å: {old_status} ‚Üí {take_status['status']}")
                
                if take_status['status'] == 'FILLED':
                    # Take Profit –∏—Å–ø–æ–ª–Ω–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º Stop Loss
                    self._cancel_order(symbol, stop_order['orderId'])
                    order_group['status'] = 'COMPLETED'
                    self._send_take_filled_notification(order_group)
                    updated = True
            
            return updated
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return False
    
    def _cancel_order(self, symbol: str, order_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Ä–¥–µ—Ä"""
        try:
            if config.BINANCE_TESTNET:
                result = self.client.futures_cancel_order(symbol=symbol, orderId=order_id)
            else:
                result = self.client.cancel_order(symbol=symbol, orderId=order_id)
            logger.info(f"‚ùå –û—Ä–¥–µ—Ä #{order_id} –æ—Ç–º–µ–Ω–µ–Ω: {result['status']}")
            return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ #{order_id}: {e}")
            return None
    
    def _send_stop_filled_notification(self, order_group: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ Stop Loss"""
        signal = order_group['signal_data']
        stop_order = order_group['stop_order']
        
        message = f"""
üõë <b>STOP LOSS –ò–°–ü–û–õ–ù–ï–ù</b>

üìä <b>–ü–∞—Ä–∞:</b> {signal['ticker']}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal['signal']}
üí∞ <b>–¶–µ–Ω–∞ Stop:</b> {stop_order['price']}
üìã <b>Order ID:</b> #{stop_order['orderId']}

‚ùå Take Profit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
"""
        
        try:
            self.telegram.send_message(message)
            logger.info("üì± ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Stop Loss –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"üì± ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _send_take_filled_notification(self, order_group: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ Take Profit"""
        signal = order_group['signal_data']
        take_order = order_group['take_order']
        
        message = f"""
üéØ <b>TAKE PROFIT –ò–°–ü–û–õ–ù–ï–ù</b>

üìä <b>–ü–∞—Ä–∞:</b> {signal['ticker']}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {signal['signal']}
üí∞ <b>–¶–µ–Ω–∞ Take:</b> {take_order['price']}
üìã <b>Order ID:</b> #{take_order['orderId']}

‚ùå Stop Loss –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω
üí∞ <b>–ü—Ä–∏–±—ã–ª—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!</b>
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
"""
        
        try:
            self.telegram.send_message(message)
            logger.info("üì± ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Take Profit –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"üì± ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

class EnhancedSignalProcessor:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ö–æ–∂–¥–µ–Ω–∏–π
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π PATRIOT
    MVP: –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Binance Testnet
    """
    
    def __init__(self, ticker: str, price_threshold: float = 0.005, risk_percent: float = 5.0):
        self.ticker = ticker
        self.timeframes = config.TIMEFRAMES
        self.price_threshold = price_threshold
        self.min_matching_tfs = 2
        self.risk_percent = risk_percent  # 5% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞
        self.binance_client = None
        self._init_binance_client()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤
        self.order_manager = None
        if self.binance_client:
            self.order_manager = OrderManager(self.binance_client, telegram_bot)
            self.order_manager.start_monitoring()
        
        logger.info(f"üìä Enhanced Signal Processor initialized for {ticker} (Risk: {risk_percent}%)")
    
    def _init_binance_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
            if not config.BINANCE_API_KEY or not config.BINANCE_API_SECRET:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ –¥–ª—è {config.NETWORK_MODE}")
                logger.error(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BINANCE_{config.NETWORK_MODE}_API_KEY/SECRET")
                self.binance_client = None
                return
            
            logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞...")
            logger.info(f"üåê –†–µ–∂–∏–º: {config.NETWORK_MODE} (Testnet: {config.BINANCE_TESTNET})")
            logger.info(f"üîë API Key: ...{config.BINANCE_API_KEY[-8:]}")
            
            self.binance_client = Client(
                api_key=config.BINANCE_API_KEY,
                api_secret=config.BINANCE_API_SECRET,
                testnet=config.BINANCE_TESTNET
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if config.BINANCE_TESTNET:
                # –î–ª—è testnet –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
                account_info = self.binance_client.futures_account()
                logger.info(f"‚úÖ Binance –ø–æ–¥–∫–ª—é—á–µ–Ω (Testnet: {config.BINANCE_TESTNET})")
                logger.info(f"üí∞ –§—å—é—á–µ—Ä—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {account_info['totalWalletBalance']} USDT")
                logger.info(f"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: {account_info['availableBalance']} USDT")
            else:
                # –î–ª—è mainnet –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
                account_info = self.binance_client.get_account()
                logger.info(f"‚úÖ Binance –ø–æ–¥–∫–ª—é—á–µ–Ω (Testnet: {config.BINANCE_TESTNET})")
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {account_info['accountType']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            logger.error(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ {config.NETWORK_MODE}")
            self.binance_client = None
    
    def check_price_proximity(self, price1: float, price2: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å —Ü–µ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö threshold"""
        if None in (price1, price2) or price1 <= 0 or price2 <= 0:
            return False
        return abs(price1 - price2) / ((price1 + price2) / 2) <= self.price_threshold
    
    def analyze_convergence(self, signals: Dict[str, Dict]) -> Optional[Dict]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        """
        if len(signals) < self.min_matching_tfs:
            logger.debug(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(signals)}")
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        long_signals = {tf: sig for tf, sig in signals.items() if sig.get('signal') == 'LONG'}
        short_signals = {tf: sig for tf, sig in signals.items() if sig.get('signal') == 'SHORT'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for direction, direction_signals in [('LONG', long_signals), ('SHORT', short_signals)]:
            if len(direction_signals) < self.min_matching_tfs:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å —Ü–µ–Ω –≤—Ö–æ–¥–∞
            converged_tfs = self._find_price_convergence(direction_signals)
            
            if len(converged_tfs) >= self.min_matching_tfs:
                logger.info(f"üéØ –°–•–û–ñ–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û: {self.ticker} {direction} –Ω–∞ {len(converged_tfs)} –¢–§")
                return self._create_convergence_signal(direction, converged_tfs, direction_signals)
        
        logger.debug(f"–°—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {self.ticker}")
        return None
    
    def _find_price_convergence(self, signals: Dict[str, Dict]) -> Set[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Å –±–ª–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –≤—Ö–æ–¥–∞"""
        converged_tfs = set()
        timeframes = list(signals.keys())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä—ã –¢–§
        for i, tf1 in enumerate(timeframes):
            for tf2 in timeframes[i+1:]:
                price1 = signals[tf1].get('entry_price')
                price2 = signals[tf2].get('entry_price')
                
                if price1 is not None and price2 is not None and self.check_price_proximity(price1, price2):
                    converged_tfs.update([tf1, tf2])
                    logger.debug(f"–°—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω: {tf1}={price1:.6f}, {tf2}={price2:.6f}")
        
        return converged_tfs
    
    def _create_convergence_signal(self, direction: str, timeframes: Set[str], signals: Dict) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∏–∑ —Å—Ö–æ–∂–¥–µ–Ω–∏–π"""
        tf_list = list(timeframes)
        
        # –£—Å—Ä–µ–¥–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        entry_prices = [signals[tf]['entry_price'] for tf in tf_list]
        stop_losses = [signals[tf].get('stop_loss', 0) for tf in tf_list]
        take_profits = [signals[tf].get('take_profit', 0) for tf in tf_list]
        confidences = [signals[tf].get('confidence', 50) for tf in tf_list]
        
        converged_signal = {
            'ticker': self.ticker,
            'signal': direction,
            'timeframes': tf_list,
            'entry_price': round(mean(entry_prices), 6),
            'stop_loss': round(mean(stop_losses), 6) if any(stop_losses) else None,
            'take_profit': round(mean(take_profits), 6) if any(take_profits) else None,
            'confidence': mean(confidences) / 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0.0-1.0
            'convergence_count': len(timeframes),
            'price_threshold': self.price_threshold,
            'timestamp': signals[tf_list[0]].get('timestamp')
        }
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∏–≥–Ω–∞–ª —Å—Ö–æ–∂–¥–µ–Ω–∏—è: {direction} {converged_signal['entry_price']:.6f}")
        return converged_signal
    
    def get_symbol_info(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        if not self.binance_client:
            return None
            
        try:
            if config.BINANCE_TESTNET:
                exchange_info = self.binance_client.futures_exchange_info()
                symbol_info = next((s for s in exchange_info['symbols'] if s['symbol'] == self.ticker), None)
            else:
                symbol_info = self.binance_client.get_symbol_info(self.ticker)
            return symbol_info
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {e}")
            return None
    
    def get_price_precision(self, symbol_info: Dict) -> int:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            price_filter = next((f for f in symbol_info['filters'] if f['filterType'] == 'PRICE_FILTER'), None)
            if price_filter:
                tick_size = float(price_filter['tickSize'])
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                return len(str(tick_size).rstrip('0').split('.')[-1]) if '.' in str(tick_size) else 0
            return 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∑–Ω–∞–∫–∞
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã: {e}")
            return 2
    
    def round_price(self, price: float, precision: int) -> float:
        """–û–∫—Ä—É–≥–ª—è–µ—Ç —Ü–µ–Ω—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        return round(price, precision)
    
    def get_account_balance(self) -> Dict[str, Dict[str, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.binance_client:
            return {}
        
        try:
            if config.BINANCE_TESTNET:
                # –î–ª—è testnet –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
                account = self.binance_client.futures_account()
                # –°–æ–∑–¥–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                usdt_balance = float(account['availableBalance'])
                balances = {
                    'USDT': {
                        'free': usdt_balance,
                        'locked': float(account['totalWalletBalance']) - usdt_balance,
                        'total': float(account['totalWalletBalance'])
                    }
                }
                return balances
            else:
                # –î–ª—è mainnet –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
                account = self.binance_client.get_account()
                balances: Dict[str, Dict[str, float]] = {}
                
                for balance in account['balances']:
                    asset = balance['asset']
                    free = float(balance['free'])
                    locked = float(balance['locked'])
                    total = free + locked
                    
                    if total > 0:
                        balances[asset] = {
                            'free': free,
                            'locked': locked,
                            'total': total
                        }
                
                return balances
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return {}
    
    def calculate_position_size(self, signal_data: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
        if not self.binance_client:
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            balances = self.get_account_balance()
            usdt_info = balances.get('USDT', {})
            usdt_balance = usdt_info.get('free', 0.0) if usdt_info else 0.0
            
            if usdt_balance <= 0:
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                return {}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞ (5% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            order_amount_usdt = usdt_balance * (self.risk_percent / 100)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = float(signal_data['entry_price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
            quantity = order_amount_usdt / current_price
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            if config.BINANCE_TESTNET:
                exchange_info = self.binance_client.futures_exchange_info()
                symbol_info = next((s for s in exchange_info['symbols'] if s['symbol'] == self.ticker), None)
            else:
                symbol_info = self.binance_client.get_symbol_info(self.ticker)
            
            if symbol_info:
                # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                lot_size_filter = next((f for f in symbol_info['filters'] if f['filterType'] == 'LOT_SIZE'), None)
                if lot_size_filter:
                    step_size = float(lot_size_filter['stepSize'])
                    # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω–∏–∑ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —à–∞–≥–∞
                    quantity = float(Decimal(str(quantity)).quantize(Decimal(str(step_size)), rounding=ROUND_DOWN))
            
            position_info = {
                'symbol': self.ticker,
                'quantity': quantity,
                'price': current_price,
                'order_amount_usdt': order_amount_usdt,
                'usdt_balance': usdt_balance,
                'risk_percent': self.risk_percent
            }
            
            logger.info(f"üìä –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {self.ticker}:")
            logger.info(f"  üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")
            logger.info(f"  üéØ –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {order_amount_usdt:.2f} USDT ({self.risk_percent}%)")
            logger.info(f"  üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")
            logger.info(f"  üí≤ –¶–µ–Ω–∞: {current_price:.6f}")
            
            return position_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {}
    
    def place_full_order_setup(self, signal_data: Dict) -> Dict:
        """–í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–≤—è–∑–∫—É –æ—Ä–¥–µ—Ä–æ–≤: Market Entry + Stop Loss + Take Profit"""
        if not self.binance_client:
            logger.error("‚ùå Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {}
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_info = self.calculate_position_size(signal_data)
            if not position_info:
                return {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ü–µ–Ω
            symbol_info = self.get_symbol_info()
            price_precision = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if symbol_info:
                price_precision = self.get_price_precision(symbol_info)
                logger.info(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –¥–ª—è {self.ticker}: {price_precision} –∑–Ω–∞–∫–æ–≤")
            
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—ã –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            stop_loss_price = self.round_price(float(signal_data['stop_loss']), price_precision)
            take_profit_price = self.round_price(float(signal_data['take_profit']), price_precision)
            
            logger.info(f"üîß –û–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:")
            logger.info(f"  üõë Stop Loss: {signal_data['stop_loss']:.6f} ‚Üí {stop_loss_price}")
            logger.info(f"  üéØ Take Profit: {signal_data['take_profit']:.6f} ‚Üí {take_profit_price}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            if config.BINANCE_TESTNET:
                try:
                    logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π...")
                    position_mode = self.binance_client.futures_get_position_mode()
                    logger.info(f"üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π: {'Hedge' if position_mode['dualSidePosition'] else 'One-way'}")
                    
                    if not position_mode['dualSidePosition']:
                        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º Hedge (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏)...")
                        self.binance_client.futures_change_position_mode(dualSidePosition=True)
                        logger.info("‚úÖ –†–µ–∂–∏–º Hedge –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π: {e}")
                    logger.info("üí° –ü–æ–ø—Ä–æ–±—É–µ–º –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ—Ä–¥–µ—Ä–∞
            side = Client.SIDE_BUY if signal_data['signal'] == 'LONG' else Client.SIDE_SELL
            position_side = 'LONG' if signal_data['signal'] == 'LONG' else 'SHORT'  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
            
            logger.info(f"üöÄ === –í–´–°–¢–ê–í–õ–Ø–ï–ú –ü–û–õ–ù–£–Æ –°–í–Ø–ó–ö–£ –û–†–î–ï–†–û–í ===")
            logger.info(f"üìä {side} –æ—Ä–¥–µ—Ä –¥–ª—è {self.ticker}")
            logger.info(f"ÔøΩ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position_info['quantity']:.6f}")
            logger.info(f"üéØ Entry: Market")
            logger.info(f"üõë Stop: {signal_data['stop_loss']:.6f}")
            logger.info(f"üéØ Take: {signal_data['take_profit']:.6f}")
            
            # 1. –í—ã—Å—Ç–∞–≤–ª—è–µ–º Entry –æ—Ä–¥–µ—Ä (Market)
            if config.BINANCE_TESTNET:
                # –î–ª—è testnet –∏—Å–ø–æ–ª—å–∑—É–µ–º futures API —Å positionSide
                entry_order = self.binance_client.futures_create_order(
                    symbol=self.ticker,
                    side=side,
                    type=Client.ORDER_TYPE_MARKET,
                    quantity=position_info['quantity'],
                    positionSide=position_side
                )
            else:
                # –î–ª—è mainnet –∏—Å–ø–æ–ª—å–∑—É–µ–º spot API
                entry_order = self.binance_client.create_order(
                    symbol=self.ticker,
                    side=side,
                    type=Client.ORDER_TYPE_MARKET,
                    quantity=position_info['quantity']
                )
            
            logger.info(f"‚úÖ Entry –æ—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω: #{entry_order['orderId']}")
            
            # 2. –í—ã—Å—Ç–∞–≤–ª—è–µ–º Stop Loss –æ—Ä–¥–µ—Ä
            stop_side = Client.SIDE_SELL if signal_data['signal'] == 'LONG' else Client.SIDE_BUY
            if config.BINANCE_TESTNET:
                stop_order = self.binance_client.futures_create_order(
                    symbol=self.ticker,
                    side=stop_side,
                    type='STOP_MARKET',
                    quantity=position_info['quantity'],
                    stopPrice=stop_loss_price,
                    positionSide=position_side
                )
            else:
                stop_order = self.binance_client.create_order(
                    symbol=self.ticker,
                    side=stop_side,
                    type=Client.ORDER_TYPE_STOP_LOSS,
                    quantity=position_info['quantity'],
                    stopPrice=stop_loss_price
                )
            
            logger.info(f"ÔøΩ Stop Loss –≤—ã—Å—Ç–∞–≤–ª–µ–Ω: #{stop_order['orderId']} at {signal_data['stop_loss']:.6f}")
            
            # 3. –í—ã—Å—Ç–∞–≤–ª—è–µ–º Take Profit –æ—Ä–¥–µ—Ä
            take_side = Client.SIDE_SELL if signal_data['signal'] == 'LONG' else Client.SIDE_BUY
            if config.BINANCE_TESTNET:
                take_order = self.binance_client.futures_create_order(
                    symbol=self.ticker,
                    side=take_side,
                    type=Client.ORDER_TYPE_LIMIT,
                    quantity=position_info['quantity'],
                    price=signal_data['take_profit'],
                    timeInForce=Client.TIME_IN_FORCE_GTC,
                    positionSide=position_side
                )
            else:
                take_order = self.binance_client.create_order(
                    symbol=self.ticker,
                    side=take_side,
                    type=Client.ORDER_TYPE_LIMIT,
                    quantity=position_info['quantity'],
                    price=signal_data['take_profit'],
                    timeInForce=Client.TIME_IN_FORCE_GTC
                )
            
            logger.info(f"üéØ Take Profit –≤—ã—Å—Ç–∞–≤–ª–µ–Ω: #{take_order['orderId']} at {signal_data['take_profit']:.6f}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.order_manager:
                self.order_manager.add_order_group(entry_order, stop_order, take_order, signal_data)
            
            order_result = {
                'entry_order': entry_order,
                'stop_order': stop_order,
                'take_order': take_order,
                'position_info': position_info,
                'signal_data': signal_data,
                'success': True
            }
            
            logger.info(f"‚úÖ === –í–°–ï –û–†–î–ï–†–ê –£–°–ü–ï–®–ù–û –í–´–°–¢–ê–í–õ–ï–ù–´ ===")
            
            return order_result
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå Binance API –æ—à–∏–±–∫–∞: {e}")
            return {'success': False, 'error': str(e)}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {'success': False, 'error': str(e)}
    
    def process_ticker(self) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞
        MVP: –ê–Ω–∞–ª–∏–∑ + Telegram + –†–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ Binance
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
        """
        try:
            logger.info(f"üîç === –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó {self.ticker} ===")
            
            # 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º SignalAnalyzer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            analyzer = SignalAnalyzer(self.ticker)
            analysis_result = analyzer.analyze_ticker(stop_event=None)
            
            if not analysis_result:
                logger.info(f"üìä –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {self.ticker}")
                return False
            
            # SignalAnalyzer –£–ñ–ï –ø—Ä–æ–≤–µ—Ä–∏–ª —Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª!
            logger.info(f"üéØ –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù –¥–ª—è {self.ticker}:")
            logger.info(f"  üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {analysis_result['signal']}")
            logger.info(f"  üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {analysis_result['entry_price']:.6f}")
            logger.info(f"  üõë Stop Loss: {analysis_result['stop_loss']:.6f}")
            logger.info(f"  üéØ Take Profit: {analysis_result['take_profit']:.6f}")
            logger.info(f"  ‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {analysis_result['timeframes_str']}")
            logger.info(f"  üìä Confidence: {analysis_result['confidence']:.3f}")
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            try:
                telegram_bot.send_signal(analysis_result)
                logger.info(f"üì± ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            except Exception as e:
                logger.error(f"üì± ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            
            # 3. MVP: –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Å–≤—è–∑–∫—É –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Binance
            if self.binance_client:
                logger.info(f"üöÄ –í—ã—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Å–≤—è–∑–∫—É –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Binance...")
                
                order_result = self.place_full_order_setup(analysis_result)
                
                if order_result.get('success'):
                    logger.info(f"‚úÖ === –ü–û–õ–ù–ê–Ø –°–í–Ø–ó–ö–ê –û–†–î–ï–†–û–í –í–´–°–¢–ê–í–õ–ï–ù–ê ===")
                    logger.info(f"üìã Entry Order ID: {order_result['entry_order']['orderId']}")
                    logger.info(f"ÔøΩ Stop Order ID: {order_result['stop_order']['orderId']}")
                    logger.info(f"üéØ Take Order ID: {order_result['take_order']['orderId']}")
                    logger.info(f"ÔøΩüí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {order_result['position_info']['quantity']:.6f}")
                    logger.info(f"üíµ –°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞: {order_result['position_info']['order_amount_usdt']:.2f} USDT")
                    logger.info(f"üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω")
                    return True
                else:
                    logger.error(f"‚ùå === –û–®–ò–ë–ö–ê –í–´–°–¢–ê–í–õ–ï–ù–ò–Ø –û–†–î–ï–†–û–í ===")
                    logger.error(f"üî• –ü—Ä–∏—á–∏–Ω–∞: {order_result.get('error', 'Unknown error')}")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò {self.ticker} ===")
            logger.error(f"üî• –û—à–∏–±–∫–∞: {e}")
            return False
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.order_manager:
            self.order_manager.stop_monitoring()
            logger.info("üõë Order Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def process_multiple_tickers(tickers: List[str], price_threshold: float = 0.005) -> Dict[str, bool]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–µ—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ö–æ–∂–¥–µ–Ω–∏–π
    
    Args:
        tickers: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        price_threshold: –ü–æ—Ä–æ–≥ –±–ª–∏–∑–æ—Å—Ç–∏ —Ü–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5%)
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å {ticker: success_status}
    """
    results = {}
    
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ö–æ–∂–¥–µ–Ω–∏–π –¥–ª—è {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
    
    for ticker in tickers:
        processor = EnhancedSignalProcessor(ticker, price_threshold)
        results[ticker] = processor.process_ticker()
    
    successful = sum(results.values())
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏")
    
    return results


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MVP —Å –ø–æ–ª–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞–º–∏
if __name__ == "__main__":
    logger.info("üöÄ === –ó–ê–ü–£–°–ö ENHANCED SIGNAL PROCESSOR MVP v2.1 ===")
    logger.info("‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    logger.info("  üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ Stop Loss –∏ Take Profit –æ—Ä–¥–µ—Ä–∞")
    logger.info("  üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    logger.info("  üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö")
    logger.info("  ‚ùå –ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    logger.info(f"üåê –†–µ–∂–∏–º: {'TESTNET' if config.BINANCE_TESTNET else 'MAINNET'}")
    logger.info(f"üéØ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: 5%")
    
    # –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞–º–∏
    test_ticker = "BTCUSDT"
    processor = EnhancedSignalProcessor(test_ticker, risk_percent=5.0)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        balances = processor.get_account_balance()
        if balances:
            logger.info("üí∞ === –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–° ===")
            for asset, balance in balances.items():
                if balance['total'] > 0:
                    logger.info(f"  {asset}: {balance['total']:.6f} (Free: {balance['free']:.6f})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ —Ç–æ—Ä–≥–æ–≤–ª—é
        success = processor.process_ticker()
        
        if success:
            logger.info("üéâ === MVP –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù ===")
            logger.info("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å...")
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: SUCCESS - –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –∏ –ø–æ–ª–Ω–∞—è —Å–≤—è–∑–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞!")
            print("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            logger.info("‚è≥ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (30 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(30)
            
        else:
            logger.info("üìä === MVP –ó–ê–í–ï–†–®–ï–ù –ë–ï–ó –°–ò–ì–ù–ê–õ–ê ===")
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: NO SIGNAL - –°—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤")
    
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        processor.shutdown()
        logger.info("üèÅ === MVP –ó–ê–í–ï–†–®–ï–ù ===")
    
    # # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
    # test_tickers = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
    # logger.info(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_tickers)} —Ç–∏–∫–µ—Ä–æ–≤...")
    # 
    # processors = []
    # try:
    #     for ticker in test_tickers:
    #         proc = EnhancedSignalProcessor(ticker, risk_percent=5.0)
    #         processors.append(proc)
    #         success = proc.process_ticker()
    #         logger.info(f"üìä {ticker}: {'SUCCESS' if success else 'NO SIGNAL'}")
    # 
    #     logger.info("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ (60 —Å–µ–∫—É–Ω–¥)...")
    #     time.sleep(60)
    # 
    # finally:
    #     for proc in processors:
    #         proc.shutdown()
    #     logger.info("üèÅ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
