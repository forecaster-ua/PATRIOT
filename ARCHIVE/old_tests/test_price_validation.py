#!/usr/bin/env python3
"""
üö® –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –¶–ï–ù –õ–ò–ú–ò–¢–ù–´–• –û–†–î–ï–†–û–í
=====================================

Day 0 Task: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é validate_limit_order_price()
"""

from enhanced_signal_processor import AdvancedSignalProcessor
from utils import logger
import time

def test_price_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    logger.info("üß™ === –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –¶–ï–ù –õ–ò–ú–ò–¢–ù–´–• –û–†–î–ï–†–û–í ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = AdvancedSignalProcessor("BTCUSDT", risk_percent=0.5)
    
    if not processor.binance_client:
        logger.error("‚ùå Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC
    current_price = processor.get_current_price()
    logger.info(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTCUSDT: {current_price:.2f}")
    
    if current_price <= 0:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
        return
    
    # –¢–µ—Å—Ç 1: –ö–û–†–†–ï–ö–¢–ù–´–ô LONG (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π)
    logger.info("\nüß™ –¢–µ—Å—Ç 1: –ö–û–†–†–ï–ö–¢–ù–´–ô LONG")
    good_long_signal = {
        'ticker': 'BTCUSDT',
        'signal': 'LONG',
        'entry_price': current_price * 0.99,  # –ù–∞ 1% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        'stop_loss': current_price * 0.97,
        'take_profit': current_price * 1.03
    }
    
    valid, error_msg = processor.validate_limit_order_price(good_long_signal)
    logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–ê–õ–ò–î–ï–ù' if valid else f'‚ùå –û–®–ò–ë–ö–ê: {error_msg}'}")
    
    # –¢–µ—Å—Ç 2: –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô LONG (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π)
    logger.info("\nüß™ –¢–µ—Å—Ç 2: –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô LONG (–¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É)")
    bad_long_signal = {
        'ticker': 'BTCUSDT',
        'signal': 'LONG',
        'entry_price': current_price * 1.01,  # –ù–∞ 1% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã - –û–®–ò–ë–ö–ê!
        'stop_loss': current_price * 0.97,
        'take_profit': current_price * 1.03
    }
    
    valid, error_msg = processor.validate_limit_order_price(bad_long_signal)
    logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–ê–õ–ò–î–ï–ù' if valid else f'‚ùå –û–®–ò–ë–ö–ê (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!): {error_msg}'}")
    
    # –¢–µ—Å—Ç 3: –ö–û–†–†–ï–ö–¢–ù–´–ô SHORT (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π)
    logger.info("\nüß™ –¢–µ—Å—Ç 3: –ö–û–†–†–ï–ö–¢–ù–´–ô SHORT")
    good_short_signal = {
        'ticker': 'BTCUSDT',
        'signal': 'SHORT',
        'entry_price': current_price * 1.01,  # –ù–∞ 1% –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        'stop_loss': current_price * 1.03,
        'take_profit': current_price * 0.97
    }
    
    valid, error_msg = processor.validate_limit_order_price(good_short_signal)
    logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–ê–õ–ò–î–ï–ù' if valid else f'‚ùå –û–®–ò–ë–ö–ê: {error_msg}'}")
    
    # –¢–µ—Å—Ç 4: –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô SHORT (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π)
    logger.info("\nüß™ –¢–µ—Å—Ç 4: –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô SHORT (–¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É)")
    bad_short_signal = {
        'ticker': 'BTCUSDT',
        'signal': 'SHORT',
        'entry_price': current_price * 0.99,  # –ù–∞ 1% –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã - –û–®–ò–ë–ö–ê!
        'stop_loss': current_price * 1.03,
        'take_profit': current_price * 0.97
    }
    
    valid, error_msg = processor.validate_limit_order_price(bad_short_signal)
    logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–ê–õ–ò–î–ï–ù' if valid else f'‚ùå –û–®–ò–ë–ö–ê (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!): {error_msg}'}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—à–∏–±–∫–∏ –≤ Telegram
    logger.info("\nüß™ –¢–µ—Å—Ç 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ Telegram")
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
        result = processor.place_limit_order_with_sl_tp(bad_long_signal)
        success_msg = "‚úÖ –£—Å–ø–µ—Ö" if result['success'] else f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–¥–µ—Ä–∞: {success_msg}")
        
        if not result['success']:
            logger.info("   üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ!")
    except Exception as e:
        logger.error(f"   –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    logger.info("\n‚úÖ === –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===")
    logger.info("üí° –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    test_price_validation()
