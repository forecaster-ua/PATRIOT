"""
Enhanced Signal Processor - –§–∏–Ω–∞–ª—å–Ω–∞—è MVP –≤–µ—Ä—Å–∏—è
============================================

–ü–û–õ–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê:
‚úÖ Market –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
‚úÖ Limit –æ—Ä–¥–µ—Ä–∞ —Å —Ç–æ—á–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚úÖ Stop Loss –∏ Take Profit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞ 10x
‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–ø–∏—Ç–∞–ª–µ
‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
1. –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ signal_analyzer
2. Market/Limit –æ—Ä–¥–µ—Ä–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º leverage + SL/TP
3. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
4. –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏

Author: HEDGER
Version: 3.0 - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è MVP –≥–æ—Ç–æ–≤–∞—è –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
"""

from typing import Dict, Optional
from datetime import datetime
from decimal import Decimal, ROUND_HALF_UP
from binance.client import Client
from binance.exceptions import BinanceAPIException

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from signal_analyzer import SignalAnalyzer
from telegram_bot import telegram_bot
from utils import logger
import config
from symbol_cache import get_symbol_cache, round_price_for_symbol, round_quantity_for_symbol, validate_order_for_symbol

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
DEFAULT_RISK_PERCENT = 2.0  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (2%)
DEFAULT_LEVERAGE = config.FUTURES_LEVERAGE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ—á–æ –∏–∑ config.py

class AdvancedSignalProcessor:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Market –æ—Ä–¥–µ—Ä–∞, Limit –æ—Ä–¥–µ—Ä–∞ + Stop Loss + Take Profit
    """
    
    def __init__(self, ticker: str, risk_percent: float = DEFAULT_RISK_PERCENT):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        Args:
            ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT")
            risk_percent: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ DEFAULT_RISK_PERCENT)
        """
        self.ticker = ticker
        self.risk_percent = risk_percent
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞
        self.binance_client = None
        self._init_binance_client()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        self.symbol_cache = get_symbol_cache()
        
        logger.info(f"üìä Advanced Signal Processor initialized for {ticker} (Risk: {risk_percent}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤
        cache_stats = self.symbol_cache.get_cache_stats()
        if cache_stats['cached_symbols'] == 0:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–∏–º–≤–æ–ª–æ–≤...")
            self.symbol_cache.update_cache()
    
    def _init_binance_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if not config.BINANCE_API_KEY or not config.BINANCE_API_SECRET:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Binance")
                return
            
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞...")
            logger.info(f"üåê –†–µ–∂–∏–º: {'TESTNET' if config.BINANCE_TESTNET else 'MAINNET'}")
            
            self.binance_client = Client(
                api_key=config.BINANCE_API_KEY,
                api_secret=config.BINANCE_API_SECRET,
                testnet=config.BINANCE_TESTNET
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if config.BINANCE_TESTNET:
                account_info = self.binance_client.futures_account()
                logger.info(f"‚úÖ Binance Testnet –ø–æ–¥–∫–ª—é—á–µ–Ω")
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {account_info['totalWalletBalance']} USDT")
            else:
                # –î–ª—è mainnet —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π API
                account_info = self.binance_client.futures_account()
                logger.info(f"‚úÖ Binance Mainnet (Futures) –ø–æ–¥–∫–ª—é—á–µ–Ω")
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å: {account_info['totalWalletBalance']} USDT")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            self.binance_client = None
    
    def get_usdt_balance(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT"""
        if not self.binance_client:
            return 0.0
        
        try:
            if config.BINANCE_TESTNET:
                account = self.binance_client.futures_account()
                return float(account['availableBalance'])
            else:
                # –î–ª—è mainnet —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π API
                account = self.binance_client.futures_account()
                return float(account['availableBalance'])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0
    
    def get_symbol_leverage(self) -> int:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ 10x –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if not self.binance_client:
            return 1
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ 30x
            result = self.binance_client.futures_change_leverage(symbol=self.ticker, leverage=30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(result, dict) and 'leverage' in result:
                leverage = int(result['leverage'])
                logger.info(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
                return leverage
            
            # –ï—Å–ª–∏ API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–ª–µ—á–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 10 (–¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è)
            logger.info("‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: 10x")
            return 10
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ: {e}")
            return 1
    
    def get_current_price(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        if not self.binance_client:
            return 0.0
        
        try:
            ticker_data = self.binance_client.get_symbol_ticker(symbol=self.ticker)
            return float(ticker_data['price'])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {self.ticker}: {e}")
            return 0.0
    
    def validate_limit_order_price(self, signal_data: Dict) -> tuple[bool, str]:
        """
        üö® –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        
        –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
        - LONG: entry_price –î–û–õ–ñ–ù–ê –±—ã—Ç—å –ù–ò–ñ–ï current_price (–ø–æ–∫—É–ø–∞–µ–º –¥–µ—à–µ–≤–ª–µ)
        - SHORT: entry_price –î–û–õ–ñ–ù–ê –±—ã—Ç—å –í–´–®–ï current_price (–ø—Ä–æ–¥–∞–µ–º –¥–æ—Ä–æ–∂–µ)
        
        Returns:
            (bool, str): (valid, error_message)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
            current_price = self.get_current_price()
            if current_price <= 0:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"
            
            entry_price = float(signal_data['entry_price'])
            signal_type = signal_data['signal']
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Ü–µ–Ω
            if signal_type == 'LONG' and entry_price > current_price:
                error_msg = f"‚ùå LONG: –¶–ï–ù–ê {entry_price:.6f} –≤—ã—à–µ –¢–ï–ö–£–©–ï–ô –¶–ï–ù–´ {current_price:.6f}"
                return False, error_msg
            elif signal_type == 'SHORT' and entry_price < current_price:
                error_msg = f"‚ùå SHORT: –¶–ï–ù–ê {entry_price:.6f} –Ω–∏–∂–µ –¢–ï–ö–£–©–ï–ô –¶–ï–ù–´ {current_price:.6f}"
                return False, error_msg
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (>5%)
            price_diff_percent = abs(entry_price - current_price) / current_price * 100
            if price_diff_percent > 5.0:
                warning_msg = f"‚ö†Ô∏è –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –Ω–∞ {price_diff_percent:.1f}% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"
                logger.warning(warning_msg)
            
            logger.info(f"‚úÖ –¶–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞: {signal_type} @ {entry_price:.6f} (—Ç–µ–∫—É—â–∞—è: {current_price:.6f})")
            return True, ""
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω—ã: {e}"
            return False, error_msg
    
    def calculate_position_size(self, entry_price: float) -> tuple:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞"""
        try:
            usdt_balance = self.get_usdt_balance()
            if usdt_balance <= 0:
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                return 0.0, 1, 0.0, 0.0
            
            leverage = self.get_symbol_leverage()
            risk_amount_usdt = usdt_balance * (self.risk_percent / 100)
            position_value_usdt = risk_amount_usdt * leverage
            quantity = position_value_usdt / entry_price
            
            # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤
            quantity = round_quantity_for_symbol(self.ticker, quantity)
            
            logger.info(f"üìä –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏: –ó–∞–ª–æ–≥ {risk_amount_usdt:.2f} USDT √ó {leverage}x = {quantity:.6f} {self.ticker.replace('USDT', '')}")
            
            return quantity, leverage, risk_amount_usdt, position_value_usdt
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0, 1, 0.0, 0.0
    
    def place_simple_market_order(self, signal_data: Dict) -> Dict:
        """–í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π Market –æ—Ä–¥–µ—Ä"""
        if not self.binance_client:
            return {'success': False, 'error': 'Binance client not initialized'}
        
        try:
            side = Client.SIDE_BUY if signal_data['signal'] == 'LONG' else Client.SIDE_SELL
            entry_price = float(signal_data['entry_price'])
            quantity, leverage, risk_amount_usdt, position_value_usdt = self.calculate_position_size(entry_price)
            
            if quantity <= 0:
                return {'success': False, 'error': 'Invalid position size'}
            
            logger.info(f"üöÄ Market –æ—Ä–¥–µ—Ä {signal_data['signal']}: {quantity:.6f} @ {entry_price:.6f}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º positionSide –¥–ª—è Hedge —Ä–µ–∂–∏–º–∞
            position_side = 'LONG' if side == Client.SIDE_BUY else 'SHORT'
            
            if config.BINANCE_TESTNET:
                order = self.binance_client.futures_create_order(
                    symbol=self.ticker,
                    side=side,
                    type=Client.ORDER_TYPE_MARKET,
                    quantity=quantity,
                    positionSide=position_side
                )
            else:
                # –î–ª—è mainnet —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–π API
                order = self.binance_client.futures_create_order(
                    symbol=self.ticker,
                    side=side,
                    type=Client.ORDER_TYPE_MARKET,
                    quantity=quantity,
                    positionSide=position_side
                )
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order['orderId']} –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            
            return {
                'success': True,
                'order_id': order['orderId'],
                'order_data': order,
                'quantity': quantity,
                'entry_price': entry_price,
                'leverage': leverage,
                'risk_amount_usdt': risk_amount_usdt,
                'position_value_usdt': position_value_usdt,
                'executed_price': order.get('fills', [{}])[0].get('price', entry_price) if order.get('fills') else entry_price,
                'timestamp': datetime.now().isoformat(),
                'current_price': entry_price  # –î–ª—è Telegram
            }
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå Binance API Error: {e}")
            return {'success': False, 'error': str(e)}
        except Exception as e:
            logger.error(f"‚ùå Order Error: {e}")
            return {'success': False, 'error': str(e)}
    
    def place_limit_order_with_sl_tp(self, signal_data: Dict) -> Dict:
        """
        –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä + Stop Loss + Take Profit
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ —Å–∏–≥–Ω–∞–ª–∞:
        - entry_price –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞  
        - stop_loss –¥–ª—è –∑–∞—â–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        - take_profit –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–±—ã–ª—å
        """
        if not self.binance_client:
            return {'success': False, 'error': 'Binance client not initialized'}
        
        try:
            # üö® –ù–û–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            valid, error_msg = self.validate_limit_order_price(signal_data)
            if not valid:
                logger.error(f"üö´ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {error_msg}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ Telegram
                try:
                    signal_data_with_timestamp = signal_data.copy()
                    signal_data_with_timestamp['timestamp'] = datetime.now().strftime('%H:%M:%S')
                    telegram_bot.send_error(error_msg, signal_data_with_timestamp)
                except Exception as tg_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: {tg_error}")
                return {'success': False, 'error': error_msg}
            
            side = Client.SIDE_BUY if signal_data['signal'] == 'LONG' else Client.SIDE_SELL
            entry_price = round_price_for_symbol(self.ticker, float(signal_data['entry_price']))
            stop_loss = round_price_for_symbol(self.ticker, float(signal_data.get('stop_loss', 0)))
            take_profit = round_price_for_symbol(self.ticker, float(signal_data.get('take_profit', 0)))
            
            quantity, leverage, risk_amount_usdt, position_value_usdt = self.calculate_position_size(entry_price)
            
            if quantity <= 0:
                return {'success': False, 'error': 'Invalid position size'}
            
            if stop_loss <= 0 or take_profit <= 0:
                return {'success': False, 'error': 'Missing stop_loss or take_profit prices'}
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤
            valid_entry_price, valid_quantity, is_entry_valid = validate_order_for_symbol(self.ticker, entry_price, quantity)
            valid_stop_loss, _, is_stop_valid = validate_order_for_symbol(self.ticker, stop_loss, quantity)
            valid_take_profit, _, is_tp_valid = validate_order_for_symbol(self.ticker, take_profit, quantity)
            
            if not (is_entry_valid and is_stop_valid and is_tp_valid):
                error_msg = f"Order validation failed: Entry={is_entry_valid}, SL={is_stop_valid}, TP={is_tp_valid}"
                logger.error(f"‚ùå {error_msg}")
                return {'success': False, 'error': error_msg}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            entry_price, quantity = valid_entry_price, valid_quantity
            stop_loss, take_profit = valid_stop_loss, valid_take_profit
            
            logger.info(f"üéØ Limit –æ—Ä–¥–µ—Ä {signal_data['signal']}: {quantity:.6f} @ {entry_price:.6f}")
            logger.info(f"üõë Stop Loss: {stop_loss:.6f} | üéØ Take Profit: {take_profit:.6f}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º positionSide –¥–ª—è Hedge —Ä–µ–∂–∏–º–∞
            position_side = 'LONG' if side == Client.SIDE_BUY else 'SHORT'
            
            # 1. –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            main_order = self.binance_client.futures_create_order(
                symbol=self.ticker,
                side=side,
                type=Client.ORDER_TYPE_LIMIT,
                quantity=quantity,
                price=str(entry_price),
                positionSide=position_side,
                timeInForce='GTC'  # Good Till Cancelled
            )
            
            logger.info(f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä {main_order['orderId']} —Ä–∞–∑–º–µ—â–µ–Ω!")
            
            # 2. –†–∞–∑–º–µ—â–∞–µ–º Stop Loss –æ—Ä–¥–µ—Ä (—É—Å–ª–æ–≤–Ω—ã–π)
            stop_side = Client.SIDE_SELL if signal_data['signal'] == 'LONG' else Client.SIDE_BUY
            
            try:
                stop_order = self.binance_client.futures_create_order(
                    symbol=self.ticker,
                    side=stop_side,
                    type='STOP_MARKET',
                    quantity=quantity,
                    stopPrice=str(stop_loss),
                    positionSide=position_side,
                    timeInForce='GTC'
                )
                logger.info(f"üõë Stop Loss {stop_order['orderId']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Stop Loss –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                stop_order = {'orderId': 'FAILED'}
            
            # 3. –†–∞–∑–º–µ—â–∞–µ–º Take Profit –æ—Ä–¥–µ—Ä (—É—Å–ª–æ–≤–Ω—ã–π)
            try:
                tp_order = self.binance_client.futures_create_order(
                    symbol=self.ticker,
                    side=stop_side,  # –¢–∞ –∂–µ —Å—Ç–æ—Ä–æ–Ω–∞ —á—Ç–æ –∏ stop
                    type='TAKE_PROFIT_MARKET',
                    quantity=quantity,
                    stopPrice=str(take_profit),
                    positionSide=position_side,
                    timeInForce='GTC'
                )
                logger.info(f"üéØ Take Profit {tp_order['orderId']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Take Profit –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                tp_order = {'orderId': 'FAILED'}
            
            return {
                'success': True,
                'main_order_id': main_order['orderId'],
                'stop_order_id': stop_order['orderId'],
                'tp_order_id': tp_order['orderId'],
                'order_data': main_order,
                'quantity': quantity,
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'leverage': leverage,
                'risk_amount_usdt': risk_amount_usdt,
                'position_value_usdt': position_value_usdt,
                'timestamp': datetime.now().isoformat(),
                'current_price': entry_price,  # –î–ª—è Telegram
                'order_type': 'LIMIT_WITH_SL_TP'
            }
            
        except BinanceAPIException as e:
            logger.error(f"‚ùå Binance API Error: {e}")
            return {'success': False, 'error': str(e)}
        except Exception as e:
            logger.error(f"‚ùå Limit Order Error: {e}")
            return {'success': False, 'error': str(e)}
    
    def process_ticker(self, order_type: str = "MARKET") -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞
        
        Args:
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ - "MARKET" –∏–ª–∏ "LIMIT"
        
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã
        2. –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∏–≥–Ω–∞–ª–∞  
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
        """
        try:
            logger.info(f"üîç === –ê–ù–ê–õ–ò–ó {self.ticker} ({order_type}) ===")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            analyzer = SignalAnalyzer(self.ticker)
            signal_data = analyzer.analyze_ticker(stop_event=None)
            
            if not signal_data:
                logger.info(f"üìä –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {self.ticker}")
                return False
            
            logger.info(f"üéØ –°–ò–ì–ù–ê–õ –ù–ê–ô–î–ï–ù –¥–ª—è {self.ticker}:")
            logger.info(f"  üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {signal_data['signal']}")
            logger.info(f"  üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal_data['entry_price']:.6f}")
            logger.info(f"  üõë Stop Loss: {signal_data.get('stop_loss', 'N/A')}")
            logger.info(f"  üéØ Take Profit: {signal_data.get('take_profit', 'N/A')}")
            logger.info(f"  üìä Confidence: {signal_data.get('confidence', 0):.3f}")
            
            # 2. –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            if self.binance_client:
                logger.info(f"üöÄ –í—ã—Å—Ç–∞–≤–ª—è–µ–º {order_type} –æ—Ä–¥–µ—Ä –Ω–∞ Binance...")
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞
                if order_type.upper() == "LIMIT":
                    order_result = self.place_limit_order_with_sl_tp(signal_data)
                else:
                    order_result = self.place_simple_market_order(signal_data)
                
                if order_result['success']:
                    logger.info(f"‚úÖ === {order_type} –û–†–î–ï–† –í–´–°–¢–ê–í–õ–ï–ù –£–°–ü–ï–®–ù–û ===")
                    
                    if order_type.upper() == "LIMIT":
                        logger.info(f"üìã Main Order ID: {order_result['main_order_id']}")
                        logger.info(f"üõë Stop Order ID: {order_result['stop_order_id']}")  
                        logger.info(f"üéØ TP Order ID: {order_result['tp_order_id']}")
                    else:
                        logger.info(f"üìã Order ID: {order_result['order_id']}")
                    
                    logger.info(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_result['quantity']:.6f}")
                    logger.info(f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {order_result['entry_price']:.6f}")
                    
                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                    try:
                        import time
                        usdt_balance = self.get_usdt_balance()
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ—Ä–¥–µ—Ä–∞
                        telegram_data = {
                            'pair': signal_data['ticker'],
                            'timeframe': signal_data.get('timeframes_str', 'N/A'),
                            'signal': signal_data['signal'],
                            'current_price': order_result.get('current_price', order_result['entry_price']),
                            'entry_price': order_result['entry_price'],
                            'quantity': order_result['quantity'],
                            'leverage': order_result['leverage'],
                            'risk_amount': order_result['risk_amount_usdt'],
                            'position_value': order_result['position_value_usdt'],
                            'confidence': signal_data.get('confidence', 0),
                            'timestamp': int(time.time()),
                            'stop_loss': signal_data.get('stop_loss', 0),
                            'take_profit': signal_data.get('take_profit', 0),
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            'total_balance': usdt_balance,
                            'risk_percent': self.risk_percent,
                            'capital_at_risk': f"{order_result['risk_amount_usdt']:.2f} USDT ({self.risk_percent}%)",
                            'order_type': order_result.get('order_type', order_type.upper())
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º ID –æ—Ä–¥–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        if order_type.upper() == "LIMIT":
                            telegram_data['order_id'] = f"Main:{order_result['main_order_id']}"
                            telegram_data['stop_order_id'] = order_result['stop_order_id']
                            telegram_data['tp_order_id'] = order_result['tp_order_id']
                        else:
                            telegram_data['order_id'] = order_result['order_id']
                        
                        telegram_bot.send_signal(telegram_data)
                        logger.info("üì± ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    except Exception as e:
                        logger.error(f"üì± ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
                    
                    return True
                else:
                    logger.error(f"‚ùå === –û–®–ò–ë–ö–ê –í–´–°–¢–ê–í–õ–ï–ù–ò–Ø {order_type} –û–†–î–ï–†–ê ===")
                    logger.error(f"üî• –ü—Ä–∏—á–∏–Ω–∞: {order_result['error']}")
                    return False
            else:
                logger.warning("‚ö†Ô∏è Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–¥–µ—Ä")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå === –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò {self.ticker} ===")
            logger.error(f"üî• –û—à–∏–±–∫–∞: {e}")
            return False


# –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
def test_advanced_processor(ticker: str = "BTCUSDT", risk_percent: float = DEFAULT_RISK_PERCENT, order_type: str = "MARKET"):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞ –æ–¥–Ω–æ–º —Ç–∏–∫–µ—Ä–µ
    
    Args:
        ticker: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
        risk_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ DEFAULT_RISK_PERCENT)
        order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ - "MARKET" –∏–ª–∏ "LIMIT"
    """
    logger.info("üöÄ === –¢–ï–°–¢ ADVANCED SIGNAL PROCESSOR ===")
    logger.info(f"üéØ –¢–∏–∫–µ—Ä: {ticker}")
    logger.info(f"üí∞ –†–∏—Å–∫: {risk_percent}%")
    logger.info(f"üìã –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type}")
    logger.info(f"üåê –†–µ–∂–∏–º: {'TESTNET' if config.BINANCE_TESTNET else 'MAINNET'}")
    
    processor = AdvancedSignalProcessor(ticker, risk_percent)
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        balance = processor.get_usdt_balance()
        logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        success = processor.process_ticker(order_type)
        
        if success:
            logger.info("üéâ === –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù ===")
            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –∏ {order_type} –æ—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
        else:
            logger.info("üìä === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")
            logger.info("üìä –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞")
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    logger.info("üèÅ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ticker_monitor
def process_trading_signal_enhanced(signal_data: Dict, order_type: str = "MARKET") -> bool:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ticker_monitor.py
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä
    
    Args:
        signal_data: –ì–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ - "MARKET" –∏–ª–∏ "LIMIT"
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω
    """
    try:
        ticker = signal_data.get('ticker', 'UNKNOWN')
        processor = AdvancedSignalProcessor(ticker, DEFAULT_RISK_PERCENT)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if processor.binance_client:
            if order_type.upper() == "LIMIT":
                order_result = processor.place_limit_order_with_sl_tp(signal_data)
            else:
                order_result = processor.place_simple_market_order(signal_data)
            
            if order_result['success']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                try:
                    import time
                    usdt_balance = processor.get_usdt_balance()
                    
                    telegram_data = {
                        'pair': signal_data['ticker'],
                        'timeframe': signal_data.get('timeframes_str', 'N/A'),
                        'signal': signal_data['signal'],
                        'current_price': order_result.get('current_price', order_result['entry_price']),
                        'entry_price': order_result['entry_price'],
                        'quantity': order_result['quantity'],
                        'leverage': order_result['leverage'],
                        'risk_amount': order_result['risk_amount_usdt'],
                        'position_value': order_result['position_value_usdt'],
                        'confidence': signal_data.get('confidence', 0),
                        'timestamp': int(time.time()),
                        'stop_loss': signal_data.get('stop_loss', 0),
                        'take_profit': signal_data.get('take_profit', 0),
                        'total_balance': usdt_balance,
                        'risk_percent': DEFAULT_RISK_PERCENT,
                        'capital_at_risk': f"{order_result['risk_amount_usdt']:.2f} USDT ({DEFAULT_RISK_PERCENT}%)",
                        'order_type': order_result.get('order_type', order_type.upper())
                    }
                    
                    if order_type.upper() == "LIMIT":
                        telegram_data['order_id'] = f"Main:{order_result['main_order_id']}"
                    else:
                        telegram_data['order_id'] = order_result['order_id']
                    
                    telegram_bot.send_signal(telegram_data)
                    logger.info(f"üì± ‚úÖ {ticker} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                except Exception as e:
                    logger.error(f"üì± ‚ùå {ticker} –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
                
                return True
            else:
                logger.error(f"‚ùå {ticker} –æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order_result['error']}")
                return False
        else:
            logger.error(f"‚ùå {ticker} Binance –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {signal_data.get('ticker', 'UNKNOWN')}: {e}")
        return False


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if __name__ == "__main__":
    # –¢–µ—Å—Ç Market –æ—Ä–¥–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    # test_advanced_processor("BTCUSDT", DEFAULT_RISK_PERCENT, "MARKET")
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∞ Limit –æ—Ä–¥–µ—Ä–æ–≤ —Å SL/TP
    test_advanced_processor("BTCUSDT", DEFAULT_RISK_PERCENT, "LIMIT")
