#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ç–µ—Å—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏ Binance
–í–µ—Ä—Å–∏—è: 4.0 - —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""
import os
import sys
from binance.exceptions import BinanceAPIException
from binance.client import Client

def show_account_details(client, mode_name, testnet_mode=True):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    print(f"\nüí∞ –î–ï–¢–ê–õ–ò –ê–ö–ö–ê–£–ù–¢–ê ({mode_name})")
    print("="*60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        futures_account = client.futures_account()
        
        # –ë–∞–ª–∞–Ω—Å
        total_balance = float(futures_account['totalWalletBalance'])
        available_balance = float(futures_account['availableBalance'])
        print(f"üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} USDT")
        print(f"üíµ –î–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {available_balance:.2f} USDT")
        
        # –ü–æ–∑–∏—Ü–∏–∏
        positions = client.futures_position_information()
        active_positions = [pos for pos in positions if float(pos['positionAmt']) != 0]
        
        print(f"\nüìà –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ({len(active_positions)} –∏–∑ {len(positions)}):")
        if active_positions:
            print("-" * 80)
            print(f"{'–¢–∏–∫–µ—Ä':<12} {'–†–∞–∑–º–µ—Ä':<15} {'–ü–ª–µ—á–æ':<8} {'–ú–∞—Ä–∂–∞':<12} {'PnL':<12} {'ROE%':<8}")
            print("-" * 80)
            
            for pos in active_positions:
                symbol = pos['symbol']
                size = float(pos['positionAmt'])
                leverage = get_symbol_leverage(client, symbol)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                margin = float(pos.get('initialMargin', pos.get('isolatedMargin', 0)))
                pnl = float(pos.get('unrealizedProfit', pos.get('unRealizedProfit', 0)))
                
                # ROE —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º–∏
                entry_price = float(pos.get('entryPrice', 0))
                mark_price = float(pos.get('markPrice', 0))
                roe = 0
                if entry_price > 0 and mark_price > 0:
                    if size > 0:  # LONG
                        roe = ((mark_price - entry_price) / entry_price) * 100
                    else:  # SHORT
                        roe = ((entry_price - mark_price) / entry_price) * 100
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                direction = "üü¢ LONG" if size > 0 else "üî¥ SHORT"
                size_str = f"{abs(size):.4f} ({direction})"
                
                # –¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PnL
                pnl_str = f"{'üü¢' if pnl >= 0 else 'üî¥'}{pnl:+.2f}"
                roe_str = f"{'üü¢' if roe >= 0 else 'üî¥'}{roe:+.2f}%"
                
                print(f"{symbol:<12} {size_str:<15} {leverage}x{'':<4} {margin:.2f}{'':<7} {pnl_str:<12} {roe_str:<8}")
        else:
            print("   ‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        
        return total_balance, available_balance, active_positions
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return 0, 0, []

def get_current_price(client, symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
    try:
        ticker = client.futures_symbol_ticker(symbol=symbol)
        return float(ticker['price'])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
        return None

def calculate_position_size(capital, leverage, price):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"""
    return (capital * leverage) / price

def get_symbol_info(client, symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
    try:
        exchange_info = client.futures_exchange_info()
        symbol_info = None
        
        for s in exchange_info['symbols']:
            if s['symbol'] == symbol:
                symbol_info = s
                break
        
        if not symbol_info:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        price_precision = 0
        quantity_precision = 0
        min_qty = 0
        tick_size = 0
        
        for filter_item in symbol_info['filters']:
            if filter_item['filterType'] == 'PRICE_FILTER':
                tick_size = float(filter_item['tickSize'])
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
                price_precision = len(str(tick_size).rstrip('0').split('.')[-1]) if '.' in str(tick_size) else 0
            elif filter_item['filterType'] == 'LOT_SIZE':
                step_size = float(filter_item['stepSize'])
                min_qty = float(filter_item['minQty'])
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                quantity_precision = len(str(step_size).rstrip('0').split('.')[-1]) if '.' in str(step_size) else 0
        
        return {
            'symbol': symbol,
            'price_precision': price_precision,
            'quantity_precision': quantity_precision,
            'min_qty': min_qty,
            'tick_size': tick_size,
            'status': symbol_info['status']
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ: {e}")
        return None

def round_to_precision(value, precision):
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    return round(value, precision)

def get_symbol_leverage(client, symbol):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –ø–ª–µ—á–æ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        account = client.futures_account()
        
        if 'positions' in account:
            positions = account['positions']
            
            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –Ω—É–∂–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
            for pos in positions:
                if pos.get('symbol') == symbol:
                    leverage = pos.get('leverage')
                    if leverage:
                        return leverage
        
        return 'N/A'
        
    except Exception as e:
        return 'N/A'

def create_order_menu(client, mode_name, testnet_mode=True):
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
    print(f"\nüéØ –°–û–ó–î–ê–ù–ò–ï –û–†–î–ï–†–ê ({mode_name})")
    print("="*50)
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
        symbol = input("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT): ").strip().upper()
        if not symbol.endswith('USDT'):
            symbol += 'USDT'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {symbol}...")
        symbol_info = get_symbol_info(client, symbol)
        if not symbol_info:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {symbol}")
            return False
        
        if symbol_info['status'] != 'TRADING':
            print(f"‚ùå –°–∏–º–≤–æ–ª {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å—Ç–∞—Ç—É—Å: {symbol_info['status']})")
            return False
        
        print(f"‚úÖ –°–∏–º–≤–æ–ª –Ω–∞–π–¥–µ–Ω:")
        print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã: {symbol_info['price_precision']} –∑–Ω–∞–∫–æ–≤")
        print(f"   - –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {symbol_info['quantity_precision']} –∑–Ω–∞–∫–æ–≤")
        print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {symbol_info['min_qty']}")
        print(f"   - –®–∞–≥ —Ü–µ–Ω—ã: {symbol_info['tick_size']}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = get_current_price(client, symbol)
        if not current_price:
            return False
        
        print(f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price:.{symbol_info['price_precision']}f} USDT")
        
        leverage = int(input("‚ö° –í–≤–µ–¥–∏—Ç–µ –ø–ª–µ—á–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10): "))
        capital = float(input("üí∞ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–∞–ø–∏—Ç–∞–ª–∞ (USDT): "))
        stop_percent = float(input("üõë –°—Ç–æ–ø-–ª–æ—Å—Å –≤ % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2): "))
        take_percent = float(input("üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4): "))
        
        direction = input("üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (L - Long, S - Short): ").strip().upper()
        if direction not in ['L', 'S']:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ L –∏–ª–∏ S")
            return False
        
        print(f"\nüßÆ –†–ê–°–ß–ï–¢–´ –û–†–î–ï–†–ê:")
        print("="*50)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        print(f"1Ô∏è‚É£ –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"   –§–æ—Ä–º—É–ª–∞: (–ö–∞–ø–∏—Ç–∞–ª √ó –ü–ª–µ—á–æ) √∑ –¶–µ–Ω–∞")
        print(f"   ({capital} √ó {leverage}) √∑ {current_price} = {capital * leverage / current_price:.8f}")
        
        position_size_raw = calculate_position_size(capital, leverage, current_price)
        position_size = round_to_precision(position_size_raw, symbol_info['quantity_precision'])
        
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (—Å—ã—Ä–æ–π): {position_size_raw:.8f}")
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π): {position_size:.{symbol_info['quantity_precision']}f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if position_size < symbol_info['min_qty']:
            print(f"‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {position_size} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {symbol_info['min_qty']}")
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        print(f"\n2Ô∏è‚É£ –†–∞—Å—á–µ—Ç —Å—É–º–º –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞:")
        stop_loss_amount = capital * (stop_percent / 100)
        take_profit_amount = capital * (take_percent / 100)
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {capital} √ó {stop_percent}% = {stop_loss_amount:.2f} USDT")
        print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {capital} √ó {take_percent}% = {take_profit_amount:.2f} USDT")
        
        print(f"\n3Ô∏è‚É£ –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω:")
        if direction == 'L':
            # Long –ø–æ–∑–∏—Ü–∏—è
            entry_price_raw = current_price * 1.001  # +0.1% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            stop_price_raw = current_price - (stop_loss_amount / position_size)
            take_price_raw = current_price + (take_profit_amount / position_size)
            side = 'BUY'
            
            print(f"   LONG –ø–æ–∑–∏—Ü–∏—è:")
            print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price} √ó 1.001 = {entry_price_raw:.8f}")
            print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {current_price} - ({stop_loss_amount} √∑ {position_size}) = {stop_price_raw:.8f}")
            print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {current_price} + ({take_profit_amount} √∑ {position_size}) = {take_price_raw:.8f}")
        else:
            # Short –ø–æ–∑–∏—Ü–∏—è
            entry_price_raw = current_price * 0.999  # -0.1% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            stop_price_raw = current_price + (stop_loss_amount / position_size)
            take_price_raw = current_price - (take_profit_amount / position_size)
            side = 'SELL'
            
            print(f"   SHORT –ø–æ–∑–∏—Ü–∏—è:")
            print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price} √ó 0.999 = {entry_price_raw:.8f}")
            print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {current_price} + ({stop_loss_amount} √∑ {position_size}) = {stop_price_raw:.8f}")
            print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {current_price} - ({take_profit_amount} √∑ {position_size}) = {take_price_raw:.8f}")
        
        # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
        entry_price = round_to_precision(entry_price_raw, symbol_info['price_precision'])
        stop_price = round_to_precision(stop_price_raw, symbol_info['price_precision'])
        take_price = round_to_precision(take_price_raw, symbol_info['price_precision'])
        
        print(f"\n4Ô∏è‚É£ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∏—Ä–∂–∏:")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price_raw:.8f} ‚Üí {entry_price:.{symbol_info['price_precision']}f}")
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_price_raw:.8f} ‚Üí {stop_price:.{symbol_info['price_precision']}f}")
        print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_price_raw:.8f} ‚Üí {take_price:.{symbol_info['price_precision']}f}")
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞
        print(f"\nüìã –§–ò–ù–ê–õ–¨–ù–´–ï –î–ï–¢–ê–õ–ò –û–†–î–ï–†–ê:")
        print("="*60)
        print(f"üéØ –¢–∏–∫–µ—Ä: {symbol}")
        print(f"üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {'üü¢ LONG' if direction == 'L' else 'üî¥ SHORT'}")
        print(f"üìè –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.{symbol_info['quantity_precision']}f}")
        print(f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.{symbol_info['price_precision']}f} USDT (—Ç–µ–∫—É—â–∞—è ¬±0.1%)")
        print(f"üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_price:.{symbol_info['price_precision']}f} USDT (-{stop_percent}% = -{stop_loss_amount:.2f} USDT)")
        print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_price:.{symbol_info['price_precision']}f} USDT (+{take_percent}% = +{take_profit_amount:.2f} USDT)")
        print(f"‚ö° –ü–ª–µ—á–æ: {leverage}x")
        print(f"üíµ –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {capital:.2f} USDT")
        print(f"üíé –ú–∞—Ä–∂–∞: {(position_size * entry_price) / leverage:.2f} USDT")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input(f"\n‚úÖ –í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –≤ {mode_name}? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
        print(f"‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ {leverage}x –¥–ª—è {symbol}...")
        client.futures_change_leverage(symbol=symbol, leverage=leverage)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π
        print(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π...")
        try:
            position_mode = client.futures_get_position_mode()
            if not position_mode['dualSidePosition']:
                print("   –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º Hedge (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏)...")
                client.futures_change_position_mode(dualSidePosition=True)
                print("   ‚úÖ –†–µ–∂–∏–º Hedge –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                print("   ‚úÖ –†–µ–∂–∏–º Hedge —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–∑–∏—Ü–∏–π: {e}")
            print("   üí° –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ...")
        
        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
        print(f"üìä –í—ã—Å—Ç–∞–≤–ª—è–µ–º {side} –æ—Ä–¥–µ—Ä...")
        order = client.futures_create_order(
            symbol=symbol,
            side=side,
            type='LIMIT',
            timeInForce='GTC',
            quantity=position_size,
            price=entry_price,
            positionSide='LONG' if direction == 'L' else 'SHORT'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–∑–∏—Ü–∏–∏
        )
        
        print(f"‚úÖ –û—Ä–¥–µ—Ä –≤—ã—Å—Ç–∞–≤–ª–µ–Ω! ID: {order['orderId']}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}")
        print(f"üí∞ –¶–µ–Ω–∞: {order.get('price', 'N/A')}")
        print(f"üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.get('origQty', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –û–†–î–ï–†–ê: {e}")
        import traceback
        print(f"üìã –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:\n{traceback.format_exc()}")
        return False

def test_mode(testnet_mode=True):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
    mode_name = "TESTNET" if testnet_mode else "MAINNET"
    print(f"\n{'='*50}")
    print(f"üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {mode_name} –†–ï–ñ–ò–ú–ê")
    print(f"{'='*50}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
    os.environ['BINANCE_TESTNET'] = 'true' if testnet_mode else 'false'
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à –º–æ–¥—É–ª–µ–π
    if 'config' in sys.modules:
        del sys.modules['config']
    
    try:
        import config
        print(f"üîß –†–µ–∂–∏–º: {config.NETWORK_MODE}")
        print(f"üß™ Testnet: {config.BINANCE_TESTNET}")
        print(f"üîë API Key: {config.BINANCE_API_KEY[:20]}..." if config.BINANCE_API_KEY else "‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù")
        print(f"üîê Secret: {config.BINANCE_API_SECRET[:20]}..." if config.BINANCE_API_SECRET else "‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù")
        
        if not config.BINANCE_API_KEY or not config.BINANCE_API_SECRET:
            print(f"‚ùå {mode_name} –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            if testnet_mode:
                print("üí° –î–ª—è TESTNET —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á–∏ –Ω–∞: https://testnet.binancefuture.com/")
                print("   –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BINANCE_TESTNET_API_KEY –∏ BINANCE_TESTNET_API_SECRET")
            else:
                print("üí° –î–ª—è MAINNET —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á–∏ –Ω–∞: https://binance.com/")
                print("   –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BINANCE_MAINNET_API_KEY –∏ BINANCE_MAINNET_API_SECRET")
            return False, None
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {mode_name}...")
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {mode_name}...")
        client = Client(config.BINANCE_API_KEY, config.BINANCE_API_SECRET, testnet=testnet_mode)
        
        if testnet_mode:
            # –î–ª—è TESTNET –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—å—é—á–µ—Ä—Å—ã (—Å–ø–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
            print("   - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
            status = client.futures_ping()
            print(f"   ‚úÖ –§—å—é—á–µ—Ä—Å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            print("   - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É...")
            futures_account = client.futures_account()
            balance = float(futures_account['totalWalletBalance'])
            print(f"   ‚úÖ –§—å—é—á–µ—Ä—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –±–∞–ª–∞–Ω—Å: {balance} USDT")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            positions = client.futures_position_information()
            print(f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
        else:
            # –î–ª—è MAINNET –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–ø–æ—Ç, –∏ —Ñ—å—é—á–µ—Ä—Å—ã
            print("   - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")
            status = client.get_system_status()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: OK (status={status['status']})")
            
            print("   - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–ø–æ—Ç –∞–∫–∫–∞—É–Ω—Ç—É...")
            account = client.get_account()
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–ø–æ—Ç –∞–∫–∫–∞—É–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ")
            
            print("   - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—å—é—á–µ—Ä—Å–∞–º...")
            futures_account = client.futures_account()
            balance = float(futures_account['totalWalletBalance'])
            print(f"   ‚úÖ –§—å—é—á–µ—Ä—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –±–∞–ª–∞–Ω—Å: {balance} USDT")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è MAINNET
            permissions = account.get('permissions', [])
            print(f"   üìã –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: {', '.join(permissions)}")
            
            # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Binance –º–æ–≥—É—Ç –±—ã—Ç—å LEVERAGED –≤–º–µ—Å—Ç–æ FUTURES
            futures_enabled = any(perm in permissions for perm in ['FUTURES', 'LEVERAGED'])
            if not futures_enabled:
                print("   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é —Ñ—å—é—á–µ—Ä—Å–∞–º–∏!")
                print("   üí° –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: FUTURES –∏–ª–∏ LEVERAGED")
                return False, None
            else:
                print("   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
        
        print(f"\nüéâ {mode_name} –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        show_account_details(client, mode_name, testnet_mode)
        
        return True, client
        
    except BinanceAPIException as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê BINANCE API: {e.message} (–∫–æ–¥: {e.code})")
        if e.code == -2015:
            print("üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:")
            if testnet_mode:
                print("   - –ö–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è MAINNET, –∞ –Ω–µ –¥–ª—è TESTNET")
                print("   - –°–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞ https://testnet.binancefuture.com/")
            else:
                print("   - –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏ –Ω–∞ https://binance.com/")
        return False, None
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        print(f"   –¢–∏–ø: {type(e).__name__}")
        return False, None

def show_open_orders(client, mode_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
    print(f"\nüìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê ({mode_name})")
    print("="*60)
    
    try:
        orders = client.futures_get_open_orders()
        
        if not orders:
            print("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
        print("-" * 80)
        print(f"{'ID':<12} {'–¢–∏–∫–µ—Ä':<12} {'–¢–∏–ø':<8} {'–°—Ç–æ—Ä–æ–Ω–∞':<6} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<15} {'–¶–µ–Ω–∞':<12}")
        print("-" * 80)
        
        for order in orders:
            order_id = order['orderId']
            symbol = order['symbol']
            order_type = order['type']
            side = order['side']
            quantity = float(order['origQty'])
            price = float(order['price']) if order['price'] != '0' else 'MARKET'
            
            side_symbol = "üü¢ BUY" if side == 'BUY' else "üî¥ SELL"
            
            print(f"{order_id:<12} {symbol:<12} {order_type:<8} {side_symbol:<6} {quantity:<15.4f} {price if isinstance(price, str) else f'{price:.4f}':<12}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")

def show_open_positions(client, mode_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
    print(f"\nüìä –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ({mode_name})")
    print("="*80)
    
    try:
        positions = client.futures_position_information()
        active_positions = [pos for pos in positions if float(pos['positionAmt']) != 0]
        
        if not active_positions:
            print("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(active_positions)}")
        print("-" * 100)
        print(f"{'–¢–∏–∫–µ—Ä':<12} {'–°—Ç–æ—Ä–æ–Ω–∞':<8} {'–†–∞–∑–º–µ—Ä':<15} {'–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞':<12} {'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞':<12} {'PnL':<12} {'ROE%':<8} {'–ü–ª–µ—á–æ':<6}")
        print("-" * 100)
        
        total_pnl = 0
        
        for pos in active_positions:
            symbol = pos['symbol']
            size = float(pos['positionAmt'])
            entry_price = float(pos.get('entryPrice', 0))
            mark_price = float(pos.get('markPrice', 0))
            pnl = float(pos.get('unrealizedProfit', pos.get('unRealizedProfit', 0)))
            
            # ROE —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∞–º–∏, –µ—Å–ª–∏ –Ω–µ—Ç –≤ API
            roe = 0
            if entry_price > 0 and mark_price > 0:
                if size > 0:  # LONG
                    roe = ((mark_price - entry_price) / entry_price) * 100
                else:  # SHORT
                    roe = ((entry_price - mark_price) / entry_price) * 100
            
            leverage = get_symbol_leverage(client, symbol)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if size > 0:
                side = "üü¢ LONG"
                size_display = f"{size:.4f}"
            else:
                side = "üî¥ SHORT"
                size_display = f"{abs(size):.4f}"
            
            # –¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PnL –∏ ROE
            if pnl >= 0:
                pnl_str = f"üü¢ +{pnl:.2f}"
                roe_str = f"üü¢ +{roe:.2f}%"
            else:
                pnl_str = f"üî¥ {pnl:.2f}"
                roe_str = f"üî¥ {roe:.2f}%"
            
            total_pnl += pnl
            
            print(f"{symbol:<12} {side:<8} {size_display:<15} {entry_price:.4f}{'':<7} {mark_price:.4f}{'':<7} {pnl_str:<12} {roe_str:<8} {leverage}x{'':<3}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        print("-" * 100)
        total_pnl_str = f"üü¢ +{total_pnl:.2f}" if total_pnl >= 0 else f"üî¥ {total_pnl:.2f}"
        print(f"{'–ò–¢–û–ì–û:':<12} {'':<8} {'':<15} {'':<12} {'':<12} {total_pnl_str} USDT{'':<8} {'':<6}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–ó–ò–¶–ò–ô:")
        print("-" * 100)
        print(f"{'–¢–∏–∫–µ—Ä':<12} {'–ú–∞—Ä–∂–∞':<12} {'–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è':<12} {'–û–±–Ω–æ–≤–ª–µ–Ω–æ':<20}")
        print("-" * 100)
        
        for pos in active_positions:
            symbol = pos['symbol']
            margin = float(pos.get('initialMargin', pos.get('isolatedMargin', 0)))
            liquidation_price = float(pos.get('liquidationPrice', 0)) if pos.get('liquidationPrice') and pos.get('liquidationPrice') != '0' else 0
            update_time = pos.get('updateTime', 0)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            from datetime import datetime
            try:
                if update_time and update_time != 0:
                    update_dt = datetime.fromtimestamp(int(update_time) / 1000)
                    update_str = update_dt.strftime("%d.%m.%Y %H:%M:%S")
                else:
                    update_str = "N/A"
            except:
                update_str = "N/A"
            
            liquidation_str = f"{liquidation_price:.4f}" if liquidation_price > 0 else "N/A"
            
            print(f"{symbol:<12} {margin:.2f}{'':<7} {liquidation_str:<12} {update_str:<20}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        import traceback
        print(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"""
    print("üöÄ –¢–û–†–ì–û–í–´–ô –¢–ï–°–¢ –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–†–î–ï–†–ê–ú–ò BINANCE")
    print("–í–µ—Ä—Å–∏—è: 4.0 - —Å –ø–æ–ª–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    mode_choice = input("\nüîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:\n1. TESTNET (–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n2. MAINNET (—Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)\n3. –û–±–∞ —Ä–µ–∂–∏–º–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞)\n–í—ã–±–æ—Ä (1/2/3): ").strip()
    
    working_client = None
    working_mode = None
    working_testnet = None
    
    if mode_choice == "1":
        # –¢–æ–ª—å–∫–æ TESTNET
        print("\nüß™ –†–∞–±–æ—Ç–∞–µ–º –≤ TESTNET —Ä–µ–∂–∏–º–µ")
        testnet_ok, client = test_mode(testnet_mode=True)
        if testnet_ok:
            working_client = client
            working_mode = "TESTNET"
            working_testnet = True
    elif mode_choice == "2":
        # –¢–æ–ª—å–∫–æ MAINNET
        print("\n‚ö° –†–∞–±–æ—Ç–∞–µ–º –≤ MAINNET —Ä–µ–∂–∏–º–µ")
        mainnet_ok, client = test_mode(testnet_mode=False)
        if mainnet_ok:
            working_client = client
            working_mode = "MAINNET"
            working_testnet = False
    else:
        # –û–±–∞ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ä–µ–∂–∏–º–∞")
        testnet_ok, testnet_client = test_mode(testnet_mode=True)
        mainnet_ok, mainnet_client = test_mode(testnet_mode=False)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\n{'='*50}")
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"{'='*50}")
        print(f"üß™ TESTNET:  {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if testnet_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"‚ö° MAINNET:  {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if mainnet_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
        print(f"{'='*50}")
        
        if testnet_ok and mainnet_ok:
            print("üéâ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            trade_choice = input("\nüíº –° –∫–∞–∫–∏–º —Ä–µ–∂–∏–º–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É?\n1. TESTNET\n2. MAINNET\n3. –ó–∞–≤–µ—Ä—à–∏—Ç—å\n–í—ã–±–æ—Ä (1/2/3): ").strip()
            if trade_choice == "1" and testnet_ok:
                working_client = testnet_client
                working_mode = "TESTNET"
                working_testnet = True
            elif trade_choice == "2" and mainnet_ok:
                working_client = mainnet_client
                working_mode = "MAINNET"
                working_testnet = False
        elif testnet_ok:
            print("‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ TESTNET")
            working_client = testnet_client
            working_mode = "TESTNET"
            working_testnet = True
        elif mainnet_ok:
            print("‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ MAINNET")
            working_client = mainnet_client
            working_mode = "MAINNET"
            working_testnet = False
        else:
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π!")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–π –∫–ª–∏–µ–Ω—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if working_client and working_mode:
        print(f"\n{'='*50}")
        print(f"üíº –†–ê–ë–û–¢–ê–ï–ú –í –†–ï–ñ–ò–ú–ï: {working_mode}")
        print(f"{'='*50}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        while True:
            print(f"\nüîÑ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ({working_mode})")
            print("-" * 30)
            print("1. üìä –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
            print("2. üéØ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä")
            print("3. üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞")
            print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
            print("5. ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
            
            choice = input("\n–í—ã–±–æ—Ä (1-5): ").strip()
            
            if choice == "1":
                if working_testnet is not None:
                    show_account_details(working_client, working_mode, working_testnet)
            elif choice == "2":
                if working_testnet is not None:
                    if create_order_menu(working_client, working_mode, working_testnet):
                        print("‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä")
            elif choice == "3":
                show_open_orders(working_client, working_mode)
            elif choice == "4":
                show_open_positions(working_client, working_mode)
            elif choice == "5":
                print(f"\nüëã –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å {working_mode}")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    else:
        print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã")
    
    print("\nüëã –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
