"""
üõ°Ô∏è PRODUCTION SAFETY MANAGER
–ú–æ–¥—É–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –±–æ–µ–≤–æ–º —Å—á–µ—Ç—É
"""

import os
import logging
from datetime import datetime, date
from typing import Tuple, Dict, Any, Optional
from decimal import Decimal

logger = logging.getLogger(__name__)

class ProductionSafetyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    
    def __init__(self):
        self.daily_trades_count = 0
        self.last_reset_date = None
        self.emergency_stop = os.getenv('EMERGENCY_STOP', 'false').lower() == 'true'
        self.min_balance = float(os.getenv('MIN_ACCOUNT_BALANCE', '50'))
        self.max_daily_trades = int(os.getenv('MAX_DAILY_TRADES', '3'))
        self.min_confidence = float(os.getenv('MIN_CONFIDENCE', '75'))
        self.max_risk_percent = float(os.getenv('MAX_RISK_PERCENT', '1.0'))
        
        logger.info(f"üõ°Ô∏è Safety Manager initialized:")
        logger.info(f"   Min Balance: {self.min_balance} USDT")
        logger.info(f"   Max Daily Trades: {self.max_daily_trades}")
        logger.info(f"   Min Confidence: {self.min_confidence}%")
        logger.info(f"   Max Risk: {self.max_risk_percent}%")
        
    def can_trade(self, account_balance: float, signal_confidence: float, risk_percent: float) -> Tuple[bool, str]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        
        Args:
            account_balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            signal_confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ (0-100)
            risk_percent: –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
            
        Returns:
            Tuple[bool, str]: (–º–æ–∂–Ω–æ –ª–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, –ø—Ä–∏—á–∏–Ω–∞)
        """
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if self.emergency_stop:
            return False, "üõë EMERGENCY STOP ACTIVE - All trading suspended"
            
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if account_balance < self.min_balance:
            return False, f"üí∞ Insufficient balance: {account_balance:.2f} < {self.min_balance}"
            
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫
        today = date.today()
        if self.last_reset_date != today:
            self.daily_trades_count = 0
            self.last_reset_date = today
            logger.info(f"üìÖ New day: Reset daily trade counter to 0")
            
        if self.daily_trades_count >= self.max_daily_trades:
            return False, f"üìä Daily trade limit reached: {self.daily_trades_count}/{self.max_daily_trades}"
            
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–∏–≥–Ω–∞–ª–µ
        if signal_confidence < self.min_confidence:
            return False, f"‚ö†Ô∏è Low confidence signal: {signal_confidence:.1f}% < {self.min_confidence}%"
            
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∏—Å–∫–∞
        if risk_percent > self.max_risk_percent:
            return False, f"‚ö†Ô∏è Risk too high: {risk_percent}% > {self.max_risk_percent}%"
            
        return True, f"‚úÖ Safe to trade (Trade #{self.daily_trades_count + 1}/{self.max_daily_trades})"
        
    def record_trade(self, order_result: Dict[str, Any]):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É"""
        self.daily_trades_count += 1
        logger.info(f"üìù Trade recorded: {self.daily_trades_count}/{self.max_daily_trades} for today")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–∞
        audit_info = {
            'timestamp': datetime.now().isoformat(),
            'trade_number': self.daily_trades_count,
            'order_id': order_result.get('order_id', 'N/A'),
            'success': order_result.get('success', False)
        }
        logger.info(f"üìã Audit: {audit_info}")
        
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        today = date.today()
        if self.last_reset_date != today:
            self.daily_trades_count = 0
            
        return {
            'emergency_stop': self.emergency_stop,
            'daily_trades': f"{self.daily_trades_count}/{self.max_daily_trades}",
            'remaining_trades': max(0, self.max_daily_trades - self.daily_trades_count),
            'min_balance': self.min_balance,
            'min_confidence': self.min_confidence,
            'max_risk': self.max_risk_percent
        }

class ProductionOrderValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    
    @staticmethod
    def validate_order_params(symbol: str, quantity: float, price: Optional[float] = None) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
            
        Returns:
            Tuple[bool, str]: (–≤–∞–ª–∏–¥–µ–Ω –ª–∏ –æ—Ä–¥–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
        if not symbol or not isinstance(symbol, str):
            return False, "Invalid symbol"
            
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if quantity <= 0:
            return False, f"Invalid quantity: {quantity}"
            
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä
        min_quantities = {
            'BTCUSDT': 0.001,
            'ETHUSDT': 0.01,
            'BNBUSDT': 0.1,
        }
        
        min_qty = min_quantities.get(symbol, 0.001)
        if quantity < min_qty:
            return False, f"Quantity {quantity} below minimum {min_qty} for {symbol}"
            
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
        if price is not None:
            if price <= 0:
                return False, f"Invalid price: {price}"
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã (–Ω–µ –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)
                
        return True, "Order parameters valid"
        
    @staticmethod
    def validate_stop_loss_take_profit(entry_price: float, stop_loss: float, 
                                     take_profit: float, side: str) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è SL/TP –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
        
        Args:
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            stop_loss: –¶–µ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            take_profit: –¶–µ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞  
            side: –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏ (BUY/SELL)
            
        Returns:
            Tuple[bool, str]: (–≤–∞–ª–∏–¥–Ω—ã –ª–∏ —É—Ä–æ–≤–Ω–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        
        if side == 'BUY':  # Long –ø–æ–∑–∏—Ü–∏—è
            # SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –≤—Ö–æ–¥–∞, TP –≤—ã—à–µ –≤—Ö–æ–¥–∞
            if stop_loss >= entry_price:
                return False, f"LONG: Stop Loss {stop_loss} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ Entry {entry_price}"
            if take_profit <= entry_price:
                return False, f"LONG: Take Profit {take_profit} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ Entry {entry_price}"
                
        else:  # SELL / Short –ø–æ–∑–∏—Ü–∏—è
            # SL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –≤—Ö–æ–¥–∞, TP –Ω–∏–∂–µ –≤—Ö–æ–¥–∞
            if stop_loss <= entry_price:
                return False, f"SHORT: Stop Loss {stop_loss} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ Entry {entry_price}"
            if take_profit >= entry_price:
                return False, f"SHORT: Take Profit {take_profit} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ Entry {entry_price}"
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (–Ω–µ –±–æ–ª–µ–µ 50% –¥–≤–∏–∂–µ–Ω–∏—è)
        price_range = abs(entry_price - stop_loss) / entry_price
        if price_range > 0.5:  # 50% –¥–≤–∏–∂–µ–Ω–∏–µ
            return False, f"Stop Loss —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {price_range*100:.1f}% –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞"
            
        return True, "SL/TP levels valid"

def create_production_safety_env_template():
    """–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    template = """
# üö® PRODUCTION ENVIRONMENT SETTINGS
# REAL MONEY - BE EXTREMELY CAREFUL!

# BINANCE API (Production)
BINANCE_API_KEY=your_production_api_key_here
BINANCE_API_SECRET=your_production_secret_here  
BINANCE_TESTNET=false

# TELEGRAM
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHAT_ID=your_telegram_chat_id

# SAFETY SETTINGS (CONSERVATIVE DEFAULTS)
EMERGENCY_STOP=false
MIN_ACCOUNT_BALANCE=50.0
MAX_DAILY_TRADES=3
MIN_CONFIDENCE=75.0
MAX_RISK_PERCENT=0.5

# TRADING SETTINGS (REDUCED RISK)
DEFAULT_RISK_PERCENT=0.5
DEFAULT_LEVERAGE=3
SUPPORTED_TIMEFRAMES=15m,1h,4h

# LOGGING
LOG_LEVEL=INFO
LOG_FILE=logs/production.log
"""
    return template

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ safety manager
    print("üß™ Testing Production Safety Manager")
    
    safety = ProductionSafetyManager()
    status = safety.get_status()
    print(f"üìä Status: {status}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    can_trade, reason = safety.can_trade(
        account_balance=100.0,
        signal_confidence=80.0, 
        risk_percent=0.5
    )
    print(f"‚úÖ Can trade: {can_trade}, Reason: {reason}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞
    validator = ProductionOrderValidator()
    valid, msg = validator.validate_order_params('BTCUSDT', 0.001, 50000.0)
    print(f"‚úÖ Order valid: {valid}, Message: {msg}")
    
    print("\nüìù Environment template:")
    print(create_production_safety_env_template())
