"""
Orders Watchdog - –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤
===============================================

–û—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤:
- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
- –ü—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç SL/TP
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç ticker_monitor

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
ticker_monitor.py (–ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤) ‚Üí order_executor.py (—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤) 
                                                    ‚Üì
orders_watchdog.py (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è) ‚Üí telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è + SL/TP

Author: HEDGER
Version: 1.0 - Independent Order Monitoring
"""

import time
import signal
import sys
import threading
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Set, Tuple, Any, Union
from pathlib import Path
from dataclasses import dataclass, asdict
from enum import Enum
import logging

# –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
trailing_logger = logging.getLogger("trailing_logger")
trailing_logger.setLevel(logging.DEBUG)

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import (
    BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET, 
    FUTURES_LEVERAGE, FUTURES_MARGIN_TYPE
)
from utils import logger
from symbol_cache import round_price_for_symbol
from telegram_bot import telegram_bot
from symbol_cache import round_price_for_symbol, round_quantity_for_symbol

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
try:
    from unified_sync import UnifiedSynchronizer, SystemState
    STATE_RECOVERY_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è state_recovery module not available")
    STATE_RECOVERY_AVAILABLE = False
    UnifiedSynchronizer = None
    SystemState = None

# Binance - —Å–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Pylance
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from binance.client import Client as BinanceClient
    from binance.exceptions import BinanceAPIException as BinanceError
else:
    try:
        from binance.client import Client as BinanceClient
        from binance.exceptions import BinanceAPIException as BinanceError
        BINANCE_AVAILABLE = True
    except ImportError:
        logger.error("‚ùå python-binance not installed")
        BINANCE_AVAILABLE = False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ type hints
        class BinanceClient:
            def __init__(self, *args: Any, **kwargs: Any) -> None: pass
            def futures_account(self) -> Dict[str, Any]: return {}
            def futures_get_order(self, **kwargs: Any) -> Dict[str, Any]: return {}
            def futures_get_open_orders(self) -> List[Dict[str, Any]]: return []
            def futures_position_information(self) -> List[Dict[str, Any]]: return []
            def futures_create_order(self, **kwargs: Any) -> Dict[str, Any]: return {}
            def futures_cancel_order(self, **kwargs: Any) -> None: pass
        
        class BinanceError(Exception): pass

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BINANCE_AVAILABLE –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ except –±–ª–æ–∫–µ
if 'BINANCE_AVAILABLE' not in locals():
    BINANCE_AVAILABLE = True


class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    PENDING = "PENDING"           # –û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    FILLED = "FILLED"             # –ò—Å–ø–æ–ª–Ω–µ–Ω
    CANCELLED = "CANCELLED"       # –û—Ç–º–µ–Ω–µ–Ω
    SL_TP_PLACED = "SL_TP_PLACED" # SL/TP —Ä–∞–∑–º–µ—â–µ–Ω—ã
    SL_TP_ERROR = "SL_TP_ERROR"   # –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SL/TP
    COMPLETED = "COMPLETED"       # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω


@dataclass
class WatchedOrder:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –æ—Ä–¥–µ—Ä —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
    symbol: str
    order_id: str
    side: str  # BUY/SELL
    position_side: str  # LONG/SHORT
    quantity: float
    price: float
    signal_type: str  # LONG/SHORT
    stop_loss: float
    take_profit: float
    status: OrderStatus
    created_at: datetime
    filled_at: Optional[datetime] = None
    sl_order_id: Optional[str] = None
    tp_order_id: Optional[str] = None
    sl_tp_attempts: int = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SL/TP
    expires_at: Optional[datetime] = None  # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    source_timeframe: str = "4h"  # –¢–∞–π–º—Ñ—Ä–µ–π–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
    trailing_triggered: bool = False  # –§–ª–∞–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ 80/80/50
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        data = asdict(self)
        data['created_at'] = self.created_at.isoformat()
        data['filled_at'] = self.filled_at.isoformat() if self.filled_at else None
        data['expires_at'] = self.expires_at.isoformat() if self.expires_at else None
        data['status'] = self.status.value
        return data
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'WatchedOrder':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        data['created_at'] = datetime.fromisoformat(data['created_at'])
        data['filled_at'] = datetime.fromisoformat(data['filled_at']) if data['filled_at'] else None
        data['status'] = OrderStatus(data['status'])
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if 'sl_tp_attempts' not in data:
            data['sl_tp_attempts'] = 0
        if 'expires_at' not in data:
            data['expires_at'] = None
        elif data['expires_at']:
            data['expires_at'] = datetime.fromisoformat(data['expires_at'])
        if 'source_timeframe' not in data:
            data['source_timeframe'] = "4h"
        if 'trailing_triggered' not in data:
            data['trailing_triggered'] = False
            
        return cls(**data)
    
    def calculate_expiry_time(self) -> datetime:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ 4h —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        
        –õ–æ–≥–∏–∫–∞:
        - –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –≤ 01:23:56 ‚Üí –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ 04:00:00 (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω)
        - –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω –≤ 06:56:37 ‚Üí SL/TP –∏—Å—Ç–µ–∫–∞—é—Ç –≤ 08:00:00 (–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏)
        """
        # 4h –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: 00:00, 04:00, 08:00, 12:00, 16:00, 20:00
        current_time = self.filled_at if self.filled_at else self.created_at
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π 4h –∏–Ω—Ç–µ—Ä–≤–∞–ª
        current_hour = current_time.hour
        next_4h_hour = ((current_hour // 4) + 1) * 4
        
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 24 —á–∞—Å–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if next_4h_hour >= 24:
            next_day = current_time.date() + timedelta(days=1)
            return datetime.combine(next_day, datetime.min.time())
        else:
            return current_time.replace(hour=next_4h_hour, minute=0, second=0, microsecond=0)
    
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫ –ª–∏ –æ—Ä–¥–µ—Ä"""
        if not self.expires_at:
            return False
        return datetime.now() > self.expires_at
    
    def should_expire_soon(self, minutes_before: int = 15) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ –æ—Ä–¥–µ—Ä –≤ –±–ª–∏–∂–∞–π—à–∏–µ N –º–∏–Ω—É—Ç"""
        if not self.expires_at:
            return False
        time_to_expiry = self.expires_at - datetime.now()
        return time_to_expiry.total_seconds() <= (minutes_before * 60)


class OrdersWatchdog:
    """–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.client: Optional[BinanceClient] = None
        self.watched_orders: Dict[str, WatchedOrder] = {}  # order_id -> WatchedOrder
        self.stop_event = threading.Event()
        self.check_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.persistence_file = Path('orders_watchdog_state.json')
        self.requests_file = Path('orders_watchdog_requests.json')  # –§–∞–π–ª –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.lock = threading.Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_client()
        self._load_persistent_state()
        self._sync_with_exchange_on_startup()
        self._setup_signal_handlers()
        
        logger.info("üêï Orders Watchdog initialized")
    
    def _init_client(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞"""
        if not BINANCE_AVAILABLE:
            logger.error("‚ùå Binance library not available")
            return
            
        if not BINANCE_API_KEY or not BINANCE_API_SECRET:
            logger.error("‚ùå Binance API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
        
        try:
            logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance ({'TESTNET' if BINANCE_TESTNET else 'MAINNET'})...")
            
            self.client = BinanceClient(
                api_key=BINANCE_API_KEY,
                api_secret=BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if self.client:
                self.client.futures_account()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            self.client = None
    
    def _setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown"""
        def signal_handler(signum: int, frame: Any) -> None:
            signal_name = "SIGINT" if signum == signal.SIGINT else "SIGTERM"
            logger.info(f"üõë Received {signal_name} - shutting down Orders Watchdog...")
            self.shutdown()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def _load_persistent_state(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.persistence_file.exists():
                with open(self.persistence_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                for order_data in data.get('watched_orders', []):
                    order = WatchedOrder.from_dict(order_data)
                    self.watched_orders[order.order_id] = order
                
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.watched_orders)} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            else:
                logger.info("üìÇ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _save_persistent_state(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'timestamp': datetime.now().isoformat(),
                'watched_orders': [order.to_dict() for order in self.watched_orders.values()]
            }
            
            with open(self.persistence_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _sync_with_exchange_on_startup(self) -> None:
        """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.client:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return
        
        try:
            logger.info("üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
            
            # –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if STATE_RECOVERY_AVAILABLE and UnifiedSynchronizer is not None:
                logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
                state_manager = UnifiedSynchronizer()
                system_state = state_manager.recover_system_state()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                self._send_state_recovery_report(system_state)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º
                if system_state.synchronization_issues:
                    issues_text = "\n".join(system_state.synchronization_issues)
                    self._send_watchdog_notification(
                        f"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:\n{issues_text}"
                    )
            else:
                logger.warning("‚ö†Ô∏è State Recovery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            
            # –°–£–©–ï–°–¢–í–£–Æ–©–ê–Ø –õ–û–ì–ò–ö–ê: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            open_orders = self.client.futures_get_open_orders()
            
            if not open_orders:
                logger.info("üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            synced_count = 0
            skipped_count = 0
            
            for order_info in open_orders:
                order_id = str(order_info['orderId'])
                symbol = order_info['symbol']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä
                if order_id in self.watched_orders:
                    logger.debug(f"üîÑ –û—Ä–¥–µ—Ä {order_id} ({symbol}) —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                    skipped_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ - –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ LIMIT –æ—Ä–¥–µ—Ä–∞
                if order_info.get('type') != 'LIMIT':
                    logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–¥–µ—Ä {order_id} - —Ç–∏–ø {order_info.get('type')}")
                    skipped_count += 1
                    continue
                
                # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                try:
                    self._restore_order_from_exchange(order_info)
                    synced_count += 1
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–¥–µ—Ä {symbol} #{order_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä {order_id}: {e}")
                    skipped_count += 1
            
            if synced_count > 0:
                logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {synced_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}")
                self._save_persistent_state()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if synced_count > 0:
                    self._send_watchdog_notification(
                        f"üîÑ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {synced_count} –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏"
                    )
            else:
                logger.info("üìã –ù–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π: {e}")
    
    def _restore_order_from_exchange(self, order_info: Dict[str, Any]) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–∏"""
        try:
            symbol = order_info['symbol']
            order_id = str(order_info['orderId'])
            side = order_info['side']  # BUY/SELL
            position_side = order_info.get('positionSide', 'BOTH')
            quantity = float(order_info['origQty'])
            price = float(order_info['price'])
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å signal_type –∏–∑ positionSide
            if position_side == 'LONG':
                signal_type = 'LONG'
            elif position_side == 'SHORT':
                signal_type = 'SHORT'
            else:
                # Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ side
                signal_type = 'LONG' if side == 'BUY' else 'SHORT'
            
            # –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è SL/TP
            # –ò—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if signal_type == 'LONG':
                stop_loss = price * 0.97  # -3%
                take_profit = price * 1.05  # +5%
            else:
                stop_loss = price * 1.03  # +3%
                take_profit = price * 0.95  # -5%
            
            # –°–æ–∑–¥–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
            restored_order = WatchedOrder(
                symbol=symbol,
                order_id=order_id,
                side=side,
                position_side=position_side,
                quantity=quantity,
                price=price,
                signal_type=signal_type,
                stop_loss=stop_loss,
                take_profit=take_profit,
                status=OrderStatus.PENDING,
                created_at=datetime.now(),  # –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                source_timeframe="4h"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            restored_order.expires_at = restored_order.calculate_expiry_time()
            
            with self.lock:
                self.watched_orders[order_id] = restored_order
            
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {symbol} –æ—Ä–¥–µ—Ä #{order_id} ({signal_type}, –∏—Å—Ç–µ–∫–∞–µ—Ç: {restored_order.expires_at.strftime('%H:%M:%S')})")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            raise
    
    def add_order_to_watch(self, order_data: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        
        Args:
            order_data: {
                'symbol': 'BTCUSDT',
                'order_id': '12345',
                'side': 'BUY',
                'position_side': 'LONG',
                'quantity': 0.001,
                'price': 45000.0,
                'signal_type': 'LONG',
                'stop_loss': 44000.0,
                'take_profit': 47000.0
            }
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            order = WatchedOrder(
                symbol=order_data['symbol'],
                order_id=str(order_data['order_id']),
                side=order_data['side'],
                position_side=order_data['position_side'],
                quantity=float(order_data['quantity']),
                price=float(order_data['price']),
                signal_type=order_data['signal_type'],
                stop_loss=float(order_data['stop_loss']),
                take_profit=float(order_data['take_profit']),
                status=OrderStatus.PENDING,
                created_at=datetime.now(),
                source_timeframe=order_data.get('timeframe', '4h')  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
            order.expires_at = order.calculate_expiry_time()
            
            with self.lock:
                self.watched_orders[order.order_id] = order
                self._save_persistent_state()
            
            logger.info(f"üëÅÔ∏è –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {order.symbol} –æ—Ä–¥–µ—Ä {order.order_id} (–∏—Å—Ç–µ–∫–∞–µ—Ç: {order.expires_at.strftime('%H:%M:%S')})")
            self._send_watchdog_notification(f"üëÅÔ∏è –ù–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ {order.symbol} #{order.order_id}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {e}")
            return False
    
    def remove_order_from_watch(self, order_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            with self.lock:
                if order_id in self.watched_orders:
                    order = self.watched_orders.pop(order_id)
                    self._save_persistent_state()
                    logger.info(f"üëÅÔ∏è –£–±—Ä–∞–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {order.symbol} –æ—Ä–¥–µ—Ä {order_id}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
            return False
    
    def _process_incoming_requests(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            if not self.requests_file.exists():
                return
            
            # –ß–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
            with open(self.requests_file, 'r', encoding='utf-8') as f:
                requests_data = json.load(f)
            
            if not requests_data:
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
            processed_requests = []
            for request in requests_data:
                try:
                    action = request['action']
                    
                    if action == 'add_order':
                        if self.add_order_to_watch(request['data']):
                            logger.info(f"üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
                    
                    elif action == 'get_watched_symbols':
                        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç–∞
                        response_data = self.get_watched_symbols()
                        response_file = Path('orders_watchdog_response.json')
                        
                        with open(response_file, 'w', encoding='utf-8') as f:
                            json.dump({
                                'action': 'get_watched_symbols_response',
                                'timestamp': datetime.now().isoformat(),
                                'data': response_data
                            }, f, indent=2, ensure_ascii=False)
                        
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö")
                    
                    elif action == 'check_conflicts':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
                        proposed_orders = request.get('data', [])
                        conflict_result = self.check_symbol_conflicts(proposed_orders)
                        
                        response_file = Path('orders_watchdog_response.json')
                        with open(response_file, 'w', encoding='utf-8') as f:
                            json.dump({
                                'action': 'check_conflicts_response',
                                'timestamp': datetime.now().isoformat(),
                                'data': conflict_result
                            }, f, indent=2, ensure_ascii=False)
                        
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
                    
                    elif action == 'get_status':
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å watchdog
                        status_data = self.get_status()
                        response_file = Path('orders_watchdog_response.json')
                        
                        with open(response_file, 'w', encoding='utf-8') as f:
                            json.dump({
                                'action': 'get_status_response',
                                'timestamp': datetime.now().isoformat(),
                                'data': status_data
                            }, f, indent=2, ensure_ascii=False)
                        
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å watchdog")
                    
                    processed_requests.append(request)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if processed_requests:
                with open(self.requests_file, 'w', encoding='utf-8') as f:
                    json.dump([], f)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
    
    def check_orders_status(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ"""
        if not self.client:
            return
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –æ—Ä–¥–µ—Ä–∞
        self._cleanup_expired_orders()
        
        with self.lock:
            orders_to_check = list(self.watched_orders.values())
        
        if not orders_to_check:
            return
        
        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(orders_to_check)} –æ—Ä–¥–µ—Ä–æ–≤...")
        
        for order in orders_to_check:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if order.is_expired() and order.status == OrderStatus.PENDING:
                logger.info(f"‚è∞ –û—Ä–¥–µ—Ä {order.symbol} #{order.order_id} –∏—Å—Ç–µ–∫ - –æ—Ç–º–µ–Ω—è–µ–º")
                self._handle_expired_order(order)
                continue
                
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
            if order.should_expire_soon(15) and order.status == OrderStatus.PENDING:
                logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order.symbol} #{order.order_id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç")
            
            if order.status == OrderStatus.PENDING:
                self._check_single_order(order)
            elif order.status == OrderStatus.FILLED:
                self._handle_filled_order(order)
            elif order.status == OrderStatus.SL_TP_PLACED:
                self._check_sl_tp_orders(order)
                # –†–ê–°–®–ò–†–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å SL/TP
                if not order.trailing_triggered:
                    self._check_trailing_conditions(order)
            elif order.status == OrderStatus.SL_TP_ERROR:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ —Å –æ—à–∏–±–∫–∞–º–∏ SL/TP
                continue
    
    def _check_single_order(self, order: WatchedOrder) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        if not self.client:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
            order_info = self.client.futures_get_order(
                symbol=order.symbol,
                orderId=order.order_id
            )
            
            status = order_info['status']
            
            if status == 'FILLED':
                logger.info(f"üéâ –û—Ä–¥–µ—Ä {order.symbol} #{order.order_id} –ò–°–ü–û–õ–ù–ï–ù!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                with self.lock:
                    order.status = OrderStatus.FILLED
                    order.filled_at = datetime.now()
                    self._save_persistent_state()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
                self._send_order_filled_notification(order, order_info)
                
            elif status in ['CANCELED', 'REJECTED', 'EXPIRED']:
                logger.info(f"üö´ –û—Ä–¥–µ—Ä {order.symbol} #{order.order_id} –æ—Ç–º–µ–Ω–µ–Ω/–æ—Ç–∫–ª–æ–Ω–µ–Ω: {status}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                with self.lock:
                    order.status = OrderStatus.CANCELLED
                    self._save_persistent_state()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
                self._send_order_cancelled_notification(order, status)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.remove_order_from_watch(order.order_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
    
    def _handle_filled_order(self, order: WatchedOrder) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä - —Ä–∞–∑–º–µ—â–∞–µ—Ç SL/TP"""
        if order.status != OrderStatus.FILLED:
            return
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        if order.sl_tp_attempts >= 3:
            logger.warning(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SL/TP –¥–ª—è {order.symbol} –∏—Å—á–µ—Ä–ø–∞–Ω")
            with self.lock:
                order.status = OrderStatus.SL_TP_ERROR
                self._save_persistent_state()
            return
            
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            with self.lock:
                order.sl_tp_attempts += 1
                self._save_persistent_state()
            
            logger.info(f"üõ°Ô∏è –†–∞–∑–º–µ—â–∞–µ–º SL/TP –¥–ª—è {order.symbol} (–ø–æ–ø—ã—Ç–∫–∞ {order.sl_tp_attempts}/3)...")
            
            # –†–∞–∑–º–µ—â–∞–µ–º Stop Loss
            sl_success, sl_order_id = self._place_stop_loss(order)
            
            # –†–∞–∑–º–µ—â–∞–µ–º Take Profit
            tp_success, tp_order_id = self._place_take_profit(order)
            
            if sl_success and tp_success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ order_id –Ω–µ None)
                if sl_order_id and tp_order_id:
                    with self.lock:
                        order.status = OrderStatus.SL_TP_PLACED
                        order.sl_order_id = sl_order_id
                        order.tp_order_id = tp_order_id
                        self._save_persistent_state()
                    
                    logger.info(f"‚úÖ SL/TP —Ä–∞–∑–º–µ—â–µ–Ω—ã –¥–ª—è {order.symbol}: SL={sl_order_id}, TP={tp_order_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
                    self._send_position_opened_notification(order, sl_order_id, tp_order_id)
                    
                    # –ù–ï —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å SL/TP –æ—Ä–¥–µ—Ä–∞
                    logger.info(f"üëÅÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ SL/TP –¥–ª—è {order.symbol}")
                else:
                    logger.error(f"‚ùå –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ ID –¥–ª—è SL/TP –æ—Ä–¥–µ—Ä–æ–≤")
                    with self.lock:
                        order.status = OrderStatus.SL_TP_ERROR
                        self._save_persistent_state()
                    self._send_sl_tp_error_notification(order)
                
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å SL/TP –¥–ª—è {order.symbol}")
                if order.sl_tp_attempts >= 3:
                    with self.lock:
                        order.status = OrderStatus.SL_TP_ERROR
                        self._save_persistent_state()
                    self._send_sl_tp_error_notification(order)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
            if order.sl_tp_attempts >= 3:
                with self.lock:
                    order.status = OrderStatus.SL_TP_ERROR
                    self._save_persistent_state()
                self._send_sl_tp_error_notification(order)
    
    def _check_sl_tp_orders(self, order: WatchedOrder) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å SL/TP –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ P&L"""
        if not self.client or order.status != OrderStatus.SL_TP_PLACED:
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥ 80/80/50 –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π SL/TP
            if not order.trailing_triggered:
                self._check_trailing_conditions(order)
            
            sl_filled = False
            tp_filled = False
            sl_cancelled = False
            tp_cancelled = False
            filled_order_info = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Stop Loss –æ—Ä–¥–µ—Ä
            if order.sl_order_id:
                try:
                    sl_info = self.client.futures_get_order(
                        symbol=order.symbol,
                        orderId=order.sl_order_id
                    )
                    
                    if sl_info['status'] == 'FILLED':
                        sl_filled = True
                        filled_order_info = sl_info
                        logger.info(f"üõë Stop Loss –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–ª—è {order.symbol}")
                    elif sl_info['status'] == 'CANCELED':
                        sl_cancelled = True
                        logger.warning(f"üö´ Stop Loss –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {order.symbol}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SL –æ—Ä–¥–µ—Ä–∞ {order.sl_order_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Take Profit –æ—Ä–¥–µ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ SL –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω)
            if not sl_filled and order.tp_order_id:
                try:
                    tp_info = self.client.futures_get_order(
                        symbol=order.symbol,
                        orderId=order.tp_order_id
                    )
                    
                    if tp_info['status'] == 'FILLED':
                        tp_filled = True
                        filled_order_info = tp_info
                        logger.info(f"üéØ Take Profit –∏—Å–ø–æ–ª–Ω–µ–Ω –¥–ª—è {order.symbol}")
                    elif tp_info['status'] == 'CANCELED':
                        tp_cancelled = True
                        logger.warning(f"üö´ Take Profit –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {order.symbol}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TP –æ—Ä–¥–µ—Ä–∞ {order.tp_order_id}: {e}")
            
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –æ—Ä–¥–µ—Ä–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
            if (sl_filled or tp_filled) and filled_order_info:
                self._handle_sl_tp_filled(order, filled_order_info, is_stop_loss=sl_filled)
            
            # –ï—Å–ª–∏ –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            elif sl_cancelled and tp_cancelled:
                logger.warning(f"‚ö†Ô∏è –û–±–∞ –æ—Ä–¥–µ—Ä–∞ (SL/TP) –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è {order.symbol} - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é")
                self._handle_both_orders_cancelled(order)
            
            # –ï—Å–ª–∏ SL –æ—Ç–º–µ–Ω–µ–Ω, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π TP - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL
            elif sl_cancelled and not tp_filled and not tp_cancelled:
                logger.warning(f"‚ö†Ô∏è SL –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {order.symbol}, –Ω–æ TP –∞–∫—Ç–∏–≤–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ SL")
                self._handle_cancelled_sl_order(order)
            
            # –ï—Å–ª–∏ TP –æ—Ç–º–µ–Ω–µ–Ω, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π SL - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP
            elif tp_cancelled and not sl_filled and not sl_cancelled:
                logger.warning(f"‚ö†Ô∏è TP –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {order.symbol}, –Ω–æ SL –∞–∫—Ç–∏–≤–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ TP")
                self._handle_cancelled_tp_order(order)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SL/TP –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {order.order_id}: {e}")
    
    def _handle_sl_tp_filled(self, order: WatchedOrder, filled_order_info: Dict[str, Any], is_stop_loss: bool) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ SL –∏–ª–∏ TP –æ—Ä–¥–µ—Ä–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º P&L"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
            pnl = self._calculate_pnl(order, filled_order_info, is_stop_loss)
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –æ—Ä–¥–µ—Ä (SL –∏–ª–∏ TP)
            self._cancel_remaining_order(order, is_stop_loss)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å P&L
            if is_stop_loss:
                self._send_stop_loss_filled_notification(order, filled_order_info, pnl)
            else:
                self._send_take_profit_filled_notification(order, filled_order_info, pnl)
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            with self.lock:
                order.status = OrderStatus.COMPLETED
                self._save_persistent_state()
            
            self.remove_order_from_watch(order.order_id)
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {order.symbol} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞, P&L: {pnl:.2f} USDT")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è SL/TP: {e}")
    
    def _check_trailing_conditions(self, order: WatchedOrder) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ 80/80/50
        –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –ø—É—Ç–∏ –∫ —Ç–µ–π–∫—É:
        - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç 80% –ø–æ–∑–∏—Ü–∏–∏  
        - –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ø –Ω–∞ entry ¬± 50% –ø—É—Ç–∏
        """
        if not self.client or order.trailing_triggered:
            # TRAILING_LOG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            trailing_logger.debug(f"üîç {order.symbol} | –ü—Ä–æ–ø—É—Å–∫: client={bool(self.client)}, triggered={order.trailing_triggered}")
            return
            
        try:
            # TRAILING_LOG: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏
            trailing_logger.debug(f"üì° {order.symbol} | –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å –±–∏—Ä–∂–∏...")
            ticker_data = self.client.futures_symbol_ticker(symbol=order.symbol)
            current_price = float(ticker_data['price'])
            
            entry_price = order.price
            stop_loss = order.stop_loss  
            take_profit = order.take_profit
            
            # TRAILING_LOG: –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏
            trailing_logger.debug(f"üí∞ {order.symbol} | Entry: {entry_price:.6f} | Current: {current_price:.6f} | SL: {stop_loss:.6f} | TP: {take_profit:.6f}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            if order.signal_type == 'LONG':
                # –î–ª—è LONG: entry -> TP (–≤–≤–µ—Ä—Ö)
                distance_to_tp = take_profit - entry_price
                distance_traveled = current_price - entry_price
                # –ù–æ–≤—ã–π SL –Ω–∞ entry + 50% –ø—É—Ç–∏ –≤–≤–µ—Ä—Ö
                new_sl_distance = distance_to_tp * 0.5
                new_sl_price = entry_price + new_sl_distance
            else:  # SHORT
                # –î–ª—è SHORT: entry -> TP (–≤–Ω–∏–∑)  
                distance_to_tp = entry_price - take_profit
                distance_traveled = entry_price - current_price
                # –ù–æ–≤—ã–π SL –Ω–∞ entry - 50% –ø—É—Ç–∏ –≤–Ω–∏–∑
                new_sl_distance = distance_to_tp * 0.5  
                new_sl_price = entry_price - new_sl_distance
            
            # TRAILING_LOG: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
            progress_percent = (distance_traveled / distance_to_tp * 100) if distance_to_tp > 0 else 0
            trailing_logger.debug(f"üìä {order.symbol} | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order.signal_type}")
            trailing_logger.debug(f"üìè {order.symbol} | –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ TP: {distance_to_tp:.6f}")
            trailing_logger.debug(f"üö∂ {order.symbol} | –ü—Ä–æ–π–¥–µ–Ω–æ: {distance_traveled:.6f}")
            trailing_logger.debug(f"üìà {order.symbol} | –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}% (—Ü–µ–ª—å: 80%)")
            trailing_logger.debug(f"üéØ {order.symbol} | –ù–æ–≤—ã–π SL –±—É–¥–µ—Ç: {new_sl_price:.6f}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 80% –ø—É—Ç–∏ –∫ —Ç–µ–π–∫—É
            if distance_to_tp > 0 and distance_traveled >= (distance_to_tp * 0.8):
                # TRAILING_LOG: –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                trailing_logger.info(f"üéØ {order.symbol} | –¢–†–ï–ô–õ–ò–ù–ì –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.1f}%")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                # TRAILING_LOG: –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
                trailing_logger.debug(f"üìç {order.symbol} | –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏...")
                positions = self.client.futures_position_information(symbol=order.symbol)
                current_position_size = 0
                for pos in positions:
                    if pos['positionSide'] == order.position_side:
                        current_position_size = abs(float(pos['positionAmt']))
                        # TRAILING_LOG: –ù–∞–π–¥–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
                        trailing_logger.debug(f"üíº {order.symbol} | –ü–æ–∑–∏—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {current_position_size} ({pos['positionSide']})")
                        break
                
                if current_position_size > 0:
                    # 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º 80% –ø–æ–∑–∏—Ü–∏–∏
                    close_quantity = round(current_position_size * 0.8, 6)
                    close_side = 'SELL' if order.signal_type == 'LONG' else 'BUY'
                    
                    # TRAILING_LOG: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–∫—Ä—ã—Ç–∏—é 80% –ø–æ–∑–∏—Ü–∏–∏
                    trailing_logger.info(f"üì§ {order.symbol} | –ó–∞–∫—Ä—ã—Ç–∏–µ 80% –ø–æ–∑–∏—Ü–∏–∏: {close_quantity} –∏–∑ {current_position_size}")
                    trailing_logger.debug(f"üîÑ {order.symbol} | –û—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ: {close_side} {close_quantity}")
                    
                    close_order = self.client.futures_create_order(
                        symbol=order.symbol,
                        side=close_side,
                        type='MARKET',
                        quantity=str(close_quantity),
                        positionSide=order.position_side
                    )
                    
                    # TRAILING_LOG: –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ 80%
                    trailing_logger.info(f"‚úÖ {order.symbol} | 80% –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ, –æ—Ä–¥–µ—Ä ID: {close_order.get('orderId')}")
                    
                    # 2. –û–±–Ω–æ–≤–ª—è–µ–º SL –Ω–∞ entry + 50% –ø—É—Ç–∏
                    if order.sl_order_id:
                        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π SL
                        try:
                            # TRAILING_LOG: –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ SL
                            trailing_logger.debug(f"üö´ {order.symbol} | –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ SL: {order.sl_order_id}")
                            self.client.futures_cancel_order(
                                symbol=order.symbol,
                                orderId=order.sl_order_id
                            )
                            trailing_logger.debug(f"‚úÖ {order.symbol} | –°—Ç–∞—Ä—ã–π SL –æ—Ç–º–µ–Ω–µ–Ω")
                        except Exception as e:
                            # TRAILING_LOG: –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã SL
                            trailing_logger.warning(f"‚ö†Ô∏è {order.symbol} | –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π SL: {e}")
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–≤—ã–π SL
                    new_sl_side = 'SELL' if order.signal_type == 'LONG' else 'BUY'
                    remaining_quantity = current_position_size - close_quantity
                    rounded_sl_price = round_price_for_symbol(order.symbol, new_sl_price)
                    
                    # TRAILING_LOG: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ SL
                    trailing_logger.info(f"üõ°Ô∏è {order.symbol} | –ù–æ–≤—ã–π SL: {new_sl_side} {remaining_quantity} @ {rounded_sl_price:.6f}")
                    
                    new_sl_order = self.client.futures_create_order(
                        symbol=order.symbol,
                        side=new_sl_side,
                        type='STOP_MARKET', 
                        quantity=str(remaining_quantity),
                        stopPrice=str(rounded_sl_price),
                        positionSide=order.position_side
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                    with self.lock:
                        order.trailing_triggered = True
                        order.sl_order_id = new_sl_order['orderId']
                        order.stop_loss = rounded_sl_price
                        self._save_persistent_state()
                    
                    # TRAILING_LOG: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
                    trailing_logger.info(f"üéâ {order.symbol} | –¢–†–ï–ô–õ–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
                    trailing_logger.info(f"üìä {order.symbol} | 80% –∑–∞–∫—Ä—ã—Ç–æ: {close_quantity}")
                    trailing_logger.info(f"üõ°Ô∏è {order.symbol} | –ù–æ–≤—ã–π SL ID: {new_sl_order['orderId']}")
                    trailing_logger.info(f"üí∞ {order.symbol} | SL —Ü–µ–Ω–∞: {rounded_sl_price:.6f} (–±—ã–ª–æ {stop_loss:.6f})")
                    
                    logger.info(f"üîÑ –ù–æ–≤—ã–π SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {order.symbol} –Ω–∞ {rounded_sl_price:.6f}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    self._send_trailing_notification(order, close_quantity, rounded_sl_price)
                else:
                    # TRAILING_LOG: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                    trailing_logger.warning(f"‚ùå {order.symbol} | –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞")
            else:
                # TRAILING_LOG: –£—Å–ª–æ–≤–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã
                if distance_to_tp <= 0:
                    trailing_logger.debug(f"‚ö†Ô∏è {order.symbol} | –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ TP: {distance_to_tp}")
                else:
                    trailing_logger.debug(f"‚è≥ {order.symbol} | –¢—Ä–µ–π–ª–∏–Ω–≥ –ù–ï –∞–∫—Ç–∏–≤–µ–Ω: {progress_percent:.1f}% < 80%")
                        
        except Exception as e:
            # TRAILING_LOG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            trailing_logger.error(f"‚ùå {order.symbol} | –û–®–ò–ë–ö–ê —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ –¥–ª—è {order.symbol}: {e}")
    
    def _handle_cancelled_sl_order(self, order: WatchedOrder) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π SL –æ—Ä–¥–µ—Ä - –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—â–∏—Ç—É"""
        if not self.client:
            return
            
        try:
            logger.warning(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è SL –¥–ª—è {order.symbol}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞
            positions = self.client.futures_position_information(symbol=order.symbol)
            position_open = False
            for pos in positions:
                if pos['positionSide'] == order.position_side and float(pos['positionAmt']) != 0:
                    position_open = True
                    break
            
            if not position_open:
                logger.info(f"üìç –ü–æ–∑–∏—Ü–∏—è {order.symbol} –∑–∞–∫—Ä—ã—Ç–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                # –û—Ç–º–µ–Ω—è–µ–º TP –æ—Ä–¥–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                if order.tp_order_id:
                    try:
                        self.client.futures_cancel_order(
                            symbol=order.symbol,
                            orderId=order.tp_order_id
                        )
                        logger.info(f"üö´ TP –æ—Ä–¥–µ—Ä {order.tp_order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å TP: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.remove_order_from_watch(order.order_id)
                self._send_position_closed_externally_notification(order)
                return
            
            # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL
            if order.sl_tp_attempts < 3:
                logger.info(f"üõ°Ô∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL –¥–ª—è {order.symbol} (–ø–æ–ø—ã—Ç–∫–∞ {order.sl_tp_attempts + 1}/3)")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                with self.lock:
                    order.sl_tp_attempts += 1
                    self._save_persistent_state()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π SL
                sl_success, new_sl_order_id = self._place_stop_loss(order)
                
                if sl_success and new_sl_order_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID SL –æ—Ä–¥–µ—Ä–∞
                    with self.lock:
                        order.sl_order_id = new_sl_order_id
                        self._save_persistent_state()
                    
                    logger.info(f"‚úÖ SL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {order.symbol}: {new_sl_order_id}")
                    self._send_sl_restored_notification(order, new_sl_order_id)
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL –¥–ª—è {order.symbol}")
                    if order.sl_tp_attempts >= 3:
                        # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
                        with self.lock:
                            order.status = OrderStatus.SL_TP_ERROR
                            self._save_persistent_state()
                        self._send_sl_restore_failed_notification(order)
            else:
                logger.error(f"‚ùå –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è SL –¥–ª—è {order.symbol} –∏—Å—á–µ—Ä–ø–∞–Ω")
                with self.lock:
                    order.status = OrderStatus.SL_TP_ERROR
                    self._save_persistent_state()
                self._send_sl_restore_failed_notification(order)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ SL: {e}")
    
    def _handle_both_orders_cancelled(self, order: WatchedOrder) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ (SL/TP) –æ—Ç–º–µ–Ω–µ–Ω—ã"""
        if not self.client:
            return
            
        try:
            logger.warning(f"üîß –û–±–∞ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è {order.symbol} - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞
            positions = self.client.futures_position_information(symbol=order.symbol)
            position_open = False
            for pos in positions:
                if pos['positionSide'] == order.position_side and float(pos['positionAmt']) != 0:
                    position_open = True
                    break
            
            if not position_open:
                logger.info(f"üìç –ü–æ–∑–∏—Ü–∏—è {order.symbol} –∑–∞–∫—Ä—ã—Ç–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.remove_order_from_watch(order.order_id)
                self._send_position_closed_externally_notification(order)
                return
            
            # –ü–æ–∑–∏—Ü–∏—è –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞ - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP
            if order.sl_tp_attempts < 3:
                logger.info(f"üõ°Ô∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SL/TP –¥–ª—è {order.symbol} (–ø–æ–ø—ã—Ç–∫–∞ {order.sl_tp_attempts + 1}/3)")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                with self.lock:
                    order.sl_tp_attempts += 1
                    self._save_persistent_state()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ SL/TP
                sl_success, new_sl_order_id = self._place_stop_loss(order)
                tp_success, new_tp_order_id = self._place_take_profit(order)
                
                if sl_success and tp_success and new_sl_order_id and new_tp_order_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID –æ—Ä–¥–µ—Ä–æ–≤
                    with self.lock:
                        order.sl_order_id = new_sl_order_id
                        order.tp_order_id = new_tp_order_id
                        order.status = OrderStatus.SL_TP_PLACED
                        self._save_persistent_state()
                    
                    logger.info(f"‚úÖ SL/TP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {order.symbol}: SL={new_sl_order_id}, TP={new_tp_order_id}")
                    self._send_sl_tp_restored_notification(order, new_sl_order_id, new_tp_order_id)
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SL/TP –¥–ª—è {order.symbol}")
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
                    with self.lock:
                        order.status = OrderStatus.SL_TP_ERROR
                        self._save_persistent_state()
                    self._send_sl_tp_error_notification(order)
            else:
                logger.error(f"‚ùå –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è SL/TP –¥–ª—è {order.symbol} –∏—Å—á–µ—Ä–ø–∞–Ω")
                with self.lock:
                    order.status = OrderStatus.SL_TP_ERROR
                    self._save_persistent_state()
                self._send_sl_tp_error_notification(order)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö SL/TP: {e}")
    
    def _handle_cancelled_tp_order(self, order: WatchedOrder) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π TP –æ—Ä–¥–µ—Ä - –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"""
        if not self.client:
            return
            
        try:
            logger.warning(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è TP –¥–ª—è {order.symbol}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞
            positions = self.client.futures_position_information(symbol=order.symbol)
            position_open = False
            for pos in positions:
                if pos['positionSide'] == order.position_side and float(pos['positionAmt']) != 0:
                    position_open = True
                    break
            
            if not position_open:
                logger.info(f"üìç –ü–æ–∑–∏—Ü–∏—è {order.symbol} –∑–∞–∫—Ä—ã—Ç–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
                # –û—Ç–º–µ–Ω—è–µ–º SL –æ—Ä–¥–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                if order.sl_order_id:
                    try:
                        self.client.futures_cancel_order(
                            symbol=order.symbol,
                            orderId=order.sl_order_id
                        )
                        logger.info(f"üö´ SL –æ—Ä–¥–µ—Ä {order.sl_order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å SL: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.remove_order_from_watch(order.order_id)
                self._send_position_closed_externally_notification(order)
                return
            
            # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP
            if order.sl_tp_attempts < 3:
                logger.info(f"üéØ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TP –¥–ª—è {order.symbol} (–ø–æ–ø—ã—Ç–∫–∞ {order.sl_tp_attempts + 1}/3)")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                with self.lock:
                    order.sl_tp_attempts += 1
                    self._save_persistent_state()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π TP
                tp_success, new_tp_order_id = self._place_take_profit(order)
                
                if tp_success and new_tp_order_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º ID TP –æ—Ä–¥–µ—Ä–∞
                    with self.lock:
                        order.tp_order_id = new_tp_order_id
                        self._save_persistent_state()
                    
                    logger.info(f"‚úÖ TP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {order.symbol}: {new_tp_order_id}")
                    self._send_tp_restored_notification(order, new_tp_order_id)
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP –¥–ª—è {order.symbol}")
                    if order.sl_tp_attempts >= 3:
                        # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
                        with self.lock:
                            order.status = OrderStatus.SL_TP_ERROR
                            self._save_persistent_state()
                        self._send_tp_restore_failed_notification(order)
            else:
                logger.error(f"‚ùå –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è TP –¥–ª—è {order.symbol} –∏—Å—á–µ—Ä–ø–∞–Ω")
                with self.lock:
                    order.status = OrderStatus.SL_TP_ERROR
                    self._save_persistent_state()
                self._send_tp_restore_failed_notification(order)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ TP: {e}")
    
    def _calculate_pnl(self, order: WatchedOrder, filled_order_info: Dict[str, Any], is_stop_loss: bool) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –≤ USDT —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞"""
        try:
            entry_price = order.price
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            exit_price = None
            if 'avgFillPrice' in filled_order_info and filled_order_info['avgFillPrice']:
                exit_price = float(filled_order_info['avgFillPrice'])
            elif 'price' in filled_order_info and filled_order_info['price']:
                exit_price = float(filled_order_info['price'])
            elif 'stopPrice' in filled_order_info and filled_order_info['stopPrice']:
                exit_price = float(filled_order_info['stopPrice'])
            else:
                # –ï—Å–ª–∏ —Ü–µ–Ω—É –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π –ø–ª–∞–Ω–æ–≤—É—é —Ü–µ–Ω—É
                exit_price = order.stop_loss if is_stop_loss else order.take_profit
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é –ø–ª–∞–Ω–æ–≤—É—é: {exit_price}")
            
            quantity = order.quantity
            
            # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–π
            if order.signal_type == 'LONG':
                pnl = (exit_price - entry_price) * quantity
            else:  # SHORT –ø–æ–∑–∏—Ü–∏–π
                pnl = (entry_price - exit_price) * quantity
            
            # –î–µ–ª–∏–º –Ω–∞ –ø–ª–µ—á–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            pnl_adjusted = pnl / FUTURES_LEVERAGE
            
            logger.debug(f"üìä PnL —Ä–∞—Å—á–µ—Ç: {order.symbol} - —Å—ã—Ä–æ–π PnL: {pnl:.2f}, —Å –ø–ª–µ—á–æ–º ({FUTURES_LEVERAGE}x): {pnl_adjusted:.2f}")
            
            return pnl_adjusted
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ P&L: {e}")
            return 0.0
    
    def _cancel_remaining_order(self, order: WatchedOrder, stop_loss_filled: bool) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è SL –∏–ª–∏ TP –æ—Ä–¥–µ—Ä"""
        if not self.client:
            return
            
        try:
            if stop_loss_filled and order.tp_order_id:
                # Stop Loss –∏—Å–ø–æ–ª–Ω–µ–Ω, –æ—Ç–º–µ–Ω—è–µ–º Take Profit
                self.client.futures_cancel_order(
                    symbol=order.symbol,
                    orderId=order.tp_order_id
                )
                logger.info(f"üö´ Take Profit –æ—Ä–¥–µ—Ä {order.tp_order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                
            elif not stop_loss_filled and order.sl_order_id:
                # Take Profit –∏—Å–ø–æ–ª–Ω–µ–Ω, –æ—Ç–º–µ–Ω—è–µ–º Stop Loss
                self.client.futures_cancel_order(
                    symbol=order.symbol,
                    orderId=order.sl_order_id
                )
                logger.info(f"üö´ Stop Loss –æ—Ä–¥–µ—Ä {order.sl_order_id} –æ—Ç–º–µ–Ω–µ–Ω")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –æ—Ä–¥–µ—Ä–∞: {e}")
    
    def _send_stop_loss_filled_notification(self, order: WatchedOrder, filled_info: Dict[str, Any], pnl: float) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ Stop Loss"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            fill_price = order.stop_loss  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–æ–≤—É—é —Ü–µ–Ω—É
            if 'avgFillPrice' in filled_info and filled_info['avgFillPrice']:
                fill_price = float(filled_info['avgFillPrice'])
            elif 'price' in filled_info and filled_info['price']:
                fill_price = float(filled_info['price'])
            elif 'stopPrice' in filled_info and filled_info['stopPrice']:
                fill_price = float(filled_info['stopPrice'])
                
            pnl_symbol = "üíî" if pnl < 0 else "üí∞"
            
            message = f"""
üõë <b>–°–†–ê–ë–û–¢–ê–õ –°–¢–û–ü –û–†–î–ï–†</b> üõë

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

üíµ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {order.price:.6f}
üõë <b>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:</b> {fill_price:.6f}

{pnl_symbol} <b>–ü–†–ò–ë–´–õ–¨:</b> {pnl:.2f} USDT

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Stop Loss –¥–ª—è {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ Stop Loss: {e}")
    
    def _send_take_profit_filled_notification(self, order: WatchedOrder, filled_info: Dict[str, Any], pnl: float) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ Take Profit"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            fill_price = order.take_profit  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–æ–≤—É—é —Ü–µ–Ω—É
            if 'avgFillPrice' in filled_info and filled_info['avgFillPrice']:
                fill_price = float(filled_info['avgFillPrice'])
            elif 'price' in filled_info and filled_info['price']:
                fill_price = float(filled_info['price'])
                
            pnl_symbol = "üí∞" if pnl > 0 else "üíî"
            
            message = f"""
üéØ <b>–°–†–ê–ë–û–¢–ê–õ –¢–ï–ô–ö –û–†–î–ï–†</b> üéØ

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

üíµ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {order.price:.6f}
üéØ <b>–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞:</b> {fill_price:.6f}

{pnl_symbol} <b>–ü–†–ò–ë–´–õ–¨:</b> {pnl:.2f} USDT

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ Take Profit –¥–ª—è {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ Take Profit: {e}")
    
    def _place_stop_loss(self, order: WatchedOrder) -> Tuple[bool, Optional[str]]:
        """–†–∞–∑–º–µ—â–∞–µ—Ç Stop Loss –æ—Ä–¥–µ—Ä"""
        if not self.client:
            return False, None
            
        try:
            sl_side = 'SELL' if order.signal_type == 'LONG' else 'BUY'
            sl_price = round_price_for_symbol(order.symbol, order.stop_loss)
            
            logger.info(f"üõ°Ô∏è –†–∞–∑–º–µ—â–∞–µ–º STOP_MARKET {sl_side} –¥–ª—è {order.symbol}: {order.quantity} at {sl_price}")
            
            stop_order = self.client.futures_create_order(
                symbol=order.symbol,
                side=sl_side,
                type='STOP_MARKET',
                quantity=order.quantity,
                stopPrice=str(sl_price),
                timeInForce='GTC',
                positionSide=order.position_side
            )
            
            logger.info(f"‚úÖ Stop Loss —Ä–∞–∑–º–µ—â–µ–Ω: {stop_order['orderId']}")
            return True, str(stop_order['orderId'])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Stop Loss: {e}")
            return False, None
    
    def _place_take_profit(self, order: WatchedOrder) -> Tuple[bool, Optional[str]]:
        """–†–∞–∑–º–µ—â–∞–µ—Ç Take Profit –æ—Ä–¥–µ—Ä"""
        if not self.client:
            return False, None
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –æ—Ç–∫—Ä—ã—Ç–∏—é)
            tp_side = 'SELL' if order.signal_type == 'LONG' else 'BUY'
            tp_price = round_price_for_symbol(order.symbol, order.take_profit)
            
            logger.info(f"üéØ –†–∞–∑–º–µ—â–∞–µ–º TAKE_PROFIT_MARKET {tp_side} –¥–ª—è {order.symbol}: {order.quantity} at {tp_price}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º TAKE_PROFIT_MARKET –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ Hedge Mode
            tp_order = self.client.futures_create_order(
                symbol=order.symbol,
                side=tp_side,
                type='TAKE_PROFIT_MARKET',  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                quantity=order.quantity,
                stopPrice=str(tp_price),    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º stopPrice –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
                timeInForce='GTC',
                positionSide=order.position_side  # ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫—Ä—ã–≤–∞–µ–º
            )
            
            logger.info(f"‚úÖ Take Profit —Ä–∞–∑–º–µ—â–µ–Ω: {tp_order['orderId']}")
            
            # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ä–¥–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            try:
                order_check = self.client.futures_get_order(
                    symbol=order.symbol,
                    orderId=tp_order['orderId']
                )
                logger.info(f"üîç TP –æ—Ä–¥–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∞: type={order_check.get('type')}, "
                          f"side={order_check.get('side')}, "
                          f"positionSide={order_check.get('positionSide')}, "
                          f"status={order_check.get('status')}")
            except Exception as debug_e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å TP –æ—Ä–¥–µ—Ä: {debug_e}")
            
            return True, str(tp_order['orderId'])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Take Profit: {e}")
            return False, None
    
    def _send_watchdog_notification(self, message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç watchdog"""
        try:
            full_message = f"""
üêï <b>ORDERS WATCHDOG</b> üêï

{message}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            # DISABLED: Telegram spam reduction - —Å–ª—É–∂–µ–±–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è watchdog –æ—Ç–∫–ª—é—á–µ–Ω—ã
            # telegram_bot.send_message(full_message)
            logger.info(f"üì± Watchdog —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {message}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ watchdog —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _send_state_recovery_report(self, system_state) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        if not system_state:
            return
            
        try:
            positions_count = len(system_state.active_positions)
            issues_count = len(system_state.synchronization_issues)
            
            # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            positions_summary = ""
            if positions_count > 0:
                for symbol, position in list(system_state.active_positions.items())[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                    pnl_str = f"{position.unrealized_pnl:+.2f}" if position.unrealized_pnl != 0 else "0.00"
                    sl_status = "‚úÖ SL" if position.has_sl else "‚ùå No SL"
                    tp_status = "‚úÖ TP" if position.has_tp else "‚ùå No TP"
                    positions_summary += f"‚Ä¢ {symbol}: {position.side} {position.size} (PnL: {pnl_str}) | {sl_status} | {tp_status}\n"
                
                if positions_count > 3:
                    positions_summary += f"... –∏ –µ—â–µ {positions_count - 3} –ø–æ–∑–∏—Ü–∏–π\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sync_status = "‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û" if system_state.is_synchronized else "‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´"
            
            message = f"""
üîÑ <b>–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø</b> üîÑ

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {sync_status}
üìç <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:</b> {positions_count}
‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b> {issues_count}

"""
            
            if positions_count > 0:
                message += f"<b>üíº –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò:</b>\n{positions_summary}\n"
            
            if issues_count > 0:
                issues_summary = "\n".join(system_state.synchronization_issues[:3])
                if issues_count > 3:
                    issues_summary += f"\n... –∏ –µ—â–µ {issues_count - 3} –ø—Ä–æ–±–ª–µ–º"
                message += f"<b>‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:</b>\n{issues_summary}\n\n"
            
            message += f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {positions_count} –ø–æ–∑–∏—Ü–∏–π, {issues_count} –ø—Ä–æ–±–ª–µ–º")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
    
    def _send_order_filled_notification(self, order: WatchedOrder, order_info: Dict[str, Any]) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞"""
        try:
            filled_qty = float(order_info.get('executedQty', 0))
            avg_price = float(order_info.get('avgPrice', order.price))
            
            message = f"""
üéâ <b>–û–†–î–ï–† –ò–°–ü–û–õ–ù–ï–ù!</b> üéâ

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–ò—Å–ø–æ–ª–Ω–µ–Ω–æ:</b> {filled_qty}
üíµ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {avg_price:.6f}
‚ö° <b>–ü–ª–µ—á–æ:</b> {FUTURES_LEVERAGE}x

üîÑ <b>–†–∞–∑–º–µ—â–∞—é SL/TP...</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            # DISABLED: Telegram spam reduction - –¥—É–±–ª–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
            # telegram_bot.send_message(message)
            logger.info(f"üì± –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {order.symbol} {order.signal_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
    
    def _send_order_cancelled_notification(self, order: WatchedOrder, status: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞"""
        try:
            message = f"""
üö´ <b>–û–†–î–ï–† –û–¢–ú–ï–ù–ï–ù</b> üö´

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üÜî <b>–û—Ä–¥–µ—Ä:</b> {order.order_id}
üìù <b>–°—Ç–∞—Ç—É—Å:</b> {status}
‚è≥ <b>–í—Ä–µ–º—è –∂–∏–∑–Ω–∏:</b> {(datetime.now() - order.created_at).total_seconds():.0f}s

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            # DISABLED: Telegram spam reduction - –æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
            # telegram_bot.send_message(message)
            logger.info(f"üì± –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {order.symbol} {status}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
    
    def _send_position_opened_notification(self, order: WatchedOrder, sl_order_id: str, tp_order_id: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –º–∞—Ä–∂–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_margin_type = 'CROSSED' if FUTURES_MARGIN_TYPE == 'CROSS' else 'ISOLATED'
            
            message = f"""
üöÄ <b>–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê!</b> üöÄ

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}
üíµ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> {order.price:.6f}
‚ö° <b>–ü–ª–µ—á–æ:</b> {FUTURES_LEVERAGE}x
üîß <b>–†–µ–∂–∏–º –º–∞—Ä–∂–∏:</b> {display_margin_type}

üéØ <b>–ó–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞:</b>
‚Ä¢ üõ°Ô∏è Stop Loss: {order.stop_loss:.6f} (#{sl_order_id[-6:]})
‚Ä¢ üéØ Take Profit: {order.take_profit:.6f} (#{tp_order_id[-6:]})

‚úÖ <b>–ü–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            # DISABLED: Telegram spam reduction - –¥—É–±–ª–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞
            # telegram_bot.send_message(message)
            logger.info(f"üì± –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {order.symbol} {order.signal_type}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def _send_sl_tp_error_notification(self, order: WatchedOrder) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è SL/TP"""
        try:
            message = f"""
üö® <b>–û–®–ò–ë–ö–ê SL/TP!</b> üö®

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üÜî <b>–û—Ä–¥–µ—Ä:</b> {order.order_id}

‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞!</b>
‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ</b>

üìà <b>–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ:</b> {order.price:.6f}
üéØ <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π SL:</b> {order.stop_loss:.6f}
üéØ <b>–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π TP:</b> {order.take_profit:.6f}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            telegram_bot.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ SL/TP: {e}")
    
    def _send_sl_restored_notification(self, order: WatchedOrder, new_sl_order_id: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ SL –æ—Ä–¥–µ—Ä–∞"""
        try:
            message = f"""
üîß <b>SL –û–†–î–ï–† –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù</b> üîß

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

üõ°Ô∏è <b>–ù–æ–≤—ã–π SL:</b> {order.stop_loss:.6f} (#{new_sl_order_id[-6:]})
üéØ <b>TP –∞–∫—Ç–∏–≤–µ–Ω:</b> {order.take_profit:.6f} (#{order.tp_order_id[-6:] if order.tp_order_id else 'N/A'})

‚úÖ <b>–ó–∞—â–∏—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            # DISABLED: Telegram spam reduction - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            # telegram_bot.send_message(message)
            logger.info(f"üì± SL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {order.symbol} SL={order.stop_loss:.6f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ SL: {e}")
    
    def _send_sl_restore_failed_notification(self, order: WatchedOrder) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ SL"""
        try:
            message = f"""
üö® <b>–ù–ï –£–î–ê–õ–û–°–¨ –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ SL!</b> üö®

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

‚ùå <b>SL –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–∏–ª—Å—è –∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è</b>
üéØ <b>TP –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω:</b> {order.take_profit:.6f}

‚ö†Ô∏è <b>–ü–û–ó–ò–¶–ò–Ø –ë–ï–ó –°–¢–û–ü-–õ–û–°–°–ê!</b>
üõ†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SL</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            telegram_bot.send_message(message)
            logger.warning(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å SL –¥–ª—è {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ SL: {e}")
    
    def _send_sl_tp_restored_notification(self, order: WatchedOrder, sl_order_id: str, tp_order_id: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ SL/TP –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            message = f"""
üîß <b>SL/TP –û–†–î–ï–†–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´</b> üîß

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

üõ°Ô∏è <b>–ù–æ–≤—ã–π SL:</b> {order.stop_loss:.6f} (#{sl_order_id[-6:]})
üéØ <b>–ù–æ–≤—ã–π TP:</b> {order.take_profit:.6f} (#{tp_order_id[-6:]})

‚úÖ <b>–ó–∞—â–∏—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            # DISABLED: Telegram spam reduction - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            # telegram_bot.send_message(message)
            logger.info(f"üì± SL/TP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ SL/TP: {e}")
    
    def _send_tp_restored_notification(self, order: WatchedOrder, new_tp_order_id: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ TP –æ—Ä–¥–µ—Ä–∞"""
        try:
            message = f"""
üîß <b>TP –û–†–î–ï–† –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù</b> üîß

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

üéØ <b>–ù–æ–≤—ã–π TP:</b> {order.take_profit:.6f} (#{new_tp_order_id[-6:]})
üõ°Ô∏è <b>SL –∞–∫—Ç–∏–≤–µ–Ω:</b> {order.stop_loss:.6f} (#{order.sl_order_id[-6:] if order.sl_order_id else 'N/A'})

‚úÖ <b>TP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            # DISABLED: Telegram spam reduction - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            # telegram_bot.send_message(message)
            logger.info(f"üì± TP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω–æ): {order.symbol} TP={order.take_profit:.6f}")
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ TP –¥–ª—è {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ TP: {e}")
    
    def _send_tp_restore_failed_notification(self, order: WatchedOrder) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ TP"""
        try:
            message = f"""
üö® <b>–ù–ï –£–î–ê–õ–û–°–¨ –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ TP!</b> üö®

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

‚ùå <b>TP –æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–∏–ª—Å—è –∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è</b>
üõ°Ô∏è <b>SL –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω:</b> {order.stop_loss:.6f}

‚ö†Ô∏è <b>–ü–û–ó–ò–¶–ò–Ø –ë–ï–ó –¢–ï–ô–ö-–ü–†–û–§–ò–¢–ê!</b>
üõ†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ TP</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            telegram_bot.send_message(message)
            logger.warning(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å TP –¥–ª—è {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ TP: {e}")
    
    def _send_trailing_notification(self, order: WatchedOrder, closed_quantity: float, new_sl_price: float) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞ 80/80/50"""
        try:
            message = f"""
üìà <b>–¢–†–ï–ô–õ–ò–ù–ì 80/80/50 –°–†–ê–ë–û–¢–ê–õ</b> üìà

üí∞ <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üéØ <b>–¢–∏–ø:</b> {order.signal_type}

‚úÖ <b>–î–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:</b>
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ 80% –ø–æ–∑–∏—Ü–∏–∏: {closed_quantity:.6f}
‚Ä¢ –ù–æ–≤—ã–π SL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_sl_price:.6f}
‚Ä¢ SL –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ entry + 50% –ø—É—Ç–∏

üí° <b>–õ–æ–≥–∏–∫–∞:</b> –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ 80% –ø—É—Ç–∏ –∫ —Ç–µ–π–∫—É
üõ°Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> 80% –ø—Ä–∏–±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ, —Ä–∏—Å–∫ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ–π–ª–∏–Ω–≥–µ {order.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–π–ª–∏–Ω–≥–µ: {e}")
    
    def check_positions_status(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞"""
        if not self.client:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.client.futures_position_information()
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            open_positions = set()
            for pos in positions:
                position_amt = float(pos['positionAmt'])
                if position_amt != 0:  # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
                    open_positions.add(pos['symbol'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–¥–µ—Ä–∞
            with self.lock:
                orders_to_remove = []
                for order_id, order in self.watched_orders.items():
                    # –ï—Å–ª–∏ —É –æ—Ä–¥–µ—Ä–∞ –µ—Å—Ç—å SL/TP, –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç - –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–∑–≤–Ω–µ
                    if (order.status == OrderStatus.SL_TP_PLACED and 
                        order.symbol not in open_positions):
                        
                        logger.info(f"üîç –ü–æ–∑–∏—Ü–∏—è {order.symbol} –∑–∞–∫—Ä—ã—Ç–∞ –∏–∑–≤–Ω–µ, —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞")
                        
                        # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ SL/TP –æ—Ä–¥–µ—Ä–∞
                        self._cancel_external_sl_tp_orders(order)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        self._send_position_closed_externally_notification(order)
                        
                        # –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        orders_to_remove.append(order_id)
                
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                for order_id in orders_to_remove:
                    del self.watched_orders[order_id]
                
                if orders_to_remove:
                    self._save_persistent_state()
                    logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(orders_to_remove)} –æ—Ä–¥–µ—Ä–æ–≤ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    def _cancel_external_sl_tp_orders(self, order: WatchedOrder) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç SL/TP –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.client:
            return
            
        try:
            # –û—Ç–º–µ–Ω—è–µ–º Stop Loss
            if order.sl_order_id:
                try:
                    self.client.futures_cancel_order(
                        symbol=order.symbol,
                        orderId=order.sl_order_id
                    )
                    logger.info(f"üö´ –û—Ç–º–µ–Ω–µ–Ω SL –æ—Ä–¥–µ—Ä {order.sl_order_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å SL {order.sl_order_id}: {e}")
            
            # –û—Ç–º–µ–Ω—è–µ–º Take Profit
            if order.tp_order_id:
                try:
                    self.client.futures_cancel_order(
                        symbol=order.symbol,
                        orderId=order.tp_order_id
                    )
                    logger.info(f"üö´ –û—Ç–º–µ–Ω–µ–Ω TP –æ—Ä–¥–µ—Ä {order.tp_order_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å TP {order.tp_order_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–Ω–µ—à–Ω–∏—Ö SL/TP: {e}")
    
    def _send_position_closed_externally_notification(self, order: WatchedOrder) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—à–Ω–µ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            message = f"""
üîÑ <b>–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê –ò–ó–í–ù–ï</b> üîÑ

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
üí∞ <b>–û–±—ä–µ–º:</b> {order.quantity}

üö´ <b>–°–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã:</b>
‚Ä¢ SL: {order.sl_order_id or 'N/A'}
‚Ä¢ TP: {order.tp_order_id or 'N/A'}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–Ω–µ—à–Ω–µ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–Ω–µ—à–Ω–µ–º –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
    
    def get_status(self) -> Dict[str, Union[int, List[Dict[str, Any]], bool]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å watchdog"""
        with self.lock:
            return {
                'watched_orders_count': len(self.watched_orders),
                'orders': [order.to_dict() for order in self.watched_orders.values()],
                'is_running': not self.stop_event.is_set(),
                'client_connected': self.client is not None
            }
    
    def get_watched_symbols(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –ø–æ–¥ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å ticker_monitor"""
        with self.lock:
            symbols_info = {}
            
            for order_id, order in self.watched_orders.items():
                symbol = order.symbol
                
                if symbol not in symbols_info:
                    symbols_info[symbol] = {
                        'symbol': symbol,
                        'orders': [],
                        'position_side': order.position_side,
                        'has_sl': False,
                        'has_tp': False,
                        'main_order_filled': False
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
                order_info = {
                    'order_id': order.order_id,
                    'side': order.side,
                    'quantity': order.quantity,
                    'price': order.price,
                    'status': order.status.value,
                    'order_type': 'MAIN' if order.sl_order_id is None and order.tp_order_id is None else 'SL_TP'
                }
                
                symbols_info[symbol]['orders'].append(order_info)
                
                # –û—Ç–º–µ—á–∞–µ–º —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤
                if order.sl_order_id:
                    symbols_info[symbol]['has_sl'] = True
                if order.tp_order_id:
                    symbols_info[symbol]['has_tp'] = True
                if order.status.value in ['FILLED', 'PARTIALLY_FILLED']:
                    symbols_info[symbol]['main_order_filled'] = True
            
            return symbols_info
    
    def check_symbol_conflicts(self, proposed_orders: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–º–∏ –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –æ—Ä–¥–µ—Ä–∞–º–∏
        
        Args:
            proposed_orders: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏: symbol, side, quantity, order_type
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        with self.lock:
            conflicts = []
            recommendations = []
            watched_symbols = self.get_watched_symbols()
            
            for proposed in proposed_orders:
                symbol = proposed['symbol']
                proposed_side = proposed['side']
                proposed_type = proposed.get('order_type', 'MAIN')
                
                if symbol in watched_symbols:
                    watched_info = watched_symbols[symbol]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                    conflict_info = {
                        'symbol': symbol,
                        'proposed_side': proposed_side,
                        'proposed_type': proposed_type,
                        'existing_orders': len(watched_info['orders']),
                        'existing_position_side': watched_info['position_side'],
                        'has_filled_order': watched_info['main_order_filled'],
                        'conflict_type': None,
                        'severity': 'INFO'
                    }
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
                    if watched_info['main_order_filled']:
                        # –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
                        if proposed_side != watched_info['position_side']:
                            conflict_info['conflict_type'] = 'OPPOSITE_DIRECTION'
                            conflict_info['severity'] = 'ERROR'
                            recommendations.append(f"‚ùå {symbol}: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å {proposed_side} –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ {watched_info['position_side']}")
                        else:
                            conflict_info['conflict_type'] = 'SAME_DIRECTION'
                            conflict_info['severity'] = 'WARNING'
                            recommendations.append(f"‚ö†Ô∏è {symbol}: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {proposed_side}")
                    else:
                        # –ï—Å—Ç—å pending –æ—Ä–¥–µ—Ä–∞
                        conflict_info['conflict_type'] = 'PENDING_ORDERS'
                        conflict_info['severity'] = 'WARNING'
                        recommendations.append(f"‚ö†Ô∏è {symbol}: –ï—Å—Ç—å {len(watched_info['orders'])} –æ—Ä–¥–µ—Ä–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
                    
                    conflicts.append(conflict_info)
            
            return {
                'timestamp': datetime.now().isoformat(),
                'total_conflicts': len(conflicts),
                'conflicts': conflicts,
                'recommendations': recommendations,
                'safe_to_proceed': len([c for c in conflicts if c['severity'] == 'ERROR']) == 0
            }
    
    def check_exchange_sync(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –±–∏—Ä–∂–µ–π:
        1. –°–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        3. –í—ã—è–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        """
        if not self.client:
            return {"error": "Binance client not available"}
        
        sync_report = {
            "timestamp": datetime.now().isoformat(),
            "exchange_orders": {},
            "exchange_positions": {},
            "local_state": {},
            "discrepancies": [],
            "recommendations": []
        }
        
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–µ–π...")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏
            exchange_orders = self.client.futures_get_open_orders()
            sync_report["exchange_orders"] = {
                str(order['orderId']): {
                    'symbol': order['symbol'],
                    'side': order['side'],
                    'type': order['type'],
                    'status': order['status'],
                    'quantity': float(order['origQty']),
                    'price': float(order['price']) if order['price'] else None,
                    'stopPrice': float(order['stopPrice']) if order['stopPrice'] else None
                }
                for order in exchange_orders
            }
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
            exchange_positions = self.client.futures_position_information()
            sync_report["exchange_positions"] = {}
            for pos in exchange_positions:
                if float(pos['positionAmt']) != 0:  # –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    sync_report["exchange_positions"][pos['symbol']] = {
                        'positionAmt': float(pos['positionAmt']),
                        'entryPrice': float(pos['entryPrice']) if pos['entryPrice'] else 0.0,
                        'unrealizedPnl': float(pos.get('unrealizedPnl', 0) or 0),
                        'positionSide': pos['positionSide']
                    }
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            with self.lock:
                sync_report["local_state"] = {
                    "total_orders": len(self.watched_orders),
                    "by_status": {},
                    "orders_detail": {}
                }
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                status_count = {}
                for order in self.watched_orders.values():
                    status = order.status.value
                    status_count[status] = status_count.get(status, 0) + 1
                    
                    sync_report["local_state"]["orders_detail"][order.order_id] = {
                        'symbol': order.symbol,
                        'status': status,
                        'sl_order_id': order.sl_order_id,
                        'tp_order_id': order.tp_order_id,
                        'sl_tp_attempts': order.sl_tp_attempts
                    }
                
                sync_report["local_state"]["by_status"] = status_count
            
            # 4. –í—ã—è–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            self._analyze_discrepancies(sync_report)
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(sync_report['discrepancies'])} —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π")
            return sync_report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            sync_report["error"] = str(e)
            return sync_report
    
    def _analyze_discrepancies(self, sync_report: Dict[str, Any]) -> None:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –±–∏—Ä–∂–µ–π"""
        exchange_orders = sync_report["exchange_orders"]
        exchange_positions = sync_report["exchange_positions"]
        local_orders = sync_report["local_state"]["orders_detail"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL/TP –æ—Ä–¥–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –±–∏—Ä–∂–µ
        for order_id, local_order in local_orders.items():
            if local_order['status'] == 'SL_TP_PLACED':
                symbol = local_order['symbol']
                sl_id = local_order['sl_order_id']
                tp_id = local_order['tp_order_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SL –æ—Ä–¥–µ—Ä–∞
                if sl_id and sl_id not in exchange_orders:
                    sync_report["discrepancies"].append({
                        'type': 'MISSING_SL_ORDER',
                        'symbol': symbol,
                        'local_order_id': order_id,
                        'missing_sl_id': sl_id,
                        'message': f'SL –æ—Ä–¥–µ—Ä {sl_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è {symbol}'
                    })
                    sync_report["recommendations"].append(f'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å SL –æ—Ä–¥–µ—Ä–∞ {sl_id} –¥–ª—è {symbol}')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ TP –æ—Ä–¥–µ—Ä–∞
                if tp_id and tp_id not in exchange_orders:
                    sync_report["discrepancies"].append({
                        'type': 'MISSING_TP_ORDER',
                        'symbol': symbol,
                        'local_order_id': order_id,
                        'missing_tp_id': tp_id,
                        'message': f'TP –æ—Ä–¥–µ—Ä {tp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è {symbol}'
                    })
                    sync_report["recommendations"].append(f'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å TP –æ—Ä–¥–µ—Ä–∞ {tp_id} –¥–ª—è {symbol}')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if symbol not in exchange_positions:
                    sync_report["discrepancies"].append({
                        'type': 'MISSING_POSITION',
                        'symbol': symbol,
                        'local_order_id': order_id,
                        'message': f'–ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ SL/TP'
                    })
                    sync_report["recommendations"].append(f'–£–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ {symbol} - –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PENDING –æ—Ä–¥–µ—Ä–∞
        for order_id, local_order in local_orders.items():
            if local_order['status'] == 'PENDING':
                if order_id not in exchange_orders:
                    sync_report["discrepancies"].append({
                        'type': 'MISSING_PENDING_ORDER',
                        'symbol': local_order['symbol'],
                        'local_order_id': order_id,
                        'message': f'PENDING –æ—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ'
                    })
                    sync_report["recommendations"].append(f'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ {order_id} - –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω')
                    # Remove from local tracking immediately
                    if order_id in self.watched_orders:
                        del self.watched_orders[order_id]
                        logger.info(f"üßπ PENDING –æ—Ä–¥–µ—Ä {order_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º "–ª–∏—à–Ω–∏–µ" –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
        all_local_order_ids = set(local_orders.keys())
        for sl_tp_order in local_orders.values():
            if sl_tp_order['sl_order_id']:
                all_local_order_ids.add(sl_tp_order['sl_order_id'])
            if sl_tp_order['tp_order_id']:
                all_local_order_ids.add(sl_tp_order['tp_order_id'])
        
        orphaned_orders = []
        for exchange_order_id in exchange_orders.keys():
            if exchange_order_id not in all_local_order_ids:
                order_info = exchange_orders[exchange_order_id]
                orphaned_orders.append({
                    'order_id': exchange_order_id,
                    'symbol': order_info['symbol'],
                    'type': order_info['type'],
                    'side': order_info['side']
                })
        
        if orphaned_orders:
            sync_report["discrepancies"].append({
                'type': 'ORPHANED_ORDERS',
                'count': len(orphaned_orders),
                'orders': orphaned_orders,
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(orphaned_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'
            })
            sync_report["recommendations"].append(f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {len(orphaned_orders)} "—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö" –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ')
    
    def _send_sync_alert(self, critical_issues: List[Dict[str, Any]]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            issues_text = "\n".join([f"‚Ä¢ {issue['message']}" for issue in critical_issues])
            
            message = f"""
üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò</b> üö®

–ù–∞–π–¥–µ–Ω–æ {len(critical_issues)} —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π:

{issues_text}

‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã!</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            telegram_bot.send_message(message)
            logger.warning(f"üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    def print_sync_report(self, sync_report: Dict[str, Any]) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ"""
        if "error" in sync_report:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {sync_report['error']}")
            return
        
        logger.info("=" * 60)
        logger.info("üìä –û–¢–ß–ï–¢ –û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –° –ë–ò–†–ñ–ï–ô")
        logger.info("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {sync_report['timestamp']}")
        logger.info(f"üìã –û—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ: {len(sync_report['exchange_orders'])}")
        logger.info(f"üìç –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(sync_report['exchange_positions'])}")
        logger.info(f"üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {sync_report['local_state']['total_orders']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        logger.info("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in sync_report['local_state']['by_status'].items():
            logger.info(f"  ‚Ä¢ {status}: {count}")
        
        # –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        discrepancies = sync_report['discrepancies']
        if discrepancies:
            logger.warning(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–û {len(discrepancies)} –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")
            for i, disc in enumerate(discrepancies, 1):
                logger.warning(f"  {i}. [{disc['type']}] {disc['message']}")
        else:
            logger.info("\n‚úÖ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = sync_report['recommendations']
        if recommendations:
            logger.info(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(recommendations)}):")
            for i, rec in enumerate(recommendations, 1):
                logger.info(f"  {i}. {rec}")
        
        logger.info("=" * 60)
    
    def cleanup_filled_orders(self) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
        """
        if not self.client:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance")
            return
        
        with self.lock:
            orders_to_cleanup = list(self.watched_orders.values())
        
        if not orders_to_cleanup:
            logger.info("üìã –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return
        
        logger.info(f"üßπ –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(orders_to_cleanup)} –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏...")
        
        orders_to_remove = []
        
        for order in orders_to_cleanup:
            try:
                order_history = self._get_order_history(order)
                if not order_history:
                    continue
                    
                order_status = order_history['status']
                logger.info(f"üìã {order.symbol} –æ—Ä–¥–µ—Ä {order.order_id}: {order_status}")
                
                if order_status == 'FILLED':
                    if self._should_cleanup_filled_order(order):
                        sl_tp_processed = self._process_sl_tp_for_cleanup(order)
                        
                        if not sl_tp_processed:
                            logger.info(f"üì§ –ü–æ–∑–∏—Ü–∏—è {order.symbol} –∑–∞–∫—Ä—ã—Ç–∞ –∏–∑–≤–Ω–µ")
                            self._send_position_closed_externally_notification(order)
                        
                        orders_to_remove.append(order.order_id)
                        
                elif order_status in ['CANCELED', 'REJECTED', 'EXPIRED']:
                    logger.info(f"üö´ –û—Ä–¥–µ—Ä {order.symbol} #{order.order_id} –æ—Ç–º–µ–Ω–µ–Ω/–æ—Ç–∫–ª–æ–Ω–µ–Ω: {order_status}")
                    orders_to_remove.append(order.order_id)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
        
        self._remove_processed_orders(orders_to_remove)
    
    def _get_order_history(self, order: 'WatchedOrder') -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏"""
        if not self.client:
            return None
            
        try:
            return self.client.futures_get_order(
                symbol=order.symbol,
                orderId=order.order_id
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
            return None
    
    def _should_cleanup_filled_order(self, order: 'WatchedOrder') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—â–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä"""
        if not self.client:
            return False
            
        if order.status not in [OrderStatus.PENDING, OrderStatus.FILLED, OrderStatus.SL_TP_PLACED, OrderStatus.SL_TP_ERROR]:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ–∑–∏—Ü–∏—è —Å —ç—Ç–∏–º —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        try:
            positions = self.client.futures_position_information(symbol=order.symbol)
            for pos in positions:
                if (pos['positionSide'] == order.position_side and 
                    abs(float(pos['positionAmt']) - order.quantity) < 0.001):  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                    return False
                    
            logger.warning(f"üßπ –û—Ä–¥–µ—Ä {order.symbol} #{order.order_id} –∏—Å–ø–æ–ª–Ω–µ–Ω, –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {order.quantity} –Ω–µ—Ç")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {order.symbol}: {e}")
            return False
    
    def _process_sl_tp_for_cleanup(self, order: 'WatchedOrder') -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SL/TP –æ—Ä–¥–µ—Ä–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ"""
        if not (order.sl_order_id or order.tp_order_id):
            return False
            
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SL/TP –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {order.symbol}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SL
        if order.sl_order_id:
            sl_processed = self._check_sl_for_cleanup(order)
            if sl_processed:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TP –µ—Å–ª–∏ SL –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω
        if order.tp_order_id:
            tp_processed = self._check_tp_for_cleanup(order)
            if tp_processed:
                return True
                
        return False
    
    def _check_sl_for_cleanup(self, order: 'WatchedOrder') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SL –æ—Ä–¥–µ—Ä –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ"""
        if not self.client:
            return False
            
        try:
            sl_history = self.client.futures_get_order(
                symbol=order.symbol,
                orderId=order.sl_order_id
            )
            sl_status = sl_history['status']
            logger.info(f"üõ°Ô∏è SL —Å—Ç–∞—Ç—É—Å: {sl_status}")
            
            if sl_status == 'CANCELED':
                return True
            elif sl_status == 'FILLED':
                logger.info(f"‚úÖ SL –∏—Å–ø–æ–ª–Ω–µ–Ω - –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ SL")
                pnl = self._calculate_pnl(order, sl_history, is_stop_loss=True)
                self._send_stop_loss_filled_notification(order, sl_history, pnl)
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SL: {e}")
            
        return False
    
    def _check_tp_for_cleanup(self, order: 'WatchedOrder') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç TP –æ—Ä–¥–µ—Ä –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ"""
        if not self.client:
            return False
            
        try:
            tp_history = self.client.futures_get_order(
                symbol=order.symbol,
                orderId=order.tp_order_id
            )
            tp_status = tp_history['status']
            logger.info(f"üéØ TP —Å—Ç–∞—Ç—É—Å: {tp_status}")
            
            if tp_status == 'CANCELED':
                return True
            elif tp_status == 'FILLED':
                logger.info(f"‚úÖ TP –∏—Å–ø–æ–ª–Ω–µ–Ω - –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —á–µ—Ä–µ–∑ TP")
                pnl = self._calculate_pnl(order, tp_history, is_stop_loss=False)
                self._send_take_profit_filled_notification(order, tp_history, pnl)
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TP: {e}")
            
        return False
    
    def _remove_processed_orders(self, orders_to_remove: List[str]) -> None:
        """–£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        if not orders_to_remove:
            logger.info("‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
            
        with self.lock:
            for order_id in orders_to_remove:
                if order_id in self.watched_orders:
                    removed_order = self.watched_orders.pop(order_id)
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {removed_order.symbol} –æ—Ä–¥–µ—Ä {order_id}")
            
            self._save_persistent_state()
        
        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {len(orders_to_remove)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        self._send_cleanup_notification(len(orders_to_remove))
        
    def _send_cleanup_notification(self, cleaned_count: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            message = f"""
üßπ <b>–û–ß–ò–°–¢–ö–ê –û–†–î–ï–†–û–í</b> üßπ

‚úÖ <b>–û—á–∏—â–µ–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:</b> {cleaned_count}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ {cleaned_count} –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    def fix_desync_order(self, order_id: str) -> bool:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä
        
        Args:
            order_id: ID –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.client:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance")
            return False
        
        with self.lock:
            order = self.watched_orders.get(order_id)
            if not order:
                logger.error(f"‚ùå –û—Ä–¥–µ—Ä {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏")
                return False
        
        try:
            logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è {order.symbol} –æ—Ä–¥–µ—Ä {order_id}")
            
            if order.status == OrderStatus.SL_TP_PLACED:
                return self._fix_sl_tp_desync(order)
            else:
                logger.info(f"üìã –û—Ä–¥–µ—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ {order.status.value}, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def _fix_sl_tp_desync(self, order: 'WatchedOrder') -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º SL_TP_PLACED"""
        sl_status_info = self._get_sl_status(order)
        tp_status_info = self._get_tp_status(order)
        position_open = self._is_position_open(order)
        
        logger.info(f"üìç –ü–æ–∑–∏—Ü–∏—è {order.symbol} {'–æ—Ç–∫—Ä—ã—Ç–∞' if position_open else '–∑–∞–∫—Ä—ã—Ç–∞'}")
        
        # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ - —É–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if not position_open:
            logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, —É–¥–∞–ª—è–µ–º –æ—Ä–¥–µ—Ä {order.order_id} –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            self.remove_order_from_watch(order.order_id)
            self._send_position_closed_externally_notification(order)
            return True
        
        # SL –∏–ª–∏ TP –∏—Å–ø–æ–ª–Ω–µ–Ω
        if sl_status_info['filled'] or tp_status_info['filled']:
            return self._handle_filled_sl_tp(order, sl_status_info, tp_status_info)
        
        # –û—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã
        if sl_status_info['cancelled'] or tp_status_info['cancelled']:
            return self._handle_cancelled_sl_tp(order, sl_status_info, tp_status_info)
        
        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return True
    
    def _get_sl_status(self, order: 'WatchedOrder') -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å SL –æ—Ä–¥–µ—Ä–∞"""
        status_info = {'filled': False, 'cancelled': False, 'info': None}
        
        if not self.client or not order.sl_order_id:
            return status_info
            
        try:
            sl_info = self.client.futures_get_order(
                symbol=order.symbol,
                orderId=order.sl_order_id
            )
            status_info['info'] = sl_info
            sl_status = sl_info['status']
            logger.info(f"üõ°Ô∏è SL —Å—Ç–∞—Ç—É—Å: {sl_status}")
            
            if sl_status == 'CANCELED':
                status_info['cancelled'] = True
            elif sl_status == 'FILLED':
                status_info['filled'] = True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SL: {e}")
            
        return status_info
    
    def _get_tp_status(self, order: 'WatchedOrder') -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å TP –æ—Ä–¥–µ—Ä–∞"""
        status_info = {'filled': False, 'cancelled': False, 'info': None}
        
        if not self.client or not order.tp_order_id:
            return status_info
            
        try:
            tp_info = self.client.futures_get_order(
                symbol=order.symbol,
                orderId=order.tp_order_id
            )
            status_info['info'] = tp_info
            tp_status = tp_info['status']
            logger.info(f"üéØ TP —Å—Ç–∞—Ç—É—Å: {tp_status}")
            
            if tp_status == 'CANCELED':
                status_info['cancelled'] = True
            elif tp_status == 'FILLED':
                status_info['filled'] = True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TP: {e}")
            
        return status_info
    
    def _is_position_open(self, order: 'WatchedOrder') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è"""
        if not self.client:
            return False
            
        try:
            positions = self.client.futures_position_information(symbol=order.symbol)
            for pos in positions:
                if pos['positionSide'] == order.position_side and float(pos['positionAmt']) != 0:
                    return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
    
    def _handle_filled_sl_tp(self, order: 'WatchedOrder', sl_info: Dict[str, Any], tp_info: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ SL/TP –æ—Ä–¥–µ—Ä–∞"""
        if sl_info['filled'] and sl_info['info']:
            logger.info(f"‚úÖ SL –∏—Å–ø–æ–ª–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
            self._handle_sl_tp_filled(order, sl_info['info'], is_stop_loss=True)
            return True
        elif tp_info['filled'] and tp_info['info']:
            logger.info(f"‚úÖ TP –∏—Å–ø–æ–ª–Ω–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
            self._handle_sl_tp_filled(order, tp_info['info'], is_stop_loss=False)
            return True
        return False
    
    def _handle_cancelled_sl_tp(self, order: 'WatchedOrder', sl_info: Dict[str, Any], tp_info: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ SL/TP –æ—Ä–¥–µ—Ä–∞"""
        sl_cancelled = sl_info['cancelled']
        tp_cancelled = tp_info['cancelled']
        
        if sl_cancelled and not tp_cancelled:
            logger.info(f"üîß SL –æ—Ç–º–µ–Ω–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É")
            self._handle_cancelled_sl_order(order)
            return True
            
        elif tp_cancelled and not sl_cancelled:
            logger.info(f"üîß TP –æ—Ç–º–µ–Ω–µ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏")
            return self._restore_tp_order(order)
            
        elif sl_cancelled and tp_cancelled:
            logger.warning(f"‚ö†Ô∏è –û–±–∞ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã, –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ –∑–∞—â–∏—Ç—ã!")
            return self._restore_both_orders(order)
            
        return True
    
    def _restore_tp_order(self, order: 'WatchedOrder') -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TP –æ—Ä–¥–µ—Ä"""
        tp_success, new_tp_id = self._place_take_profit(order)
        if tp_success and new_tp_id:
            with self.lock:
                order.tp_order_id = new_tp_id
                self._save_persistent_state()
            logger.info(f"‚úÖ TP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_tp_id}")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP")
            return False
    
    def _restore_both_orders(self, order: 'WatchedOrder') -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–∞ –æ—Ä–¥–µ—Ä–∞ (SL –∏ TP)"""
        with self.lock:
            order.status = OrderStatus.SL_TP_ERROR
            self._save_persistent_state()
        
        sl_success, new_sl_id = self._place_stop_loss(order)
        tp_success, new_tp_id = self._place_take_profit(order)
        
        if sl_success and tp_success and new_sl_id and new_tp_id:
            with self.lock:
                order.sl_order_id = new_sl_id
                order.tp_order_id = new_tp_id
                order.status = OrderStatus.SL_TP_PLACED
                self._save_persistent_state()
            logger.info(f"‚úÖ –ó–∞—â–∏—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: SL={new_sl_id}, TP={new_tp_id}")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –∑–∞—â–∏—Ç—É")
            return False
    
    def _cleanup_expired_orders(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        try:
            expired_orders = []
            
            with self.lock:
                for order_id, order in list(self.watched_orders.items()):
                    if order.is_expired() and order.status in [OrderStatus.PENDING, OrderStatus.SL_TP_ERROR]:
                        expired_orders.append((order_id, order))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –æ—Ä–¥–µ—Ä–∞
            for order_id, order in expired_orders:
                logger.info(f"üïê –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –æ—Ä–¥–µ—Ä–∞: {order.symbol} #{order_id}")
                self._handle_expired_order(order)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    
    def _handle_expired_order(self, order: WatchedOrder) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–π –æ—Ä–¥–µ—Ä"""
        try:
            if order.status == OrderStatus.PENDING:
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                try:
                    if self.client:
                        self.client.futures_cancel_order(
                            symbol=order.symbol,
                            orderId=order.order_id
                        )
                        logger.info(f"üö´ –û—Ç–º–µ–Ω–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π –æ—Ä–¥–µ—Ä {order.symbol} #{order.order_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–π –æ—Ä–¥–µ—Ä {order.order_id}: {e}")
            
            elif order.status == OrderStatus.SL_TP_PLACED:
                # –û—Ç–º–µ–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ SL/TP –æ—Ä–¥–µ—Ä–∞
                self._cancel_external_sl_tp_orders(order)
                logger.info(f"üö´ –û—Ç–º–µ–Ω–µ–Ω—ã SL/TP –¥–ª—è –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ {order.symbol}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            with self.lock:
                if order.order_id in self.watched_orders:
                    del self.watched_orders[order.order_id]
                    self._save_persistent_state()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self._send_order_expired_notification(order)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
    
    def _send_order_expired_notification(self, order: WatchedOrder) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞"""
        try:
            status_text = {
                OrderStatus.PENDING: "–õ–ò–ú–ò–¢–ù–´–ô –û–†–î–ï–†",
                OrderStatus.SL_TP_PLACED: "–ó–ê–©–ò–¢–ù–´–ï –û–†–î–ï–†–ê",
                OrderStatus.SL_TP_ERROR: "–ü–†–û–ë–õ–ï–ú–ù–´–ô –û–†–î–ï–†"
            }.get(order.status, "–û–†–î–ï–†")
            
            message = f"""
‚è∞ <b>–ò–°–¢–ï–ö {status_text}</b> ‚è∞

üìä <b>–°–∏–º–≤–æ–ª:</b> {order.symbol}
üÜî <b>–û—Ä–¥–µ—Ä:</b> {order.order_id}
üìà <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {order.signal_type}
‚è≥ <b>–í—Ä–µ–º—è –∂–∏–∑–Ω–∏:</b> {(datetime.now() - order.created_at).total_seconds():.0f}s
üïê <b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {order.source_timeframe}

üóëÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
            telegram_bot.send_message(message)
            logger.info(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ {order.symbol}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: {e}")

    def run(self) -> None:
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üêï Orders Watchdog –∑–∞–ø—É—â–µ–Ω!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        self._send_watchdog_notification("üöÄ Orders Watchdog –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É")
        
        try:
            cycle_counter = 0  # –°—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π
            sync_counter = 0   # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
            cleanup_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
            
            while not self.stop_event.is_set():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                    self._process_incoming_requests()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–æ–≤ (–≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö)
                    self.check_orders_status()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 6 —Ü–∏–∫–ª–æ–≤ (30 —Å–µ–∫—É–Ω–¥)
                    cycle_counter += 1
                    if cycle_counter >= 6:
                        self.check_positions_status()
                        cycle_counter = 0
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 6 —Ü–∏–∫–ª–æ–≤
                    cleanup_counter += 1
                    if cleanup_counter >= 6:
                        expired_count = len([o for o in self.watched_orders.values() if o.is_expired()])
                        if expired_count > 0:
                            logger.info(f"üßπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")
                            self._cleanup_expired_orders()
                        cleanup_counter = 0
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 120 —Ü–∏–∫–ª–æ–≤ (10 –º–∏–Ω—É—Ç)
                    sync_counter += 1
                    if sync_counter >= 120:
                        logger.info("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                        sync_report = self.check_exchange_sync()
                        if sync_report.get('discrepancies'):
                            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(sync_report['discrepancies'])} —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Å –±–∏—Ä–∂–µ–π")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                            critical_issues = [d for d in sync_report['discrepancies'] 
                                             if d['type'] in ['MISSING_POSITION', 'MISSING_PENDING_ORDER']]
                            if critical_issues:
                                self._send_sync_alert(critical_issues)
                        sync_counter = 0
                    
                    time.sleep(self.check_interval)
                    
                except KeyboardInterrupt:
                    logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                    time.sleep(self.check_interval)
        
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Orders Watchdog: {e}")
        finally:
            self.shutdown()
    
    def shutdown(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞–º–∏"""
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ Orders Watchdog...")
        self.stop_event.set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        active_limit_orders = []
        sl_tp_orders = []
        
        with self.lock:
            for order in self.watched_orders.values():
                if order.status == OrderStatus.PENDING:
                    active_limit_orders.append(order)
                elif order.status == OrderStatus.SL_TP_PLACED:
                    sl_tp_orders.append(order)
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(active_limit_orders)} –ª–∏–º–∏—Ç–Ω—ã—Ö, {len(sl_tp_orders)} –ø–æ–∑–∏—Ü–∏–π —Å SL/TP")
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö
        if active_limit_orders:
            try:
                print("\n" + "="*60)
                print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞!")
                print("="*60)
                for order in active_limit_orders:
                    print(f"‚Ä¢ {order.symbol}: {order.signal_type} {order.quantity} @ {order.price}")
                    print(f"  –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%H:%M:%S')}")
                    if order.expires_at:
                        print(f"  –ò—Å—Ç–µ–∫–∞–µ—Ç: {order.expires_at.strftime('%H:%M:%S')}")
                
                print("\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ª–∏–º–∏—Ç–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏?")
                print("1. [K] –û—Å—Ç–∞–≤–∏—Ç—å –∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é (Keep)")
                print("2. [C] –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ (Cancel)")
                print("3. [A] –°–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ (Ask)")
                
                while True:
                    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [K/C/A]: ").upper().strip()
                    if choice in ['K', 'C', 'A']:
                        break
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ K, C –∏–ª–∏ A")
                
                if choice == 'C':
                    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                    self._cancel_all_limit_orders(active_limit_orders)
                elif choice == 'A':
                    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
                    self._interactive_order_management(active_limit_orders)
                # –ï—Å–ª–∏ K - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                
            except (KeyboardInterrupt, EOFError):
                logger.warning("‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        if sl_tp_orders:
            logger.info(f"üíº –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å SL/TP –±—É–¥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ")
            position_summary = "\n".join([f"‚Ä¢ {order.symbol}: {order.signal_type}" for order in sl_tp_orders])
            self._send_watchdog_notification(f"üõë Watchdog –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n{position_summary}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._save_persistent_state()
        
        logger.info("‚úÖ Orders Watchdog –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        sys.exit(0)
    
    def _cancel_all_limit_orders(self, orders: List[WatchedOrder]) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        logger.info(f"üö´ –û—Ç–º–µ–Ω—è–µ–º {len(orders)} –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        
        for order in orders:
            try:
                if self.client:
                    self.client.futures_cancel_order(
                        symbol=order.symbol,
                        orderId=order.order_id
                    )
                    logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω: {order.symbol} #{order.order_id}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                with self.lock:
                    if order.order_id in self.watched_orders:
                        del self.watched_orders[order.order_id]
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order.order_id}: {e}")
    
    def _interactive_order_management(self, orders: List[WatchedOrder]) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–º –æ—Ä–¥–µ—Ä–æ–º"""
        for i, order in enumerate(orders, 1):
            print(f"\n--- –û—Ä–¥–µ—Ä {i}/{len(orders)} ---")
            print(f"–°–∏–º–≤–æ–ª: {order.symbol}")
            print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {order.signal_type}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}")
            print(f"–¶–µ–Ω–∞: {order.price}")
            print(f"–°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%H:%M:%S')}")
            if order.expires_at:
                print(f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {order.expires_at.strftime('%H:%M:%S')}")
            
            while True:
                choice = input("–û—Å—Ç–∞–≤–∏—Ç—å [K] –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å [C]? ").upper().strip()
                if choice in ['K', 'C']:
                    break
                print("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ K –∏–ª–∏ C")
            
            if choice == 'C':
                try:
                    if self.client:
                        self.client.futures_cancel_order(
                            symbol=order.symbol,
                            orderId=order.order_id
                        )
                    
                    with self.lock:
                        if order.order_id in self.watched_orders:
                            del self.watched_orders[order.order_id]
                    
                    print(f"‚úÖ –û—Ä–¥–µ—Ä {order.symbol} –æ—Ç–º–µ–Ω–µ–Ω")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")


# API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å order_executor
class WatchdogAPI:
    """API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Orders Watchdog"""
    
    def __init__(self):
        self.watchdog_file = Path('orders_watchdog_requests.json')
    
    def add_order_for_monitoring(self, order_data: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è order_executor –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ä–¥–µ—Ä–æ–≤ –≤ watchdog
        """
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            requests_data = []
            if self.watchdog_file.exists():
                with open(self.watchdog_file, 'r', encoding='utf-8') as f:
                    requests_data = json.load(f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            request = {
                'action': 'add_order',
                'data': order_data,
                'timestamp': datetime.now().isoformat()
            }
            requests_data.append(request)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.watchdog_file, 'w', encoding='utf-8') as f:
                json.dump(requests_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞ {order_data.get('symbol', 'UNKNOWN')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ order_executor
watchdog_api = WatchdogAPI()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # --- OrderSyncService –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ---
    try:
        from order_sync_service import create_order_sync_service, OrderRepository
        sync_service = create_order_sync_service()
        logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º OrdersWatchdog...")
        sync_report = sync_service.sync_orders()
        if sync_report.error_count > 0:
            logger.warning(f"‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—à–∏–±–∫–∞–º–∏: {sync_report.error_count}")
        else:
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sync_report.total_processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        # --- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è JSON-—Ñ–∞–π–ª–∞ —Å –ë–î –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
        sync_json_with_db(sync_report)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    # --- END OrderSyncService –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ---
    try:
        watchdog = OrdersWatchdog()
        if not watchdog.client:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Binance –∫–ª–∏–µ–Ω—Ç")
            sys.exit(1)
        watchdog.run()
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


# --- –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ JSON-—Ñ–∞–π–ª–∞ —Å –ë–î –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
def sync_json_with_db(sync_report):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç orders_watchdog_state.json —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏ –∏–∑ –ë–î,
    –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–¥–∞–ª—ë–Ω–Ω—ã–º –æ—Ä–¥–µ—Ä–∞–º.
    """
    try:
        from order_sync_service import OrderRepository
        from telegram_bot import telegram_bot
        import json
        from pathlib import Path
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î
        repo = OrderRepository()
        db_orders = repo.get_all_orders()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É JSON-—Ñ–∞–π–ª–∞
        def order_to_json(order):
            return {
                "symbol": order.symbol,
                "order_id": order.order_id,
                "side": order.side,
                "position_side": order.position_side,
                "quantity": order.quantity,
                "price": order.price,
                "signal_type": order.signal_type,
                "stop_loss": order.stop_loss,
                "take_profit": order.take_profit,
                "status": order.status,
                "created_at": order.created_at,
                "filled_at": order.filled_at,
                "sl_order_id": order.sl_order_id,
                "tp_order_id": order.tp_order_id,
                "sl_tp_attempts": 0
            }
        json_orders = [order_to_json(o) for o in db_orders]
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º JSON-—Ñ–∞–π–ª
        state = {
            "timestamp": datetime.now().isoformat(),
            "watched_orders": json_orders
        }
        state_file = Path("orders_watchdog_state.json")
        with open(state_file, "w", encoding="utf-8") as f:
            json.dump(state, f, indent=2, ensure_ascii=False)
        logger.info(f"üíæ orders_watchdog_state.json —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î: {len(json_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        deleted_records = []
        if hasattr(sync_report, 'records') and sync_report.records:
            for record in sync_report.records:
                if hasattr(record, 'action') and record.action == 'DELETED':
                    deleted_records.append(record)
        
        if deleted_records:
            for rec in deleted_records:
                symbol = getattr(rec, 'symbol', '?')
                order_id = getattr(rec, 'order_id', '?')
                reason = getattr(rec, 'reason', '')
                msg = f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å–∏—Ä–æ—Ç—Å–∫–∏–π –æ—Ä–¥–µ—Ä: {symbol} #{order_id}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                logger.info(msg)
                try:
                    telegram_bot.send_message(msg)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {e}")
        else:
            logger.info("‚úÖ –°–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ sync_json_with_db: {e}")


if __name__ == "__main__":
    main()
