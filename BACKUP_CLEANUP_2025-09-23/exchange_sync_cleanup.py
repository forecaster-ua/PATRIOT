#!/usr/bin/env python3
"""
–†—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä - –æ—á–∏—Å—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ –ë–î, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
"""

import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Set
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from api_client import BinanceClient
    from config import BINANCE_API_KEY, BINANCE_SECRET_KEY, BINANCE_TESTNET
    API_AVAILABLE = True
    print("‚úÖ API –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError as e:
    print(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    API_AVAILABLE = False

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
    return sqlite3.connect('signals.db', timeout=10)

def load_db_orders() -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, symbol, order_id, side, position_side, quantity, price, 
                   signal_type, stop_loss, take_profit, status, created_at, 
                   filled_at, sl_order_id, tp_order_id, timestamp
            FROM watchdog_orders
            ORDER BY timestamp DESC
        """)
        
        columns = [desc[0] for desc in cursor.description]
        rows = cursor.fetchall()
        conn.close()
        
        db_orders = [dict(zip(columns, row)) for row in rows]
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î: {len(db_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        return db_orders
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î: {e}")
        return []

def get_exchange_orders() -> Dict[str, Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏"""
    if not API_AVAILABLE:
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
        return simulate_exchange_orders()
    
    try:
        client = BinanceClient()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        if BINANCE_TESTNET:
            open_orders = client.client.futures_get_open_orders()
        else:
            open_orders = client.client.futures_get_open_orders()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        exchange_orders = {}
        for order in open_orders:
            order_id = str(order['orderId'])
            exchange_orders[order_id] = {
                'symbol': order['symbol'],
                'order_id': order_id,
                'status': order['status'],
                'side': order['side'],
                'position_side': order.get('positionSide', 'BOTH'),
                'quantity': float(order['origQty']),
                'price': float(order['price']) if order['price'] != '0' else 0,
                'type': order['type']
            }
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å –±–∏—Ä–∂–∏: {len(exchange_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        return exchange_orders
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏: {e}")
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...")
        return simulate_exchange_orders()

def simulate_exchange_orders() -> Dict[str, Dict]:
    """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API)"""
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ –ë–î –∫–∞–∫ "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ –±–∏—Ä–∂–µ"
    db_orders = load_db_orders()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –Ω–∞ –±–∏—Ä–∂–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ä–¥–µ—Ä–æ–≤
    simulated_orders = {}
    for order in db_orders[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∫–∞–∫ "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ"
        order_id = str(order['order_id'])
        simulated_orders[order_id] = {
            'symbol': order['symbol'],
            'order_id': order_id,
            'status': 'NEW',  # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ
            'side': order['side'],
            'position_side': order['position_side'],
            'quantity': order['quantity'],
            'price': order['price'],
            'type': 'LIMIT'
        }
    
    print(f"üé≠ –°–ò–ú–£–õ–Ø–¶–ò–Ø: –ù–∞ –±–∏—Ä–∂–µ {len(simulated_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ {len(db_orders)} –≤ –ë–î")
    return simulated_orders

def find_orphaned_orders(db_orders: List[Dict], exchange_orders: Dict[str, Dict]) -> List[Dict]:
    """–ù–∞—Ö–æ–¥–∏—Ç –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –ë–î, –Ω–æ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ"""
    orphaned = []
    
    for db_order in db_orders:
        order_id = str(db_order['order_id'])
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        if db_order['status'] in ['FILLED', 'CANCELED', 'CANCELLED', 'REJECTED', 'EXPIRED']:
            continue
        
        # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ - —ç—Ç–æ —Å–∏—Ä–æ—Ç–∞
        if order_id not in exchange_orders:
            orphaned.append(db_order)
    
    return orphaned

def show_orphaned_report(orphaned_orders: List[Dict]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–∞—Ö"""
    if not orphaned_orders:
        print("‚úÖ –°–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"\nüîç –ù–ê–ô–î–ï–ù–û –°–ò–†–û–¢–°–ö–ò–• –û–†–î–ï–†–û–í: {len(orphaned_orders)}")
    print("=" * 80)
    print(f"{'‚Ññ':<3} {'Symbol':<12} {'Order ID':<15} {'Status':<12} {'Created':<20}")
    print("-" * 80)
    
    for i, order in enumerate(orphaned_orders[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        created = order.get('created_at', 'N/A')[:19] if order.get('created_at') else 'N/A'
        print(f"{i:<3} {order['symbol']:<12} {order['order_id']:<15} {order['status']:<12} {created}")
    
    if len(orphaned_orders) > 20:
        print(f"... –∏ –µ—â–µ {len(orphaned_orders) - 20} –æ—Ä–¥–µ—Ä–æ–≤")

def cleanup_orphaned_orders(orphaned_orders: List[Dict], simulate_only: bool = True) -> int:
    """–û—á–∏—â–∞–µ—Ç —Å–∏—Ä–æ—Ç—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î"""
    if not orphaned_orders:
        return 0
    
    if simulate_only:
        print(f"\nüé≠ –°–ò–ú–£–õ–Ø–¶–ò–Ø: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(orphaned_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        return len(orphaned_orders)
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        removed_count = 0
        
        for order in orphaned_orders:
            cursor.execute("DELETE FROM watchdog_orders WHERE order_id = ?", (order['order_id'],))
            removed_count += 1
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω: {order['symbol']} | {order['order_id']} | {order['status']}")
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î: {removed_count} —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        return removed_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return 0

def update_orders_status(exchange_orders: Dict[str, Dict]) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏"""
    if not exchange_orders:
        return 0
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        updated_count = 0
        
        for order_id, exchange_order in exchange_orders.items():
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î
            cursor.execute("""
                UPDATE watchdog_orders 
                SET status = ? 
                WHERE order_id = ? AND status != ?
            """, (exchange_order['status'], order_id, exchange_order['status']))
            
            if cursor.rowcount > 0:
                updated_count += 1
                print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å: {exchange_order['symbol']} | {order_id} ‚Üí {exchange_order['status']}")
        
        conn.commit()
        conn.close()
        
        if updated_count > 0:
            print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {updated_count}")
        
        return updated_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
        return 0

def show_db_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ë–î"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM watchdog_orders")
        total_orders = cursor.fetchone()[0]
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute("""
            SELECT status, COUNT(*) 
            FROM watchdog_orders 
            GROUP BY status 
            ORDER BY COUNT(*) DESC
        """)
        status_stats = cursor.fetchall()
        
        conn.close()
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–î:")
        print(f"   –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {total_orders}")
        print(f"   –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in status_stats:
            print(f"     {status}: {count}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîÑ –†–£–ß–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¢–û–† –û–†–î–ï–†–û–í")
    print("=" * 50)
    print("–û—á–∏—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ë–î, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ")
    
    # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
    show_db_stats()
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print(f"\nüìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    db_orders = load_db_orders()
    exchange_orders = get_exchange_orders()
    
    if not db_orders:
        print("‚ùå –ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –≤ –ë–î")
        return
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ –±–∏—Ä–∂–∏
    print(f"\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã...")
    updated_count = update_orders_status(exchange_orders)
    
    # 4. –ù–∞—Ö–æ–¥–∏–º —Å–∏—Ä–æ—Ç—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞
    print(f"\nüîç –ò—â–µ–º —Å–∏—Ä–æ—Ç—Å–∫–∏–µ –æ—Ä–¥–µ—Ä–∞...")
    orphaned_orders = find_orphaned_orders(db_orders, exchange_orders)
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
    show_orphaned_report(orphaned_orders)
    
    # 6. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    if orphaned_orders:
        print(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {len(orphaned_orders)} —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏–∑ –ë–î?")
        print("   [y] - –î–∞, —É–¥–∞–ª–∏—Ç—å")
        print("   [s] - –°–∏–º—É–ª—è—Ü–∏—è (–ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ)")
        print("   [n] - –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").lower().strip()
        
        if choice == 'y':
            removed = cleanup_orphaned_orders(orphaned_orders, simulate_only=False)
            print(f"\n‚úÖ –†–ï–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï: {removed} –æ—Ä–¥–µ—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ")
        elif choice == 's':
            removed = cleanup_orphaned_orders(orphaned_orders, simulate_only=True)
            print(f"\nüé≠ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {removed} –æ—Ä–¥–µ—Ä–æ–≤ –±—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–æ")
        else:
            print("\n‚è≠Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    
    # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    show_db_stats()
    
    print(f"\n‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")

if __name__ == "__main__":
    main()
