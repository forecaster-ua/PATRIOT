#!/usr/bin/env python3
"""
WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Binance WebSocket –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ –±—Ä–∞—É–∑–µ—Ä
"""

import asyncio
import websockets
import json
import aiohttp
import logging
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CryptoPriceServer:
    def __init__(self):
        self.clients = set()
        self.binance_ws = None
        self.is_running = False
        
        # –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ tickers.txt
        self.tickers = [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 
            'ADAUSDT', 'ALGOUSDT', 'APTUSDT', 'AVAXUSDT',
            'SOLUSDT', 'CRVUSDT', 'BCHUSDT',
            'WIFUSDT', 'XLMUSDT', 'XRPUSDT', 'XTZUSDT'
        ]
        
        logger.info(f"Initialized server for {len(self.tickers)} tickers")

    async def register_client(self, websocket):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.add(websocket)
        logger.info(f"Client connected: {websocket.remote_address}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
            await websocket.send(json.dumps({
                'type': 'tickers',
                'data': self.tickers
            }))
            
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            async for message in websocket:
                try:
                    data = json.loads(message)
                    await self.handle_client_message(websocket, data)
                except json.JSONDecodeError:
                    logger.error(f"Invalid JSON from client: {message}")
                except Exception as e:
                    logger.error(f"Error handling client message: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"Client disconnected: {websocket.remote_address}")
        finally:
            self.clients.discard(websocket)

    async def handle_client_message(self, websocket, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        message_type = data.get('type')
        
        if message_type == 'start':
            logger.info("Client requested to start monitoring")
            if not self.is_running:
                await self.start_binance_stream()
            await websocket.send(json.dumps({
                'type': 'status',
                'status': 'connected'
            }))
            
        elif message_type == 'stop':
            logger.info("Client requested to stop monitoring")
            await self.stop_binance_stream()
            await websocket.send(json.dumps({
                'type': 'status',
                'status': 'disconnected'
            }))

    async def start_binance_stream(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance WebSocket"""
        if self.is_running:
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
            streams = [f"{ticker.lower()}@ticker" for ticker in self.tickers]
            stream_name = '/'.join(streams)
            
            url = f"wss://stream.binance.com:9443/ws/{stream_name}"
            logger.info(f"Connecting to Binance WebSocket: {url}")
            
            self.binance_ws = await websockets.connect(url)
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            asyncio.create_task(self.process_binance_data())
            
            logger.info("Successfully connected to Binance WebSocket")
            
        except Exception as e:
            logger.error(f"Failed to connect to Binance: {e}")
            self.is_running = False

    async def stop_binance_stream(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance WebSocket"""
        self.is_running = False
        if self.binance_ws:
            await self.binance_ws.close()
            self.binance_ws = None
            logger.info("Binance WebSocket connection closed")

    async def process_binance_data(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Binance WebSocket"""
        try:
            if self.binance_ws is None:
                logger.error("Binance WebSocket is not connected")
                return
                
            async for message in self.binance_ws:
                if not self.is_running:
                    break
                    
                try:
                    data = json.loads(message)
                    await self.broadcast_price_update(data)
                except json.JSONDecodeError:
                    logger.error(f"Invalid JSON from Binance: {message}")
                except Exception as e:
                    logger.error(f"Error processing Binance data: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.warning("Binance WebSocket connection closed")
        except Exception as e:
            logger.error(f"Error in Binance data processing: {e}")
        finally:
            self.is_running = False

    async def broadcast_price_update(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.clients:
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        update = {
            'type': 'price_update',
            'symbol': data.get('s'),
            'price': float(data.get('c', 0)),
            'change_24h': float(data.get('P', 0)),
            'volume': float(data.get('v', 0)),
            'timestamp': datetime.now().isoformat()
        }
        
        message = json.dumps(update)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        disconnected_clients = set()
        for client in self.clients:
            try:
                await client.send(message)
            except websockets.exceptions.ConnectionClosed:
                disconnected_clients.add(client)
            except Exception as e:
                logger.error(f"Error sending to client: {e}")
                disconnected_clients.add(client)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.clients -= disconnected_clients

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = CryptoPriceServer()
    
    print("=" * 60)
    print("üöÄ PATRIOT WebSocket Price Server")
    print("=" * 60)
    print("üì° Starting WebSocket server on localhost:8765")
    print("üîó Connect from browser to: ws://localhost:8765")
    print("üí∞ Monitoring tickers:", ", ".join(server.tickers))
    print("=" * 60)
    print("üí° Press Ctrl+C to stop the server")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
        async with websockets.serve(server.register_client, "localhost", 8765):
            await asyncio.Future()  # run forever
        
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")
    except Exception as e:
        logger.error(f"Server error: {e}")

def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Server stopped by user")

if __name__ == "__main__":
    run_server()
