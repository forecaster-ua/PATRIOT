#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ MAX_CONCURRENT_ORDERS
============================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
1. –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π + –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–Ω—ã (equal or better)

Author: HEDGER
Version: 1.0
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from order_executor import OrderExecutor
from config import MAX_CONCURRENT_ORDERS
from utils import logger

def test_count_positions_and_orders():
    """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤...")
    
    executor = OrderExecutor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
    
    for symbol in test_symbols:
        try:
            positions, orders, total = executor._count_active_positions_and_orders_for_symbol(symbol)
            logger.info(f"üìä {symbol}: {positions} –ø–æ–∑–∏—Ü–∏–π + {orders} –æ—Ä–¥–µ—Ä–æ–≤ = {total} –≤—Å–µ–≥–æ")
            
            if total >= MAX_CONCURRENT_ORDERS:
                logger.warning(f"‚ö†Ô∏è {symbol} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞: {total}/{MAX_CONCURRENT_ORDERS}")
            else:
                logger.info(f"‚úÖ {symbol} –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞: {total}/{MAX_CONCURRENT_ORDERS}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")


def test_price_quality():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–Ω—ã"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–Ω—ã...")
    
    executor = OrderExecutor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_cases = [
        ('BTCUSDT', 'BUY', 60000.0),
        ('BTCUSDT', 'SELL', 65000.0),
        ('ETHUSDT', 'BUY', 2500.0),
        ('ETHUSDT', 'SELL', 2600.0),
    ]
    
    for symbol, side, price in test_cases:
        try:
            acceptable, reason = executor._check_price_quality(symbol, side, price)
            
            if acceptable:
                logger.info(f"‚úÖ {symbol} {side} @ {price}: {reason}")
            else:
                logger.warning(f"‚ö†Ô∏è {symbol} {side} @ {price}: {reason}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MAX_CONCURRENT_ORDERS")
        logger.info(f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {MAX_CONCURRENT_ORDERS}")
        logger.info("=" * 50)
        
        # –¢–µ—Å—Ç 1: –ü–æ–¥—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ä–¥–µ—Ä–æ–≤
        test_count_positions_and_orders()
        
        logger.info("=" * 50)
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–Ω—ã
        test_price_quality()
        
        logger.info("=" * 50)
        logger.info("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
