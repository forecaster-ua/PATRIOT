"""
üîç PRODUCTION READINESS CHECK
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–∞ –±–æ–µ–≤–æ–º —Å—á–µ—Ç—É
"""

import os
import sys
import logging
from datetime import datetime
from binance.client import Client
from binance.exceptions import BinanceAPIException
from production_safety import ProductionSafetyManager, ProductionOrderValidator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s'
)
logger = logging.getLogger(__name__)

class ProductionReadinessChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.passed_checks = 0
        self.total_checks = 0
        
    def check_environment_variables(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîç Checking environment variables...")
        self.total_checks += 1
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º config.py –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        try:
            from config import BINANCE_TESTNET, NETWORK_MODE
        except ImportError:
            self.errors.append("Cannot import config.py - check configuration")
            return False
        
        if BINANCE_TESTNET:
            logger.info("üß™ Detected TESTNET mode")
            binance_key_vars = ['BINANCE_TESTNET_API_KEY', 'BINANCE_TESTNET_API_SECRET']
            network_name = "TESTNET"
        else:
            logger.info("üöÄ Detected PRODUCTION mode")  
            binance_key_vars = ['BINANCE_MAINNET_API_KEY', 'BINANCE_MAINNET_API_SECRET']
            network_name = "MAINNET"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ  
        required_vars = binance_key_vars + ['TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID']
        
        missing_vars = []
        for var in required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
                
        if missing_vars:
            self.errors.append(f"Missing {network_name} environment variables: {missing_vars}")
            return False
            
        # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not BINANCE_TESTNET:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            logger.info("üõ°Ô∏è Additional production safety checks...")
        else:
            # –î–ª—è testnet - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            logger.info("üß™ Running in testnet mode")
            
        self.passed_checks += 1
        logger.info("‚úÖ Environment variables OK")
        return True
        
    def check_api_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API"""
        logger.info("üîç Checking Binance API connection...")
        self.total_checks += 1
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            from config import BINANCE_API_KEY, BINANCE_API_SECRET, BINANCE_TESTNET, NETWORK_MODE
            
            logger.info(f"üì° Connecting to Binance {NETWORK_MODE}...")
            
            if not BINANCE_API_KEY or not BINANCE_API_SECRET:
                self.errors.append(f"Binance {NETWORK_MODE} API keys not configured in config!")
                return False
            
            client = Client(
                BINANCE_API_KEY,
                BINANCE_API_SECRET,
                testnet=BINANCE_TESTNET
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            account = client.futures_account()
            balance = float(account['totalWalletBalance'])
            
            logger.info(f"üí∞ {NETWORK_MODE} Account Balance: {balance:.2f} USDT")
            
            # –†–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è testnet –∏ mainnet
            min_balance = 10.0 if BINANCE_TESTNET else 50.0
            if balance < min_balance:
                warning_msg = f"Low {NETWORK_MODE} balance: {balance:.2f} USDT (recommended: >{min_balance})"
                if BINANCE_TESTNET:
                    self.warnings.append(warning_msg)
                else:
                    self.warnings.append(warning_msg + " - Consider depositing more for production")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–∞–≤
            try:
                orders = client.futures_get_open_orders()
                logger.info(f"üìä Open orders: {len(orders)}")
            except BinanceAPIException as e:
                if e.code == -2014:  # API-key format invalid
                    self.errors.append(f"API key has insufficient permissions for {NETWORK_MODE}")
                    return False
                elif e.code == -1021:  # Timestamp issues
                    self.warnings.append("Timestamp sync issue detected - check system clock")
                    
            self.passed_checks += 1
            logger.info(f"‚úÖ Binance {NETWORK_MODE} API connection OK")
            return True
            
        except Exception as e:
            self.errors.append(f"Binance API error: {str(e)}")
            return False
            
    def check_safety_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        logger.info("üîç Checking safety settings...")
        self.total_checks += 1
        
        safety = ProductionSafetyManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
        max_risk = float(os.getenv('MAX_RISK_PERCENT', '2.0'))
        if max_risk > 1.0:
            self.warnings.append(f"High risk setting: {max_risk}% (recommended < 1%)")
            
        default_risk = float(os.getenv('DEFAULT_RISK_PERCENT', '2.0'))  
        if default_risk > 1.0:
            self.warnings.append(f"High default risk: {default_risk}% (recommended < 1%)")
            
        leverage = int(os.getenv('DEFAULT_LEVERAGE', '10'))
        if leverage > 5:
            self.warnings.append(f"High leverage: {leverage}x (recommended ‚â§ 5x)")
            
        max_trades = int(os.getenv('MAX_DAILY_TRADES', '10'))
        if max_trades > 5:
            self.warnings.append(f"High daily trade limit: {max_trades} (recommended ‚â§ 5)")
            
        self.passed_checks += 1
        logger.info("‚úÖ Safety settings checked")
        return True
        
    def check_file_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç Checking file dependencies...")
        self.total_checks += 1
        
        required_files = [
            'enhanced_signal_processor.py',
            'signal_analyzer.py', 
            'telegram_bot.py',
            'ticker_monitor.py',
            'config.py',
            'production_safety.py'
        ]
        
        missing_files = []
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
                
        if missing_files:
            self.errors.append(f"Missing required files: {missing_files}")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
        if not os.path.exists('logs'):
            logger.info("üìÅ Creating logs directory...")
            os.makedirs('logs')
            
        self.passed_checks += 1
        logger.info("‚úÖ File dependencies OK")
        return True
        
    def check_telegram_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞"""
        logger.info("üîç Checking Telegram connection...")
        self.total_checks += 1
        
        try:
            from telegram_bot import TelegramBot
            
            bot = TelegramBot()
            test_message = f"üß™ Production readiness test - {datetime.now().strftime('%H:%M:%S')}"
            
            bot.send_signal({
                'ticker': 'TEST',
                'timeframe': 'TEST',
                'signal': 'TEST',
                'entry_price': 50000,
                'confidence': 100,
                'timestamp': datetime.now().timestamp()
            })
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞
            self.passed_checks += 1
            logger.info("‚úÖ Telegram connection OK")
            return True
                
        except Exception as e:
            self.errors.append(f"Telegram error: {str(e)}")
            return False
            
    def check_both_api_environments(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
        logger.info("üîç Checking both TESTNET and MAINNET API keys availability...")
        
        testnet_keys = [
            os.getenv('BINANCE_TESTNET_API_KEY'),
            os.getenv('BINANCE_TESTNET_API_SECRET')
        ]
        
        mainnet_keys = [
            os.getenv('BINANCE_MAINNET_API_KEY'), 
            os.getenv('BINANCE_MAINNET_API_SECRET')
        ]
        
        testnet_available = all(testnet_keys)
        mainnet_available = all(mainnet_keys)
        
        if testnet_available and mainnet_available:
            logger.info("‚úÖ Both TESTNET and MAINNET keys configured - can switch modes")
        elif testnet_available:
            logger.info("üß™ Only TESTNET keys available - limited to testing")
            self.warnings.append("Consider configuring MAINNET keys for production readiness")
        elif mainnet_available:
            logger.info("üöÄ Only MAINNET keys available - production ready")
            self.warnings.append("Consider configuring TESTNET keys for safer testing")
        else:
            logger.warning("‚ö†Ô∏è  No API keys configured for either mode")
            
        return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            
    def run_full_check(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        logger.info("üöÄ Starting Production Readiness Check")
        logger.info("=" * 50)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ config
        from config import BINANCE_TESTNET, NETWORK_MODE
        mode_name = f"üß™ {NETWORK_MODE}" if BINANCE_TESTNET else f"üöÄ {NETWORK_MODE}"
        
        logger.info(f"üì° Mode: {mode_name}")
        logger.info("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        checks = [
            self.check_environment_variables,
            self.check_file_dependencies,
            self.check_api_connection,
            self.check_safety_settings,
            self.check_telegram_connection
        ]
        
        for check in checks:
            try:
                check()
            except Exception as e:
                self.errors.append(f"Check failed: {str(e)}")
                
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=" * 50)
        logger.info(f"üìä RESULTS: {self.passed_checks}/{self.total_checks} checks passed")
        
        if self.errors:
            logger.error("‚ùå ERRORS:")
            for error in self.errors:
                logger.error(f"   ‚Ä¢ {error}")
                
        if self.warnings:
            logger.warning("‚ö†Ô∏è  WARNINGS:")
            for warning in self.warnings:
                logger.warning(f"   ‚Ä¢ {warning}")
                
        is_ready = len(self.errors) == 0
        
        if is_ready:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º config –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
            from config import BINANCE_TESTNET, NETWORK_MODE
            mode_emoji = "üß™" if BINANCE_TESTNET else "üöÄ"
            mode_name = NETWORK_MODE
            is_production = not BINANCE_TESTNET
            
            logger.info(f"{mode_emoji} SYSTEM IS READY FOR {mode_name}!")
            logger.info("üí° Run: python ticker_monitor.py")
            if self.warnings:
                logger.info("‚ö†Ô∏è  Consider addressing warnings for optimal safety")
                
            if is_production:
                logger.info("üö® PRODUCTION MODE - REAL MONEY AT RISK!")
                logger.info("üõ°Ô∏è  Start with minimal amounts and monitor closely")
        else:
            logger.error("üõë SYSTEM NOT READY - Fix errors above")
            
        return is_ready
        
def create_production_env():
    """–°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    if os.path.exists('.env.production'):
        logger.info("üìÑ .env.production already exists")
        return
        
    template = """# üö® PRODUCTION ENVIRONMENT - REAL MONEY!
# Copy this to .env and fill in your actual values

# NETWORK MODE (true = testnet, false = production)
BINANCE_TESTNET=false

# TESTNET API KEYS (for testing)
BINANCE_TESTNET_API_KEY=your_testnet_api_key_here
BINANCE_TESTNET_API_SECRET=your_testnet_secret_here

# MAINNET API KEYS (for production - NO WITHDRAWALS!)
BINANCE_MAINNET_API_KEY=your_production_api_key_here
BINANCE_MAINNET_API_SECRET=your_production_secret_here  

# TELEGRAM
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHAT_ID=your_telegram_chat_id

# SAFETY SETTINGS (CONSERVATIVE FOR BEGINNERS)
EMERGENCY_STOP=false
MIN_ACCOUNT_BALANCE=50.0
MAX_DAILY_TRADES=3
MIN_CONFIDENCE=75.0
MAX_RISK_PERCENT=0.5

# TRADING SETTINGS (REDUCED RISK)
DEFAULT_RISK_PERCENT=0.5
DEFAULT_LEVERAGE=3
SUPPORTED_TIMEFRAMES=15m,1h,4h

# LOGGING
LOG_LEVEL=INFO
"""
    
    with open('.env.production', 'w', encoding='utf-8') as f:
        f.write(template)
        
    logger.info("üìÑ Created .env.production template")
    logger.info("üîë Fill in your production API keys and copy to .env")

if __name__ == "__main__":
    print("üîç PATRIOT Production Readiness Checker")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if '--create-env' in sys.argv:
        create_production_env()
        sys.exit(0)
        
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
    if '--show-mode' in sys.argv:
        from config import BINANCE_TESTNET, NETWORK_MODE
        mode_name = f"üß™ {NETWORK_MODE}" if BINANCE_TESTNET else f"üöÄ {NETWORK_MODE}"
        print(f"Current mode: {mode_name}")
        
        if BINANCE_TESTNET:
            print("To switch to production: Set BINANCE_TESTNET=false in .env")
        else:
            print("To switch to testnet: Set BINANCE_TESTNET=true in .env")
        sys.exit(0)
        
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
    checker = ProductionReadinessChecker()
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    if '--check-both' in sys.argv:
        checker.check_both_api_environments()
        
    is_ready = checker.run_full_check()
    
    if is_ready:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ config
        from config import BINANCE_TESTNET
        testnet_mode = BINANCE_TESTNET
        
        if testnet_mode:
            print("\nüéØ TESTNET MODE - NEXT STEPS:")
            print("1. Test all functions with virtual funds")
            print("2. Verify signals and notifications work correctly")  
            print("3. Monitor logs for any errors")
            print("4. When ready, switch to PRODUCTION mode")
        else:
            print("\nüéØ PRODUCTION MODE - NEXT STEPS:")
            print("1. Start with minimum deposit (50-100 USDT)")
            print("2. Monitor first trades closely")  
            print("3. Keep emergency_stop.py handy")
            print("4. Review logs regularly: tail -f logs/production.log")
            print("üö® REAL MONEY - BE EXTREMELY CAREFUL!")
            
        print(f"\nüöÄ Command: python ticker_monitor.py")
    else:
        print("\nüîß FIX ERRORS ABOVE BEFORE CONTINUING!")
        sys.exit(1)
