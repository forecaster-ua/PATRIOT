#!/usr/bin/env python3
"""
Initialize Symbol Cache - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤
====================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö 
–∏–∑ tickers.txt –∏ —Å–æ–∑–¥–∞–µ—Ç –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º.

–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã
2. –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ tickers.txt
3. –†–∞–∑ –≤ –¥–µ–Ω—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

Author: HEDGER
Version: 1.0
"""

from symbol_cache import SymbolCache
from utils import logger
import config

def initialize_symbol_cache():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å–∏–º–≤–æ–ª–æ–≤"""
    logger.info("üöÄ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–≠–®–ê –°–ò–ú–í–û–õ–û–í ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
        cache = SymbolCache()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = cache.get_cache_stats()
        logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞:")
        logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤ –≤ –∫—ç—à–µ: {stats['cached_symbols']}")
        logger.info(f"   –í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞: {stats['cache_age']}")
        logger.info(f"   –ö—ç—à –≤–∞–ª–∏–¥–µ–Ω: {stats['cache_valid']}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å–∏–º–≤–æ–ª–æ–≤...")
        success = cache.update_cache(force=True)
        
        if success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_stats = cache.get_cache_stats()
            logger.info(f"‚úÖ === –ö–≠–® –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù ===")
            logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {new_stats['cached_symbols']}")
            logger.info(f"   –§–∞–π–ª –∫—ç—à–∞: {new_stats['cache_file']}")
            logger.info(f"   –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {new_stats['last_update']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            test_symbols = ['BTCUSDT', 'ETHUSDT', 'NKNUSDT', 'SOLUSDT']
            test_price = 1000.123456
            test_quantity = 0.123456789
            
            logger.info(f"üß™ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –ö–≠–®–ê ===")
            
            for symbol in test_symbols:
                info = cache.get_symbol_info(symbol)
                if info:
                    rounded_price = cache.round_price(symbol, test_price)
                    rounded_qty = cache.round_quantity(symbol, test_quantity)
                    
                    logger.info(f"   {symbol}:")
                    logger.info(f"     Status: {info['status']}")
                    logger.info(f"     Tick Size: {info['tick_size']}")
                    logger.info(f"     Step Size: {info['step_size']}")
                    logger.info(f"     Price: {test_price:.6f} ‚Üí {rounded_price:.6f}")
                    logger.info(f"     Quantity: {test_quantity:.9f} ‚Üí {rounded_qty:.9f}")
                else:
                    logger.warning(f"   {symbol}: –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            
            logger.info("üéâ === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===")
            logger.info("üí° –ö—ç—à –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ")
            
        else:
            logger.error("‚ùå === –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ö–≠–®–ê ===")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API –∏ —Ñ–∞–π–ª tickers.txt")
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    logger.info(f"üåê –†–µ–∂–∏–º: {'TESTNET' if config.BINANCE_TESTNET else 'MAINNET'}")
    initialize_symbol_cache()
